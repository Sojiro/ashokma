{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/me/index/avatar.jpeg","path":"me/index/avatar.jpeg","modified":1,"renderable":0},{"_id":"themes/anodyne/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1}],"Cache":[{"_id":"themes/anodyne/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1550933252663},{"_id":"themes/anodyne/LICENSE","hash":"283b04655955b9d7904c85b7a4f908de1f529699","modified":1550933252663},{"_id":"themes/anodyne/README.md","hash":"91e55502fdd9d96d3491c56e17ed4a5bfecec99b","modified":1550933252663},{"_id":"themes/anodyne/_config.yml","hash":"91746d9ae1290749eb5c7af8528d2ad3b280afd6","modified":1578678738310},{"_id":"source/_drafts/A-week-in-Madeira-Portugal.md","hash":"fde8eed7b77254b0dd3be2d97a86109508dbda3f","modified":1574112145942},{"_id":"source/_drafts/Create-a-calculator-app-with-Electron.md","hash":"729073c2e8ffb7fe9d53580cff04985c60be7d7b","modified":1564510309741},{"_id":"source/_drafts/How-to-enable-ES-modules-in-nodejs.md","hash":"348888a9afe4dd3af60dc1afe0d7d81913db92d8","modified":1562160551981},{"_id":"source/_drafts/Mosquitto-was-expecting-double-quote-to-start-field-name.md","hash":"6c9f30422e7c6554a7dea1a129c9df0120d826e6","modified":1578250170020},{"_id":"source/_drafts/Spring-Boot-How-to-include-a-Configuration-from-a-dependency.md","hash":"48ebbbc61f4317a5fbca0daa2ea91338e78e7fe9","modified":1577969996882},{"_id":"source/_posts/API-Development-with-Node-js-and-Express-2019-05-18.md","hash":"fb13f0bb1e9c8aa4bf178a65fe859acf6e74b386","modified":1558186795910},{"_id":"source/_posts/Address-in-use-kill-process-at-a-specific-port-2019-02-24.md","hash":"7de6b77062b68a2bb5eee91c5ee01c7a433cac3b","modified":1552843643787},{"_id":"source/_posts/CSS-pseudo-elements-and-how-to-use-them-2019-09-02.md","hash":"5465e612e062000f0a8a98910b8ae9f52c6a461d","modified":1567541323226},{"_id":"source/_posts/CSS-transform-property-2019-08-23.md","hash":"8b54562a514e3e3e9dbcc5dce30b5a8a35f8643b","modified":1566512267969},{"_id":"source/_posts/DailyUI-Challenge-Series-001-signup-form-2019-08-25.md","hash":"04c06e9f40c743b04dd45fd4c7530fe2f920ee77","modified":1566766594132},{"_id":"source/_posts/Few-ways-to-add-and-remove-items-in-an-array-2019-08-01.md","hash":"9e623549ebfea0e4bd148243804d4f45f654b20a","modified":1564695744519},{"_id":"source/_posts/How-to-Change-File-Ownership-Groups-in-Linux-2019-03-23.md","hash":"03104e74e1f74c4df26f7fa37167a3c18580ad2c","modified":1553381185536},{"_id":"source/_posts/How-to-Turn-Off-Autocomplete-for-Input-2019-07-10.md","hash":"508400c5e4ac1cd0cab6b75207e6ce608cfed98d","modified":1565526980601},{"_id":"source/_posts/How-to-add-environment-or-path-variables-in-linux-2019-07-03.md","hash":"ac15dec9d7a13a35a5b0383eb992ae699927c85d","modified":1562093335669},{"_id":"source/_posts/How-to-add-quick-night-mode-to-your-blog-2019-09-03.md","hash":"770ea4572e7e00a2fa8a15bbe990d12aa39a0610","modified":1567544113968},{"_id":"source/_posts/How-to-change-port-mapping-of-a-running-docker-container-2019-03-23.md","hash":"97adbe15d9ddf3dc2470d99e432ca1a0effac066","modified":1553381757857},{"_id":"source/_posts/How-to-configure-PostgreSQL-to-accept-all-incoming-connections-2019-04-01.md","hash":"3ae00d8adb7b460a211918e7b5052405c4ab13f5","modified":1554149652918},{"_id":"source/_posts/How-to-convert-SVGs-to-desired-color-2019-10-08.md","hash":"156015dafcff158bb10acdac9b28d900cbffd9a5","modified":1570568658133},{"_id":"source/_posts/How-to-convert-value-to-a-string-in-JavaScript-2019-06-02.md","hash":"158aaeac579808fb410cdd50bb4b5686576cfaf1","modified":1559585457663},{"_id":"source/_posts/How-to-create-a-custom-checkbox-with-just-CSS-2019-08-26.md","hash":"1864acc1f985b79051a2ed69b0922668f18ea895","modified":1567443720585},{"_id":"source/_posts/How-to-create-users-and-groups-in-Linux-from-the-command-line-2019-03-23.md","hash":"ad0bcf4ce7a815262eb03060eae54209be654f00","modified":1553381209392},{"_id":"source/_posts/How-to-create-your-own-startup-script-in-linux-2019-07-17.md","hash":"e43cf3c9d55fa5ef4abb0f57537ea779838a8b84","modified":1563739710636},{"_id":"source/_posts/How-to-debug-JavaScript-effectively-2019-09-30.md","hash":"6d3a08286e92096008a9474a6f256394fd8443c4","modified":1569874799984},{"_id":"source/_posts/How-to-extract-tar-gz-file-in-linux-2019-07-03.md","hash":"05e27d0eb3e1df723684b615152269d3065216d0","modified":1562167615197},{"_id":"source/_posts/How-to-get-a-list-of-files-in-a-directory-using-Bash-2019-05-23.md","hash":"5de0a0bdc0992e807abe363fa9a6cce510564f77","modified":1558638321222},{"_id":"source/_posts/How-to-make-terminal-to-always-ask-for-password-2019-12-22.md","hash":"af3ed0f92a623c02c6c4eebc741fc7a5649aa6da","modified":1577041744703},{"_id":"source/_posts/How-to-merge-arrays-in-JavaScript-2019-05-19.md","hash":"71ae3cc809cdd8ac7f0b366debc2e6b861224f09","modified":1558378070447},{"_id":"source/_posts/How-to-publish-and-subscribe-to-a-topic-in-mosquitto-2019-04-13.md","hash":"21ffaf76d131b4defdc4aa57d20414f5029ba338","modified":1555161572910},{"_id":"source/_posts/How-to-remove-array-duplicates-in-JavaScript-2019-05-21.md","hash":"c00e61f035b9799d9573439d764a6d5b1ce088cd","modified":1558469232634},{"_id":"source/_posts/How-to-reverse-a-string-in-JavaScript-2019-05-22.md","hash":"1c80f7ee13677c29bc68918bd11752e0b84cfd4b","modified":1558553702708},{"_id":"source/_posts/How-to-run-a-web-server-using-Node-JS-2019-04-15.md","hash":"84e5aa0d9a36f095223775cab185907274b0d251","modified":1558187053337},{"_id":"source/_posts/How-to-run-docker-containers-in-the-background-of-your-terminal-2019-04-14.md","hash":"8b9474bd58c8928aeb780b2595d35b9d47ea293e","modified":1558186528609},{"_id":"source/_posts/How-to-sort-lines-in-a-file-using-bash-2019-05-26.md","hash":"150d5791b111739521d73ac75adf94f4a2307d76","modified":1558899748102},{"_id":"source/_posts/How-to-toggle-a-css-class-of-an-element-2020-02-03.md","hash":"9d8afd571c3deac0c1b2a8e8ae192b72c783c137","modified":1580740882548},{"_id":"source/_posts/How-to-tune-up-your-PostgreSQL-performance-2019-12-15.md","hash":"c010dee17f18812cc04533cc0927bf0bed4c57a2","modified":1576427114694},{"_id":"source/_posts/Learning-react-todo-app-2019-09-14.md","hash":"5322b4092435908d400ecde21204aa867fd00c86","modified":1568413331262},{"_id":"source/_posts/Linux-How-to-see-the-installed-OS-version-from-terminal-2019-03-17.md","hash":"7fe56d47ce507bffdc310f0fad133f46c3391297","modified":1555161362111},{"_id":"source/_posts/Linux-how-to-exclude-specific-folder-during-copy-in-terminal-2019-03-17.md","hash":"aebf54aff24bad49ced15aec0c7b5d30ea11c198","modified":1555161377955},{"_id":"source/_posts/My-new-laptop-System76-Galago-Pro-2019-02-22.md","hash":"4b29b729422c4281aa6e177eb891f0c85ea09003","modified":1552835343511},{"_id":"source/_posts/Run-Postgres-as-Docker-container-2019-03-17.md","hash":"ab124de21c9ebd3709a5e152792305ca9a9548b1","modified":1556736929139},{"_id":"source/_posts/Run-eclipse-mosquitto-as-docker-container-2019-04-13.md","hash":"1ef4b18d3aa0b81b3108f1e84474786e47296c1e","modified":1555160598320},{"_id":"source/_posts/Usecases-for-first-child-and-last-child-in-css-2019-06-10.md","hash":"5892b688200a6aef0129d5f684c9a2bde5fd562a","modified":1560147201941},{"_id":"source/_posts/hexo-fatal-in-unpopulated-submodule-deploy-git-2019-02-18.md","hash":"106e5019d1c70504bafda5d3032bdde075ca76d9","modified":1552835368495},{"_id":"source/_posts/install-nodejs-and-npm-pop-os-2019-02-18.md","hash":"687ed9f6c786e69aa2326e8400f2db344ee4a8bc","modified":1552835278682},{"_id":"source/_posts/log-2019-02-17.md","hash":"e7a8dd9315dba64241031b55cb694868610e1a86","modified":1552835343511},{"_id":"source/me/index.md","hash":"3ccfc80b580384188966043807da724b2a0da5da","modified":1578678770632},{"_id":"source/tags/index.md","hash":"fd78486095dc74c3989cc233712488b5058af13c","modified":1551020713338},{"_id":"themes/anodyne/languages/default.yml","hash":"ca15bcfaf72bcc03f0399adad2ccc1286b7e1f0b","modified":1550933252663},{"_id":"themes/anodyne/languages/en.yml","hash":"ca15bcfaf72bcc03f0399adad2ccc1286b7e1f0b","modified":1550933252663},{"_id":"themes/anodyne/languages/fr.yml","hash":"b436688a5a0337018527ed57910fafdc5363afed","modified":1550933252663},{"_id":"themes/anodyne/languages/ja.yml","hash":"ef896837230aadc20255ba78e950bf9654b75d91","modified":1550933252663},{"_id":"themes/anodyne/languages/nl.yml","hash":"cc155e8af2de51b4bff97400ced85028cdcbce78","modified":1550933252663},{"_id":"themes/anodyne/languages/zh-CN.yml","hash":"900ad0d674cd5692ed50e0c0215f4e40a956ecc8","modified":1550933252663},{"_id":"themes/anodyne/layout/buy-me-a-coffee.ejs","hash":"8021548cd9ee431d95a4a53eac3fd1b94d544678","modified":1563743364126},{"_id":"themes/anodyne/layout/archive.ejs","hash":"1ddb9487469ab81a18a13162a270c5c53b7d8fd5","modified":1556571169080},{"_id":"themes/anodyne/layout/index.ejs","hash":"7b21d30b7080456b4fe7582a1fd339550a3b74a9","modified":1556571169080},{"_id":"themes/anodyne/layout/layout.ejs","hash":"6c4bb6c8eb076c0d3c9ece82708450dd6dba4a41","modified":1570396563485},{"_id":"themes/anodyne/layout/page.ejs","hash":"ae8c0ce4d8285c09bb06881bff38ca88aa5af4b0","modified":1556571169084},{"_id":"themes/anodyne/layout/post.ejs","hash":"5ccd42d5ac46e84ad432d9b3c7ae6cb1508fe89b","modified":1556571169080},{"_id":"themes/anodyne/template/debug.css","hash":"07ad253d498ce573300a544913f9dc61ab0e6528","modified":1550933252667},{"_id":"themes/anodyne/template/index.html","hash":"263559688ef2b6460b79733092b2a32d9940382e","modified":1556571169172},{"_id":"themes/anodyne/template/logo.svg","hash":"96888554b49b60e3c8484e544a276a79e599c106","modified":1550933252691},{"_id":"themes/anodyne/template/post.html","hash":"9c8d9ffbc1030e07a6e169c2214bafd4c7a28c16","modified":1556571169172},{"_id":"themes/anodyne/template/style.css","hash":"1e1c2f5129500746b02280a61b42ff2e86f6c2ef","modified":1565527084199},{"_id":"source/_posts/DailyUI-Challenge-Series-001-signup-form-2019-08-25/dailyui-challenge-001-signup-form.png","hash":"82b88fef8828549b74e3dc84e569dca2031fe2cc","modified":1566766594136},{"_id":"source/_posts/How-to-add-quick-night-mode-to-your-blog-2019-09-03/ashkeys-instant-nightmode-on.png","hash":"c81a2aa2acd730f40aa29e174429c387ea202cb2","modified":1567544113968},{"_id":"source/_posts/How-to-add-quick-night-mode-to-your-blog-2019-09-03/ashkeys-instant-nightmode.png","hash":"ae6b68f2413e5dbe28eeeaeece4d8d07708c24ea","modified":1567544113968},{"_id":"source/_posts/Usecases-for-first-child-and-last-child-in-css-2019-06-10/first-child_last-child.png","hash":"3e6b1c9f1ab59708b95f431f4d11b35d68b1dd55","modified":1560147335627},{"_id":"source/_posts/Usecases-for-first-child-and-last-child-in-css-2019-06-10/first-row_last-row.png","hash":"57a69fbc0cc62fc4b2ac618b4ddef8e158457c7c","modified":1560147201945},{"_id":"source/me/index/avatar.jpeg","hash":"b73950a7d2abc1a8266ffa17780030177ac178f9","modified":1578672702937},{"_id":"themes/anodyne/layout/_partial/after-footer.ejs","hash":"a56ee353c8adab93c6ec5fa7937b03672256b42b","modified":1550933252667},{"_id":"themes/anodyne/layout/_partial/article-archive.ejs","hash":"2f1d19a948a61784b161ae20b60d6bfe144fa355","modified":1550933252667},{"_id":"themes/anodyne/layout/_partial/article-short.ejs","hash":"67400eae31c55b3773eacffbdadf436e4591b37e","modified":1564950137484},{"_id":"themes/anodyne/layout/_partial/banner.ejs","hash":"b06bfcc1e0861600c2e1b06d43cf7e511503c54b","modified":1566940794902},{"_id":"themes/anodyne/layout/_partial/comments.ejs","hash":"132a80fc6bc88377c1b338f423f0716ce9186d17","modified":1550933252667},{"_id":"themes/anodyne/layout/_partial/footer.ejs","hash":"837567bf4d637c4f1751220693d2afcc146c5031","modified":1563742671499},{"_id":"themes/anodyne/layout/_partial/google-analytics.ejs","hash":"40eebcbb483c6df3d5854d0a9558c76686193970","modified":1558899727109},{"_id":"themes/anodyne/layout/_partial/head.ejs","hash":"9eb12f33770ad8e9db49cbd30abe8f4e3f301f7c","modified":1558195301040},{"_id":"themes/anodyne/layout/_partial/pagination.ejs","hash":"b7909df49fdff5943c2b93821a2ba6b4ed10de95","modified":1554030703371},{"_id":"themes/anodyne/layout/_partial/tag-category-index.ejs","hash":"39de576e2ebf41f53c9b1e94f0cad981a6355d2c","modified":1550933252667},{"_id":"themes/anodyne/layout/_partial/widget-about.ejs","hash":"3aa8a1143f0e5184111f93b2c21b0c30d905771d","modified":1550933252667},{"_id":"themes/anodyne/layout/_partial/widget-categories.ejs","hash":"928234e98047366bcda7e2b9c88728b0a101f350","modified":1550933252667},{"_id":"themes/anodyne/layout/_partial/widget-recent-posts.ejs","hash":"b127b23113bcdee2d4eb030bbfa9cc6acd732c3a","modified":1550933252667},{"_id":"themes/anodyne/source/css/style.styl","hash":"851cf156d30fdef688b78e10960c72fafb879b53","modified":1566940906249},{"_id":"themes/anodyne/template/devicon/Read Me.txt","hash":"59f2046b2874381564e1bb8706b011c9705b0bd4","modified":1550933252667},{"_id":"themes/anodyne/template/devicon/style.css","hash":"aa9724750bd8819a5193e1b2a8db83c8fa6a2030","modified":1550933252691},{"_id":"source/_posts/How-to-create-a-custom-checkbox-with-just-CSS-2019-08-26/custom-checkbox-css-only.png","hash":"51fad72999af7faa1f803e9dafb9434b14c14d6d","modified":1566854059924},{"_id":"themes/anodyne/layout/_partial/extras/night-mode.ejs","hash":"045dd70be77f56fe9d4126b1c0aaba95469f20fe","modified":1567543268737},{"_id":"themes/anodyne/layout/_partial/googleadds/headeradd.ejs","hash":"14b5ef2d2dbd5df10675d3fbab07a18d13378afd","modified":1554028560018},{"_id":"themes/anodyne/source/css/partial/_base.styl","hash":"edb253386cc6c7fe5f48980f989ec8771abe99fa","modified":1550933252667},{"_id":"themes/anodyne/source/css/partial/_content.styl","hash":"5f5b925a52f514c18263a2283c51b9296f32a376","modified":1553036421505},{"_id":"themes/anodyne/source/css/partial/_highlight.styl","hash":"c3fa7da7b998c5fb2bf5b43b0bcc51cf4c98123f","modified":1566853352408},{"_id":"themes/anodyne/template/devicon/demo-files/demo.js","hash":"3325132f9aaedbddaeb5eab2b9c0f9ce698b8d93","modified":1550933252667},{"_id":"themes/anodyne/template/devicon/demo-files/demo.css","hash":"788bea3952f64bf51bd1df2d4af8bc7f6e80e798","modified":1550933252667},{"_id":"source/_posts/How-to-convert-SVGs-to-desired-color-2019-10-08/css_filter_generator.png","hash":"6dc6cfc069d502c5faf5f02767b3d4fa1b56fcfc","modified":1570568658137},{"_id":"themes/anodyne/template/devicon/fonts/devicon.ttf","hash":"3eb76cd8e89f7046a735a7a8bc2de693c7314a07","modified":1550933252679},{"_id":"themes/anodyne/template/devicon/fonts/devicon.eot","hash":"72d1a173e58c7508bb1457a535b67472c6c35cec","modified":1550933252671},{"_id":"themes/anodyne/template/devicon/fonts/devicon.woff","hash":"69b887104812d0f246195fc3ee4abcafbbc4e961","modified":1550933252683},{"_id":"themes/anodyne/template/devicon/demo.html","hash":"2f7f175395db74edf2e127e0d10e4ab3c424fd35","modified":1550933252667},{"_id":"source/_drafts/How-to-enable-ES-modules-in-nodejs/es6_import.svg","hash":"6eee008a4c860e0b97b51ea6d6a0dc206285d4bf","modified":1562158181328},{"_id":"source/_drafts/How-to-enable-ES-modules-in-nodejs/common_js_import.svg","hash":"5768247b9a7f821846845cb5e44b5d5d6813978b","modified":1562157093332},{"_id":"source/_posts/Few-ways-to-add-and-remove-items-in-an-array-2019-08-01/shift_unshift_methods.svg","hash":"844c9b2729c51abe0d95ede05873ffe927693005","modified":1564695744523},{"_id":"source/_posts/Few-ways-to-add-and-remove-items-in-an-array-2019-08-01/push_pop_methods.svg","hash":"7101d1968a0fb26f75d89e704f88bb41209e189d","modified":1564695744523},{"_id":"themes/anodyne/template/devicon/fonts/devicon.svg","hash":"e503ceedbdc3f353f977a3bcee6a341f94e52dab","modified":1550933252679},{"_id":"themes/anodyne/template/devicon/selection.json","hash":"3f0a9eefd7e91e00bcc01f47ad1a28282cd9bf48","modified":1550933252691},{"_id":"source/_posts/CSS-transform-property-2019-08-23/css-transform-html.svg","hash":"f7aac67b4ebae70d55e408bb858e5bac24c0fe99","modified":1566512267973},{"_id":"source/_posts/CSS-transform-property-2019-08-23/css-transform-css.svg","hash":"ff74cb06dd94e3ca21502d1c72274286050e3bfd","modified":1566512267973},{"_id":"source/_posts/My-new-laptop-System76-Galago-Pro-2019-02-22/system_76_settings_configuration.jpg","hash":"e597d689bf5010bf910308e39211e83501e691ec","modified":1550479509000},{"_id":"source/_drafts/A-week-in-Madeira-Portugal/machico_viewpoint.jpg","hash":"4024548572b766c2f24e1deb6cb9548b52a4a20d","modified":1569604475147},{"_id":"source/_posts/My-new-laptop-System76-Galago-Pro-2019-02-22/system_76_installation.jpg","hash":"776afc74f838df0932685071c28050007d4f063a","modified":1550479487000},{"_id":"source/_posts/My-new-laptop-System76-Galago-Pro-2019-02-22/system_76_unleash_your_potential.jpg","hash":"555e2298487d5938ac16d7fe59e475303c48aaa0","modified":1550480411000},{"_id":"source/_posts/My-new-laptop-System76-Galago-Pro-2019-02-22/system_76_reusable_package.jpg","hash":"c64d0e05d1db589664ed18c4e872f9af5d910551","modified":1550874448252},{"_id":"source/_posts/My-new-laptop-System76-Galago-Pro-2019-02-22/system_76_first_look.jpg","hash":"dd64529e66317da803613b893eda9e0651ade7c7","modified":1550479117000},{"_id":"source/_posts/My-new-laptop-System76-Galago-Pro-2019-02-22/system_76_gift_card.jpg","hash":"c758842115ff0ac6a5dbd37e82abd1ca8ddf40de","modified":1550874448252},{"_id":"public/me/index.html","hash":"ca684d74a00e76273f994bf788c2bff73a47ccd4","modified":1580741217426},{"_id":"public/2020/02/03/How-to-toggle-a-css-class-of-an-element/index.html","hash":"283a03cdff59925b3df7db09ec827d42225a487c","modified":1580741217426},{"_id":"public/2019/12/22/How-to-make-terminal-to-always-ask-for-password/index.html","hash":"3189116fe99dc0cb0c1a23ea59b0d7a449de1fa3","modified":1580741217426},{"_id":"public/2019/10/08/How-to-convert-SVGs-to-desired-color/index.html","hash":"3664bdf38bdcd428164e738026ef45429308e936","modified":1580741217427},{"_id":"public/2019/09/02/CSS-pseudo-elements-and-how-to-use-them/index.html","hash":"f70f1fde246563be4d6f3431f94cfd7fcc2a0ac5","modified":1580741217427},{"_id":"public/2019/08/25/DailyUI-Challenge-Series-001-signup-form/index.html","hash":"e1c392d27e6844671fb86cc9e4b67b327625eb06","modified":1580741217427},{"_id":"public/2019/08/23/CSS-transform-property/index.html","hash":"3b165ba5b419aab5bcb5581f84f6e74aaf2536b4","modified":1580741217427},{"_id":"public/2019/08/01/Few-ways-to-add-and-remove-items-in-an-array/index.html","hash":"bad126d1a679d52874efaf74259fafcdbadad338","modified":1580741217427},{"_id":"public/2019/07/17/How-to-create-your-own-startup-script-in-linux/index.html","hash":"d213a1ffdc9b712d3906f7910d0a546e90b321ae","modified":1580741217427},{"_id":"public/2019/07/03/How-to-extract-tar-gz-file-in-linux/index.html","hash":"f801a4f3a09ceeab875d510a2045fe68ea4e80d4","modified":1580741217427},{"_id":"public/2019/07/03/How-to-add-environment-or-path-variables-in-linux/index.html","hash":"59cd9aff6f7170f731a40ccfa6f16eac7cbd6bf0","modified":1580741217427},{"_id":"public/2019/05/26/How-to-sort-lines-in-a-file-using-bash/index.html","hash":"69c8688950b7d720723f1d6a292f5129a04f2fe2","modified":1580741217427},{"_id":"public/2019/05/23/How-to-get-a-list-of-files-in-a-directory-using-Bash/index.html","hash":"95449f463e24b801185159235f9b3937e18e3e23","modified":1580741217427},{"_id":"public/2019/05/22/How-to-reverse-a-string-in-JavaScript/index.html","hash":"c9a945bdf291408f46ee8736301f6e76ffdd36d9","modified":1580741217427},{"_id":"public/2019/05/21/How-to-remove-array-duplicates-in-JavaScript/index.html","hash":"b72f02172626204f86970dee00df0e36eaecadfb","modified":1580741217427},{"_id":"public/2019/05/19/How-to-merge-arrays-in-JavaScript/index.html","hash":"3bfb26be042ce50de3fe9917f3fdb73c30fb618a","modified":1580741217427},{"_id":"public/2019/05/18/API-Development-with-Node-js-and-Express/index.html","hash":"64eb57cb05cd28b447bc470c5ad59887cfe31e04","modified":1580741217427},{"_id":"public/2019/04/15/How-to-run-a-web-server-using-Node-JS/index.html","hash":"3befd305b1eb6804ca51476e3c64c7bbd9b6fcf7","modified":1580741217428},{"_id":"public/2019/02/24/Address-in-use-kill-process-at-a-specific-port/index.html","hash":"43785f031625c2a211057635f331ed6664b1d092","modified":1580741217428},{"_id":"public/2019/02/20/My-new-laptop-System76-Galago-Pro/index.html","hash":"b360052b895e4a47113c8d2a6b44b9e0396542a1","modified":1580741217428},{"_id":"public/2019/02/18/hexo-fatal-in-unpopulated-submodule-deploy-git/index.html","hash":"56a7d0e6c3611f2e444d8a863f90cb9ccce97362","modified":1580741217428},{"_id":"public/2019/02/18/install-nodejs-and-npm-pop-os/index.html","hash":"bc46748c9da3b8faf56853dcb5f10c9518730aa1","modified":1580741217428},{"_id":"public/2019/02/17/log/index.html","hash":"d612d654586a4afbd8825704b5da2ffcf3b6d664","modified":1580741217428},{"_id":"public/tags/Journal/index.html","hash":"41101066f76c06ea55c70c000c5a384b67da7771","modified":1580741217428},{"_id":"public/tags/Blog/index.html","hash":"352c4730c46093ccc7de4e282e79925c58735db4","modified":1580741217428},{"_id":"public/tags/Blog/page/2/index.html","hash":"4eed83103b0236f26ed3d62d69de11f98e46d3fd","modified":1580741217428},{"_id":"public/tags/ES6/index.html","hash":"082b232967f0a5b163b90e678f7cfa635cf9cbb1","modified":1580741217428},{"_id":"public/tags/nodejs/index.html","hash":"9fdda76bb6297449a145a07cbc2a8dfc3f1e2ad4","modified":1580741217428},{"_id":"public/tags/Mosquitto/index.html","hash":"3f6d05aad3ac71e95b0d1e2c4ca4f5769a871a6e","modified":1580741217428},{"_id":"public/tags/API/index.html","hash":"ee0b5e654c89ce4d7cb4ff95ecafba4b4f72c6c2","modified":1580741217428},{"_id":"public/tags/express/index.html","hash":"7315edbfd3c5816fa56479e69ce09468b89ed4e7","modified":1580741217428},{"_id":"public/tags/Linux/index.html","hash":"f370a647476fbe0717aa63cf0ed787377d7499b1","modified":1580741217429},{"_id":"public/tags/Linux/page/2/index.html","hash":"49550ba83e8733fe059716eb283a357d4551d716","modified":1580741217429},{"_id":"public/tags/Pop-OS/index.html","hash":"5bb747216683c46c87d3117c9fa7067a1ef4238e","modified":1580741217429},{"_id":"public/tags/Pop-OS/page/2/index.html","hash":"99a813895b6b085de70d977f80c7016b88d60832","modified":1580741217429},{"_id":"public/tags/Terminal-Usage/index.html","hash":"88eb81161031bf54e99a8568d237177a6418ced6","modified":1580741217429},{"_id":"public/tags/CSS/index.html","hash":"90a32f54bbdb1cf1a9aaa0e1cd04c4eab0aebfd4","modified":1580741217429},{"_id":"public/tags/Pseudo-classes/index.html","hash":"1340ec901591e58976d166cc69301887b7f1c5e3","modified":1580741217429},{"_id":"public/tags/DailyUI-Challenge-Series/index.html","hash":"d637048840c205bca7e54534d4c8e39cd93bb106","modified":1580741217430},{"_id":"public/tags/Angular/index.html","hash":"5e481cd55d63d026cd6924d158a62b6816d34a6b","modified":1580741217430},{"_id":"public/tags/Reactive-Forms/index.html","hash":"552735e32d4625749585ff8397ae7958765791c0","modified":1580741217430},{"_id":"public/tags/JavaScript/index.html","hash":"57fa2a8720dfbbdcf38f8dba3a65e73e61c69b42","modified":1580741217430},{"_id":"public/tags/Array/index.html","hash":"98f972502507670cb93fd18feeb4b7862bc10299","modified":1580741217430},{"_id":"public/tags/JS/index.html","hash":"21e8dd02e31b5dcb16467457b86a5985cf190e70","modified":1580741217430},{"_id":"public/tags/Tutorial/index.html","hash":"8d347473362cfa41a51db2694375f974e27bf82c","modified":1580741217431},{"_id":"public/tags/HTML/index.html","hash":"27cef572d7c1059514c73165cd2f3c437908b870","modified":1580741217431},{"_id":"public/tags/Web-Browser/index.html","hash":"066975796e5e510fa9329e2aee8ad2f17304af6d","modified":1580741217431},{"_id":"public/tags/New-to-me/index.html","hash":"5b8cd1ea42eb95e1ad15a885cca509ce6ed8c548","modified":1580741217431},{"_id":"public/tags/CSS3/index.html","hash":"b9b04416455e1cf83d21f89d38327bfff3b84c7a","modified":1580741217431},{"_id":"public/tags/Docker/index.html","hash":"ebd77b94449184fe72008144af52691698d27ae8","modified":1580741217431},{"_id":"public/tags/SVG/index.html","hash":"963a0bf67017858c372d2059c2d917afd53aa9dd","modified":1580741217431},{"_id":"public/tags/Tools/index.html","hash":"22d23268d347be4cbd46d775e4ab7b58bdf081bf","modified":1580741217431},{"_id":"public/tags/Postgres/index.html","hash":"ec63979d3c89b542510aa08edf9b6cbafd92f56b","modified":1580741217431},{"_id":"public/tags/String/index.html","hash":"aaaa7be54f522f69dcfec0f71c6c07457e3e1833","modified":1580741217431},{"_id":"public/tags/Custom/index.html","hash":"f937a417efc12078fd68c59c3d01455a0bfcba20","modified":1580741217431},{"_id":"public/tags/Debug/index.html","hash":"66734be7871a399f64fec2dc05edb08fa667efc7","modified":1580741217431},{"_id":"public/tags/Bash/index.html","hash":"363f5d5a1bfa59f4aa63b79d5de53ab85677fb91","modified":1580741217432},{"_id":"public/tags/Shell/index.html","hash":"4b1743063a9c29325cfc1bb97b05d91ec1d55287","modified":1580741217432},{"_id":"public/tags/Terminal/index.html","hash":"05997bebf9af127ef6094167b323950863e83b7c","modified":1580741217432},{"_id":"public/tags/How-to/index.html","hash":"4c08bb06f42782b20649219bc55bcaa3c111cb56","modified":1580741217432},{"_id":"public/tags/Arrays/index.html","hash":"7b614a06ea22ddb39b3839551443b3fd66df164f","modified":1580741217432},{"_id":"public/tags/MQTT/index.html","hash":"8ca4f84db75b9213f4d1d500a5c0964ceca62cac","modified":1580741217432},{"_id":"public/tags/server/index.html","hash":"202c8581bb0a30d4978825a47130e94c8defe78d","modified":1580741217432},{"_id":"public/tags/terminal/index.html","hash":"144a0190ecd820fe9b9f176690c928f6cd511190","modified":1580741217432},{"_id":"public/tags/Performance/index.html","hash":"f7948617b87510afe5b7d5d09e9f8a571ca8bbc0","modified":1580741217432},{"_id":"public/tags/DB/index.html","hash":"4349551f4ee2d1b3ebf6d0d6f116feed33ff6715","modified":1580741217432},{"_id":"public/tags/React/index.html","hash":"c82dfbd775cb10687ef665b7dac96cda479deae9","modified":1580741217432},{"_id":"public/tags/App/index.html","hash":"d84d9513ce2e25adc5361666f01680f2218245dc","modified":1580741217432},{"_id":"public/tags/Setup/index.html","hash":"504ec977439e5463f2dc29db202be0558730fb11","modified":1580741217432},{"_id":"public/tags/Usecase/index.html","hash":"3131c2071062c597fcc33f5c8feaf8c77a9a32df","modified":1580741217433},{"_id":"public/tags/Hexo/index.html","hash":"7144381b775a5708c328cb98c366c10aa66ccc69","modified":1580741217433},{"_id":"public/tags/npm/index.html","hash":"117834108b0fd334d1e315148081f60c74eaa910","modified":1580741217433},{"_id":"public/tags/Shukuchi/index.html","hash":"b3813fd51f9a086bc62fb0ed0da7ce7cd8ab49bb","modified":1580741217433},{"_id":"public/tags/index.html","hash":"9891e2e7acf14e7934e4db12fd74f8cfe3eaedad","modified":1580741217433},{"_id":"public/2019/12/15/How-to-tune-up-your-PostgreSQL-performance/index.html","hash":"ba9f3eeddf9951c538ad40f768bc61f6a49c0c25","modified":1580741217433},{"_id":"public/2019/09/30/How-to-debug-JavaScript-effectively/index.html","hash":"5eb5f332b82ddd9f3894b36a1136769f1b9b1cd9","modified":1580741217433},{"_id":"public/2019/09/14/Learning-react-todo-app/index.html","hash":"dc4fc54abf12c01c36ec1757825b308eb692d039","modified":1580741217433},{"_id":"public/2019/09/03/How-to-add-quick-night-mode-to-your-blog/index.html","hash":"0a4e02219c273c0dfade325051787956c2d390ec","modified":1580741217433},{"_id":"public/2019/08/26/How-to-create-a-custom-checkbox-with-just-CSS/index.html","hash":"36dc00c4c920a9814d323e8f45c994e81aa1d8c5","modified":1580741217433},{"_id":"public/2019/07/10/How-to-Turn-Off-Autocomplete-for-Input/index.html","hash":"3acb038a2c2a7cd7d855d9218929142c95e7fb13","modified":1580741217434},{"_id":"public/2019/06/10/Usecases-for-first-child-and-last-child-in-css/index.html","hash":"612bb84695a8d1c3dc4fb54b4072050b979dae02","modified":1580741217434},{"_id":"public/2019/06/02/How-to-convert-value-to-a-string-in-JavaScript/index.html","hash":"a9b353df49976ec6fe5edc007d9b1ab084554fdf","modified":1580741217434},{"_id":"public/2019/04/14/How-to-run-docker-containers-in-the-background-of-your-terminal/index.html","hash":"2720c299baf63517f2a2891c09090fcaf6988aaa","modified":1580741217434},{"_id":"public/2019/04/13/How-to-publish-and-subscribe-to-a-topic-in-mosquitto/index.html","hash":"165cbe0901e0b8818e4b55f99e04d7981854c00e","modified":1580741217434},{"_id":"public/2019/04/13/Run-eclipse-mosquitto-as-docker-container/index.html","hash":"90b94e1e48b5ccaa19b9cce8e2f5297797712d84","modified":1580741217434},{"_id":"public/2019/04/01/How-to-configure-PostgreSQL-to-accept-all-incoming-connections/index.html","hash":"0e556f095987253a10ee9a24f908f6cd25a0c52f","modified":1580741217434},{"_id":"public/2019/03/23/How-to-create-users-and-groups-in-Linux-from-the-command-line/index.html","hash":"1905c78c80866f3d34bcf0c277ced99644afa422","modified":1580741217434},{"_id":"public/2019/03/23/How-to-change-port-mapping-of-a-running-docker-container/index.html","hash":"dad642ca46e422880d5123d8a2542b3be40a52e5","modified":1580741217434},{"_id":"public/2019/03/23/How-to-Change-File-Ownership-Groups-in-Linux/index.html","hash":"0507c66f96f778dd6f9a362ab52b8cd21265843c","modified":1580741217434},{"_id":"public/2019/03/17/Linux-how-to-exclude-specific-folder-during-copy-in-terminal/index.html","hash":"8e1f317c5bc81ea6e6a9e3b14fa36c8890854783","modified":1580741217435},{"_id":"public/2019/03/17/Linux-How-to-see-the-installed-OS-version-from-terminal/index.html","hash":"df6d950dd078a96ebe242e83f5a7dcf198350d00","modified":1580741217435},{"_id":"public/2019/03/17/Run-Postgres-as-Docker-container/index.html","hash":"b72548a2f61b27e300baa9230645ee10b9256264","modified":1580741217435},{"_id":"public/tags/How-To/index.html","hash":"22efa4e1f5419d80482727aa6ac0ee56e8560937","modified":1580741217435},{"_id":"public/tags/How-To/page/2/index.html","hash":"c8c6e330471890c2bf99765108f93909c31c1857","modified":1580741217435},{"_id":"public/tags/How-To/page/3/index.html","hash":"c8c6e330471890c2bf99765108f93909c31c1857","modified":1580741217435},{"_id":"public/archives/index.html","hash":"250bd64eadf5a4450c890113396aac92523c8818","modified":1580741217435},{"_id":"public/archives/page/2/index.html","hash":"b855f8cab1276cb58e651e17009802ee334074f5","modified":1580741217435},{"_id":"public/archives/page/3/index.html","hash":"b855f8cab1276cb58e651e17009802ee334074f5","modified":1580741217435},{"_id":"public/archives/page/4/index.html","hash":"b855f8cab1276cb58e651e17009802ee334074f5","modified":1580741217435},{"_id":"public/archives/2019/index.html","hash":"60abeb731beee18c209152fc567ed8b04e4d5f0a","modified":1580741217435},{"_id":"public/archives/2019/page/2/index.html","hash":"afbb579de9c7c23946ae4c732874b8313fc4e68e","modified":1580741217435},{"_id":"public/archives/2019/page/3/index.html","hash":"afbb579de9c7c23946ae4c732874b8313fc4e68e","modified":1580741217436},{"_id":"public/archives/2019/page/4/index.html","hash":"afbb579de9c7c23946ae4c732874b8313fc4e68e","modified":1580741217436},{"_id":"public/archives/2019/02/index.html","hash":"a1f6cfa15019c3f2d5819606c73be3b70bea58be","modified":1580741217436},{"_id":"public/archives/2019/03/index.html","hash":"59609258bf86171c8ae83b51bcf90405472a3d29","modified":1580741217436},{"_id":"public/archives/2019/04/index.html","hash":"86db9f855c761a71e61fc963af78a2687ad29774","modified":1580741217436},{"_id":"public/archives/2019/05/index.html","hash":"38363b77712900d11a94c945bb442a24b99566ab","modified":1580741217436},{"_id":"public/archives/2019/06/index.html","hash":"6394d125d6d35b82278e7032c6373ad7884eca33","modified":1580741217436},{"_id":"public/archives/2019/07/index.html","hash":"da7d09a39fc632b58c7350600b0f3f51ff712a33","modified":1580741217436},{"_id":"public/archives/2019/08/index.html","hash":"80f3f689c7a1d40efb6bc248ee30c263be0eef7f","modified":1580741217436},{"_id":"public/archives/2019/09/index.html","hash":"d242479c9c2aeda473688c30f1dc6ee3acead31c","modified":1580741217436},{"_id":"public/archives/2019/10/index.html","hash":"5b3d61f911d36dba3fc935c7e64353a02fe30c9f","modified":1580741217436},{"_id":"public/archives/2019/12/index.html","hash":"804102aaac98dc5ec5de15bbd3ce7c2bf7dad099","modified":1580741217437},{"_id":"public/archives/2020/index.html","hash":"99de6da7c33e25a3ae069624eac91123ffc61229","modified":1580741217437},{"_id":"public/archives/2020/02/index.html","hash":"5fa171e148aa836bb757f6d17d6fc28b40c4c51f","modified":1580741217437},{"_id":"public/index.html","hash":"cbe05468bd92b0c9853fed073d657b2d71e5e231","modified":1580741217437},{"_id":"public/page/2/index.html","hash":"e84ae838b343a6abbddce63884c0f9216dbe42a3","modified":1580741217437},{"_id":"public/page/3/index.html","hash":"d6051b4341f0d92bde58e76213b364b88b8fd498","modified":1580741217437},{"_id":"public/page/4/index.html","hash":"9093a7668c224579ff2f35dd1039f3082bdc8057","modified":1580741217437},{"_id":"public/me/index/avatar.jpeg","hash":"b73950a7d2abc1a8266ffa17780030177ac178f9","modified":1580741217448},{"_id":"public/2019/08/25/DailyUI-Challenge-Series-001-signup-form/dailyui-challenge-001-signup-form.png","hash":"82b88fef8828549b74e3dc84e569dca2031fe2cc","modified":1580741217448},{"_id":"public/2019/09/03/How-to-add-quick-night-mode-to-your-blog/ashkeys-instant-nightmode-on.png","hash":"c81a2aa2acd730f40aa29e174429c387ea202cb2","modified":1580741217448},{"_id":"public/2019/09/03/How-to-add-quick-night-mode-to-your-blog/ashkeys-instant-nightmode.png","hash":"ae6b68f2413e5dbe28eeeaeece4d8d07708c24ea","modified":1580741217448},{"_id":"public/2019/06/10/Usecases-for-first-child-and-last-child-in-css/first-child_last-child.png","hash":"3e6b1c9f1ab59708b95f431f4d11b35d68b1dd55","modified":1580741217448},{"_id":"public/2019/06/10/Usecases-for-first-child-and-last-child-in-css/first-row_last-row.png","hash":"57a69fbc0cc62fc4b2ac618b4ddef8e158457c7c","modified":1580741217448},{"_id":"public/2019/08/26/How-to-create-a-custom-checkbox-with-just-CSS/custom-checkbox-css-only.png","hash":"51fad72999af7faa1f803e9dafb9434b14c14d6d","modified":1580741217683},{"_id":"public/css/style.css","hash":"02220ec02399aba639b7c4a9ef3046ab41d8e343","modified":1580741217691},{"_id":"public/2019/10/08/How-to-convert-SVGs-to-desired-color/css_filter_generator.png","hash":"6dc6cfc069d502c5faf5f02767b3d4fa1b56fcfc","modified":1580741217700},{"_id":"public/2019/07/02/How-to-enable-ES-modules-in-nodejs/common_js_import.svg","hash":"5768247b9a7f821846845cb5e44b5d5d6813978b","modified":1580741217749},{"_id":"public/2019/07/02/How-to-enable-ES-modules-in-nodejs/es6_import.svg","hash":"6eee008a4c860e0b97b51ea6d6a0dc206285d4bf","modified":1580741217749},{"_id":"public/2019/08/01/Few-ways-to-add-and-remove-items-in-an-array/shift_unshift_methods.svg","hash":"844c9b2729c51abe0d95ede05873ffe927693005","modified":1580741217779},{"_id":"public/2019/08/01/Few-ways-to-add-and-remove-items-in-an-array/push_pop_methods.svg","hash":"7101d1968a0fb26f75d89e704f88bb41209e189d","modified":1580741217787},{"_id":"public/2019/08/23/CSS-transform-property/css-transform-html.svg","hash":"f7aac67b4ebae70d55e408bb858e5bac24c0fe99","modified":1580741217812},{"_id":"public/2019/08/23/CSS-transform-property/css-transform-css.svg","hash":"ff74cb06dd94e3ca21502d1c72274286050e3bfd","modified":1580741217822},{"_id":"public/2019/09/27/A-week-in-Madeira-Portugal/machico_viewpoint.jpg","hash":"4024548572b766c2f24e1deb6cb9548b52a4a20d","modified":1580741217842},{"_id":"public/2019/02/20/My-new-laptop-System76-Galago-Pro/system_76_settings_configuration.jpg","hash":"e597d689bf5010bf910308e39211e83501e691ec","modified":1580741217846},{"_id":"public/2019/02/20/My-new-laptop-System76-Galago-Pro/system_76_installation.jpg","hash":"776afc74f838df0932685071c28050007d4f063a","modified":1580741217869},{"_id":"public/2019/02/20/My-new-laptop-System76-Galago-Pro/system_76_unleash_your_potential.jpg","hash":"555e2298487d5938ac16d7fe59e475303c48aaa0","modified":1580741217873},{"_id":"public/2019/02/20/My-new-laptop-System76-Galago-Pro/system_76_reusable_package.jpg","hash":"c64d0e05d1db589664ed18c4e872f9af5d910551","modified":1580741217878},{"_id":"public/2019/02/20/My-new-laptop-System76-Galago-Pro/system_76_first_look.jpg","hash":"dd64529e66317da803613b893eda9e0651ade7c7","modified":1580741217882},{"_id":"public/2019/02/20/My-new-laptop-System76-Galago-Pro/system_76_gift_card.jpg","hash":"c758842115ff0ac6a5dbd37e82abd1ca8ddf40de","modified":1580741217888}],"Category":[],"Data":[],"Page":[{"title":"This is me ^_^","date":"2020-01-10T16:11:19.000Z","icon":"fas fa-laptop-code","_content":"\n<article class=\"dt db-l mw8 mw8-m mw5-ns center bg-white mv3\">\n\t<div class=\"dn dtc-m db-l v-mid tc pr4 pr0-l\" style=\"min-width: 6rem;\">\n\t\t<img src=\"index/avatar.jpeg\" class=\"mb4-l br-100 h3 w3 h4-l w4-l dib\" title=\"Ashok M A\">\n\t</div>\n</article>\n\n## Ashok M A\n\nFull Stack Web Developer\n\n### Experience Summary\n\n-   Working as **Full Stack Web Developer** at **Oceaneering AGV Systems, Utrecht, The Netherlands**\n-   Angular/Spring Boot professional with 8 plus years of experience\n-   Have 5 plus years of experience in AngularJS/Angular/Protractor/Jasmine with Node.js ecosystem\n-   Working on Angular/Spring Boot application for fleet management.\n-   Fully worked in a Development Project – starting from Requirements, Design, Development and Production Implementation with In-depth knowledge on Defect Analysis, Debugging, Test Automation and CI/CD pipeline.\n-   Have an exposure in microservices architecture using Pivotal Cloud Foundry (PCF).\n-   Hold a **Bachelors in Computer Science.**\n\n### Stack\n\n#### Programming Language(s)\n\n> <i class=\"fab fa-js-square\"></i> JavaScript (ES6/ES8), <i class=\"fab fa-java\"></i> Java, <i class=\"fab fa-jenkins\"></i> Groovy (Jenkins)\n\n#### Front-end Technologies\n\n> <i class=\"fab fa-angular\"></i> Angular, <i class=\"fab fa-react\"></i> ReactDom, <i class=\"fab fa-dyalog\"></i> D3, <i class=\"fab fa-html5\"></i> HTML5, <i class=\"fab fa-css3-alt\"></i> CSS3 / <i class=\"fab fa-sass\"></i> SCSS\n\n#### Application Framework\n\n> SPA, Spring Boot\n\n#### Containerization\n\n> <i class=\"fab fa-docker\"></i> Docker\n\n#### API Standards\n\n> OAS 2.0, API First (Zalando guidelines)\n\n#### Testing Framework\n\n> <i class=\"fas fa-vial\"></i> Protractor, Jasmine, Junit, Mockito, MockMVC\n\n#### Programming Paradigm\n\n> Functional, Reactive\n\n#### Messaging Protocol\n\n> MQTT with eclipse-mosquitto\n\n#### Database\n\n> <i class=\"fas fa-database\"></i> Postgres, MySQL, Oracle SQL\n\n#### Misc.\n\n> <i class=\"fab fa-jenkins\"></i> Jenkins, <i class=\"fab fa-git-alt\"></i> Git, Eclipse, WebStorm, IntelliJ\n\n#### Operating System\n\n> <i class=\"fab fa-windows\"></i> Windows, <i class=\"fab fa-linux\"></i> Linux (Ubuntu distro)\n","source":"me/index.md","raw":"---\ntitle: This is me ^_^\ndate: 2020-01-10 17:11:19\nicon: fas fa-laptop-code\n---\n\n<article class=\"dt db-l mw8 mw8-m mw5-ns center bg-white mv3\">\n\t<div class=\"dn dtc-m db-l v-mid tc pr4 pr0-l\" style=\"min-width: 6rem;\">\n\t\t<img src=\"index/avatar.jpeg\" class=\"mb4-l br-100 h3 w3 h4-l w4-l dib\" title=\"Ashok M A\">\n\t</div>\n</article>\n\n## Ashok M A\n\nFull Stack Web Developer\n\n### Experience Summary\n\n-   Working as **Full Stack Web Developer** at **Oceaneering AGV Systems, Utrecht, The Netherlands**\n-   Angular/Spring Boot professional with 8 plus years of experience\n-   Have 5 plus years of experience in AngularJS/Angular/Protractor/Jasmine with Node.js ecosystem\n-   Working on Angular/Spring Boot application for fleet management.\n-   Fully worked in a Development Project – starting from Requirements, Design, Development and Production Implementation with In-depth knowledge on Defect Analysis, Debugging, Test Automation and CI/CD pipeline.\n-   Have an exposure in microservices architecture using Pivotal Cloud Foundry (PCF).\n-   Hold a **Bachelors in Computer Science.**\n\n### Stack\n\n#### Programming Language(s)\n\n> <i class=\"fab fa-js-square\"></i> JavaScript (ES6/ES8), <i class=\"fab fa-java\"></i> Java, <i class=\"fab fa-jenkins\"></i> Groovy (Jenkins)\n\n#### Front-end Technologies\n\n> <i class=\"fab fa-angular\"></i> Angular, <i class=\"fab fa-react\"></i> ReactDom, <i class=\"fab fa-dyalog\"></i> D3, <i class=\"fab fa-html5\"></i> HTML5, <i class=\"fab fa-css3-alt\"></i> CSS3 / <i class=\"fab fa-sass\"></i> SCSS\n\n#### Application Framework\n\n> SPA, Spring Boot\n\n#### Containerization\n\n> <i class=\"fab fa-docker\"></i> Docker\n\n#### API Standards\n\n> OAS 2.0, API First (Zalando guidelines)\n\n#### Testing Framework\n\n> <i class=\"fas fa-vial\"></i> Protractor, Jasmine, Junit, Mockito, MockMVC\n\n#### Programming Paradigm\n\n> Functional, Reactive\n\n#### Messaging Protocol\n\n> MQTT with eclipse-mosquitto\n\n#### Database\n\n> <i class=\"fas fa-database\"></i> Postgres, MySQL, Oracle SQL\n\n#### Misc.\n\n> <i class=\"fab fa-jenkins\"></i> Jenkins, <i class=\"fab fa-git-alt\"></i> Git, Eclipse, WebStorm, IntelliJ\n\n#### Operating System\n\n> <i class=\"fab fa-windows\"></i> Windows, <i class=\"fab fa-linux\"></i> Linux (Ubuntu distro)\n","updated":"2020-01-10T17:52:50.632Z","path":"me/index.html","comments":1,"layout":"page","_id":"ck66ki6n3000wryi0fawzhvel","content":"<article class=\"dt db-l mw8 mw8-m mw5-ns center bg-white mv3\"><br>    <div class=\"dn dtc-m db-l v-mid tc pr4 pr0-l\" style=\"min-width: 6rem;\"><br>        <img src=\"index/avatar.jpeg\" class=\"mb4-l br-100 h3 w3 h4-l w4-l dib\" title=\"Ashok M A\"><br>    </div><br></article>\n\n<h2 id=\"Ashok-M-A\"><a href=\"#Ashok-M-A\" class=\"headerlink\" title=\"Ashok M A\"></a>Ashok M A</h2><p>Full Stack Web Developer</p>\n<h3 id=\"Experience-Summary\"><a href=\"#Experience-Summary\" class=\"headerlink\" title=\"Experience Summary\"></a>Experience Summary</h3><ul>\n<li>Working as <strong>Full Stack Web Developer</strong> at <strong>Oceaneering AGV Systems, Utrecht, The Netherlands</strong></li>\n<li>Angular/Spring Boot professional with 8 plus years of experience</li>\n<li>Have 5 plus years of experience in AngularJS/Angular/Protractor/Jasmine with Node.js ecosystem</li>\n<li>Working on Angular/Spring Boot application for fleet management.</li>\n<li>Fully worked in a Development Project – starting from Requirements, Design, Development and Production Implementation with In-depth knowledge on Defect Analysis, Debugging, Test Automation and CI/CD pipeline.</li>\n<li>Have an exposure in microservices architecture using Pivotal Cloud Foundry (PCF).</li>\n<li>Hold a <strong>Bachelors in Computer Science.</strong></li>\n</ul>\n<h3 id=\"Stack\"><a href=\"#Stack\" class=\"headerlink\" title=\"Stack\"></a>Stack</h3><h4 id=\"Programming-Language-s\"><a href=\"#Programming-Language-s\" class=\"headerlink\" title=\"Programming Language(s)\"></a>Programming Language(s)</h4><blockquote>\n<p><i class=\"fab fa-js-square\"></i> JavaScript (ES6/ES8), <i class=\"fab fa-java\"></i> Java, <i class=\"fab fa-jenkins\"></i> Groovy (Jenkins)</p>\n</blockquote>\n<h4 id=\"Front-end-Technologies\"><a href=\"#Front-end-Technologies\" class=\"headerlink\" title=\"Front-end Technologies\"></a>Front-end Technologies</h4><blockquote>\n<p><i class=\"fab fa-angular\"></i> Angular, <i class=\"fab fa-react\"></i> ReactDom, <i class=\"fab fa-dyalog\"></i> D3, <i class=\"fab fa-html5\"></i> HTML5, <i class=\"fab fa-css3-alt\"></i> CSS3 / <i class=\"fab fa-sass\"></i> SCSS</p>\n</blockquote>\n<h4 id=\"Application-Framework\"><a href=\"#Application-Framework\" class=\"headerlink\" title=\"Application Framework\"></a>Application Framework</h4><blockquote>\n<p>SPA, Spring Boot</p>\n</blockquote>\n<h4 id=\"Containerization\"><a href=\"#Containerization\" class=\"headerlink\" title=\"Containerization\"></a>Containerization</h4><blockquote>\n<p><i class=\"fab fa-docker\"></i> Docker</p>\n</blockquote>\n<h4 id=\"API-Standards\"><a href=\"#API-Standards\" class=\"headerlink\" title=\"API Standards\"></a>API Standards</h4><blockquote>\n<p>OAS 2.0, API First (Zalando guidelines)</p>\n</blockquote>\n<h4 id=\"Testing-Framework\"><a href=\"#Testing-Framework\" class=\"headerlink\" title=\"Testing Framework\"></a>Testing Framework</h4><blockquote>\n<p><i class=\"fas fa-vial\"></i> Protractor, Jasmine, Junit, Mockito, MockMVC</p>\n</blockquote>\n<h4 id=\"Programming-Paradigm\"><a href=\"#Programming-Paradigm\" class=\"headerlink\" title=\"Programming Paradigm\"></a>Programming Paradigm</h4><blockquote>\n<p>Functional, Reactive</p>\n</blockquote>\n<h4 id=\"Messaging-Protocol\"><a href=\"#Messaging-Protocol\" class=\"headerlink\" title=\"Messaging Protocol\"></a>Messaging Protocol</h4><blockquote>\n<p>MQTT with eclipse-mosquitto</p>\n</blockquote>\n<h4 id=\"Database\"><a href=\"#Database\" class=\"headerlink\" title=\"Database\"></a>Database</h4><blockquote>\n<p><i class=\"fas fa-database\"></i> Postgres, MySQL, Oracle SQL</p>\n</blockquote>\n<h4 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc.\"></a>Misc.</h4><blockquote>\n<p><i class=\"fab fa-jenkins\"></i> Jenkins, <i class=\"fab fa-git-alt\"></i> Git, Eclipse, WebStorm, IntelliJ</p>\n</blockquote>\n<h4 id=\"Operating-System\"><a href=\"#Operating-System\" class=\"headerlink\" title=\"Operating System\"></a>Operating System</h4><blockquote>\n<p><i class=\"fab fa-windows\"></i> Windows, <i class=\"fab fa-linux\"></i> Linux (Ubuntu distro)</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<article class=\"dt db-l mw8 mw8-m mw5-ns center bg-white mv3\"><br>    <div class=\"dn dtc-m db-l v-mid tc pr4 pr0-l\" style=\"min-width: 6rem;\"><br>        <img src=\"index/avatar.jpeg\" class=\"mb4-l br-100 h3 w3 h4-l w4-l dib\" title=\"Ashok M A\"><br>    </div><br></article>\n\n<h2 id=\"Ashok-M-A\"><a href=\"#Ashok-M-A\" class=\"headerlink\" title=\"Ashok M A\"></a>Ashok M A</h2><p>Full Stack Web Developer</p>\n<h3 id=\"Experience-Summary\"><a href=\"#Experience-Summary\" class=\"headerlink\" title=\"Experience Summary\"></a>Experience Summary</h3><ul>\n<li>Working as <strong>Full Stack Web Developer</strong> at <strong>Oceaneering AGV Systems, Utrecht, The Netherlands</strong></li>\n<li>Angular/Spring Boot professional with 8 plus years of experience</li>\n<li>Have 5 plus years of experience in AngularJS/Angular/Protractor/Jasmine with Node.js ecosystem</li>\n<li>Working on Angular/Spring Boot application for fleet management.</li>\n<li>Fully worked in a Development Project – starting from Requirements, Design, Development and Production Implementation with In-depth knowledge on Defect Analysis, Debugging, Test Automation and CI/CD pipeline.</li>\n<li>Have an exposure in microservices architecture using Pivotal Cloud Foundry (PCF).</li>\n<li>Hold a <strong>Bachelors in Computer Science.</strong></li>\n</ul>\n<h3 id=\"Stack\"><a href=\"#Stack\" class=\"headerlink\" title=\"Stack\"></a>Stack</h3><h4 id=\"Programming-Language-s\"><a href=\"#Programming-Language-s\" class=\"headerlink\" title=\"Programming Language(s)\"></a>Programming Language(s)</h4><blockquote>\n<p><i class=\"fab fa-js-square\"></i> JavaScript (ES6/ES8), <i class=\"fab fa-java\"></i> Java, <i class=\"fab fa-jenkins\"></i> Groovy (Jenkins)</p>\n</blockquote>\n<h4 id=\"Front-end-Technologies\"><a href=\"#Front-end-Technologies\" class=\"headerlink\" title=\"Front-end Technologies\"></a>Front-end Technologies</h4><blockquote>\n<p><i class=\"fab fa-angular\"></i> Angular, <i class=\"fab fa-react\"></i> ReactDom, <i class=\"fab fa-dyalog\"></i> D3, <i class=\"fab fa-html5\"></i> HTML5, <i class=\"fab fa-css3-alt\"></i> CSS3 / <i class=\"fab fa-sass\"></i> SCSS</p>\n</blockquote>\n<h4 id=\"Application-Framework\"><a href=\"#Application-Framework\" class=\"headerlink\" title=\"Application Framework\"></a>Application Framework</h4><blockquote>\n<p>SPA, Spring Boot</p>\n</blockquote>\n<h4 id=\"Containerization\"><a href=\"#Containerization\" class=\"headerlink\" title=\"Containerization\"></a>Containerization</h4><blockquote>\n<p><i class=\"fab fa-docker\"></i> Docker</p>\n</blockquote>\n<h4 id=\"API-Standards\"><a href=\"#API-Standards\" class=\"headerlink\" title=\"API Standards\"></a>API Standards</h4><blockquote>\n<p>OAS 2.0, API First (Zalando guidelines)</p>\n</blockquote>\n<h4 id=\"Testing-Framework\"><a href=\"#Testing-Framework\" class=\"headerlink\" title=\"Testing Framework\"></a>Testing Framework</h4><blockquote>\n<p><i class=\"fas fa-vial\"></i> Protractor, Jasmine, Junit, Mockito, MockMVC</p>\n</blockquote>\n<h4 id=\"Programming-Paradigm\"><a href=\"#Programming-Paradigm\" class=\"headerlink\" title=\"Programming Paradigm\"></a>Programming Paradigm</h4><blockquote>\n<p>Functional, Reactive</p>\n</blockquote>\n<h4 id=\"Messaging-Protocol\"><a href=\"#Messaging-Protocol\" class=\"headerlink\" title=\"Messaging Protocol\"></a>Messaging Protocol</h4><blockquote>\n<p>MQTT with eclipse-mosquitto</p>\n</blockquote>\n<h4 id=\"Database\"><a href=\"#Database\" class=\"headerlink\" title=\"Database\"></a>Database</h4><blockquote>\n<p><i class=\"fas fa-database\"></i> Postgres, MySQL, Oracle SQL</p>\n</blockquote>\n<h4 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc.\"></a>Misc.</h4><blockquote>\n<p><i class=\"fab fa-jenkins\"></i> Jenkins, <i class=\"fab fa-git-alt\"></i> Git, Eclipse, WebStorm, IntelliJ</p>\n</blockquote>\n<h4 id=\"Operating-System\"><a href=\"#Operating-System\" class=\"headerlink\" title=\"Operating System\"></a>Operating System</h4><blockquote>\n<p><i class=\"fab fa-windows\"></i> Windows, <i class=\"fab fa-linux\"></i> Linux (Ubuntu distro)</p>\n</blockquote>\n"},{"title":"All tags","type":"tags","icon":"fas fa-tags","_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ntype: \"tags\"\nicon: fas fa-tags\n---\n","date":"2019-02-24T15:05:13.338Z","updated":"2019-02-24T15:05:13.338Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck66ki6n7000yryi0gntow189","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"A week in Madeira, Portugal","icon":"fas fa-journal-whills","_content":"\nIt has not been two months since my vacation to India. But, I decided to take a short vacation just for a break. I had to buy hours as I spent all my vacation days in India with family and friends. >\\_O I do not know the reason but as soon as I knew I could buy hours for vacation, I was excited and started planning my week right away. ^\\_^\n\nIt did not take much time to choose **Madeira, Portugal** as my vacation point. I had it in my _Want to Go_ list for sometime. When I checked the weather for a week it looked perfect as well, not so hot just warm and cloudy a lit bit. Madeira it is!\n\nMy plan was to come with a _writing sample_ for my Masters application to Utrecht University (UU). Away from the routine for a while to focus and sightseeing of course!\n\nI stayed in a hotel called _Dom Pedro_ in Machico. Machico is a costal city as most of the major cities of Madeira. I had a great view from my hotel looking over the Machico city.\n\n## Machico\n\n![Machico Viewpoint](./machico_viewpoint.jpg 'Machico Viewpoint')\n","source":"_drafts/A-week-in-Madeira-Portugal.md","raw":"---\ntitle: 'A week in Madeira, Portugal'\ntags: [Journal, Vacation, Portugal, Europe]\nicon: fas fa-journal-whills\n---\n\nIt has not been two months since my vacation to India. But, I decided to take a short vacation just for a break. I had to buy hours as I spent all my vacation days in India with family and friends. >\\_O I do not know the reason but as soon as I knew I could buy hours for vacation, I was excited and started planning my week right away. ^\\_^\n\nIt did not take much time to choose **Madeira, Portugal** as my vacation point. I had it in my _Want to Go_ list for sometime. When I checked the weather for a week it looked perfect as well, not so hot just warm and cloudy a lit bit. Madeira it is!\n\nMy plan was to come with a _writing sample_ for my Masters application to Utrecht University (UU). Away from the routine for a while to focus and sightseeing of course!\n\nI stayed in a hotel called _Dom Pedro_ in Machico. Machico is a costal city as most of the major cities of Madeira. I had a great view from my hotel looking over the Machico city.\n\n## Machico\n\n![Machico Viewpoint](./machico_viewpoint.jpg 'Machico Viewpoint')\n","slug":"A-week-in-Madeira-Portugal","published":0,"date":"2019-09-27T16:52:04.277Z","updated":"2019-11-18T21:22:25.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6l10000ryi0iw89ygpb","content":"<p>It has not been two months since my vacation to India. But, I decided to take a short vacation just for a break. I had to buy hours as I spent all my vacation days in India with family and friends. &gt;_O I do not know the reason but as soon as I knew I could buy hours for vacation, I was excited and started planning my week right away. ^_^</p>\n<p>It did not take much time to choose <strong>Madeira, Portugal</strong> as my vacation point. I had it in my <em>Want to Go</em> list for sometime. When I checked the weather for a week it looked perfect as well, not so hot just warm and cloudy a lit bit. Madeira it is!</p>\n<p>My plan was to come with a <em>writing sample</em> for my Masters application to Utrecht University (UU). Away from the routine for a while to focus and sightseeing of course!</p>\n<p>I stayed in a hotel called <em>Dom Pedro</em> in Machico. Machico is a costal city as most of the major cities of Madeira. I had a great view from my hotel looking over the Machico city.</p>\n<h2 id=\"Machico\"><a href=\"#Machico\" class=\"headerlink\" title=\"Machico\"></a>Machico</h2><p><img src=\"./machico_viewpoint.jpg\" alt=\"Machico Viewpoint\" title=\"Machico Viewpoint\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>It has not been two months since my vacation to India. But, I decided to take a short vacation just for a break. I had to buy hours as I spent all my vacation days in India with family and friends. &gt;_O I do not know the reason but as soon as I knew I could buy hours for vacation, I was excited and started planning my week right away. ^_^</p>\n<p>It did not take much time to choose <strong>Madeira, Portugal</strong> as my vacation point. I had it in my <em>Want to Go</em> list for sometime. When I checked the weather for a week it looked perfect as well, not so hot just warm and cloudy a lit bit. Madeira it is!</p>\n<p>My plan was to come with a <em>writing sample</em> for my Masters application to Utrecht University (UU). Away from the routine for a while to focus and sightseeing of course!</p>\n<p>I stayed in a hotel called <em>Dom Pedro</em> in Machico. Machico is a costal city as most of the major cities of Madeira. I had a great view from my hotel looking over the Machico city.</p>\n<h2 id=\"Machico\"><a href=\"#Machico\" class=\"headerlink\" title=\"Machico\"></a>Machico</h2><p><img src=\"./machico_viewpoint.jpg\" alt=\"Machico Viewpoint\" title=\"Machico Viewpoint\"></p>\n"},{"title":"Create a todo app with Electron","icon":"fab fa-atom","_content":"\nI wanted to experiment [`Electron`](//electronjs.org) for a long time since I first heard about creating standalone apps using JavaScript. As a result of that, I have started this pet project to experiment and introduce myself to Electron.\n\nIn this post, we will try to create a todo using Electron that can perform some simple task management.\n\n## Initialize the project\n\nLet's initialize the project by doing following steps.\n\n```shell\n $ mkdir electron-calc && cd electron-calc\n $ npm init\n```\n\nOnce initialized, we can start working on our fancy todo by first installing the necessary dependencies.\n\n## Install Electron\n\n```shell\n $ npm install --save-dev electron\n```\n\nNow, we can run the start script using `electron` instead of `node` executable. Update the `package.json` accordingly.\n\n```json\n{\n  \"scripts\": {\n    \"start\": \"electron .\"\n  }\n}\n```\n","source":"_drafts/Create-a-calculator-app-with-Electron.md","raw":"---\ntitle: Create a todo app with Electron\ntags: [Blog, Pet Projects, NodeJS, Electron]\nicon: fab fa-atom\n---\n\nI wanted to experiment [`Electron`](//electronjs.org) for a long time since I first heard about creating standalone apps using JavaScript. As a result of that, I have started this pet project to experiment and introduce myself to Electron.\n\nIn this post, we will try to create a todo using Electron that can perform some simple task management.\n\n## Initialize the project\n\nLet's initialize the project by doing following steps.\n\n```shell\n $ mkdir electron-calc && cd electron-calc\n $ npm init\n```\n\nOnce initialized, we can start working on our fancy todo by first installing the necessary dependencies.\n\n## Install Electron\n\n```shell\n $ npm install --save-dev electron\n```\n\nNow, we can run the start script using `electron` instead of `node` executable. Update the `package.json` accordingly.\n\n```json\n{\n  \"scripts\": {\n    \"start\": \"electron .\"\n  }\n}\n```\n","slug":"Create-a-calculator-app-with-Electron","published":0,"date":"2019-07-11T21:02:30.171Z","updated":"2019-07-30T18:11:49.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6l80001ryi0xp0lnptt","content":"<p>I wanted to experiment <a href=\"//electronjs.org\"><code>Electron</code></a> for a long time since I first heard about creating standalone apps using JavaScript. As a result of that, I have started this pet project to experiment and introduce myself to Electron.</p>\n<p>In this post, we will try to create a todo using Electron that can perform some simple task management.</p>\n<h2 id=\"Initialize-the-project\"><a href=\"#Initialize-the-project\" class=\"headerlink\" title=\"Initialize the project\"></a>Initialize the project</h2><p>Let’s initialize the project by doing following steps.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> mkdir electron-calc &amp;&amp; cd electron-calc</span><br><span class=\"line\"><span class=\"meta\">$</span> npm init</span><br></pre></td></tr></table></figure>\n<p>Once initialized, we can start working on our fancy todo by first installing the necessary dependencies.</p>\n<h2 id=\"Install-Electron\"><a href=\"#Install-Electron\" class=\"headerlink\" title=\"Install Electron\"></a>Install Electron</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> npm install --save-dev electron</span><br></pre></td></tr></table></figure>\n<p>Now, we can run the start script using <code>electron</code> instead of <code>node</code> executable. Update the <code>package.json</code> accordingly.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"electron .\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>I wanted to experiment <a href=\"//electronjs.org\"><code>Electron</code></a> for a long time since I first heard about creating standalone apps using JavaScript. As a result of that, I have started this pet project to experiment and introduce myself to Electron.</p>\n<p>In this post, we will try to create a todo using Electron that can perform some simple task management.</p>\n<h2 id=\"Initialize-the-project\"><a href=\"#Initialize-the-project\" class=\"headerlink\" title=\"Initialize the project\"></a>Initialize the project</h2><p>Let’s initialize the project by doing following steps.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> mkdir electron-calc &amp;&amp; cd electron-calc</span><br><span class=\"line\"><span class=\"meta\">$</span> npm init</span><br></pre></td></tr></table></figure>\n<p>Once initialized, we can start working on our fancy todo by first installing the necessary dependencies.</p>\n<h2 id=\"Install-Electron\"><a href=\"#Install-Electron\" class=\"headerlink\" title=\"Install Electron\"></a>Install Electron</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> npm install --save-dev electron</span><br></pre></td></tr></table></figure>\n<p>Now, we can run the start script using <code>electron</code> instead of <code>node</code> executable. Update the <code>package.json</code> accordingly.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"electron .\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"How to enable ES modules in nodejs","icon":"fab fa-node","_content":"\nIn our previous [post](install-node), we installed `nodejs` in our machine. Even with the latest `nodejs` version, it is not possible to use the `ES` modules directly. We have to use transpilers like [`Babel`](babel-site).\n\nIn this blog, we will see how to use the `ES` modules without transpilation support.\n\n# CommonJS vs ES Module usage\n\n```js\n// CommonJS Module Import Usage\nconst express = require('express');\n\n// ES6 Module Import Usage\nimport express from 'express';\n```\n\n# Change the module type in `package.json`\n\n[install-node]:[/2019/02/18/install-nodejs-and-npm-pop-os/]\n","source":"_drafts/How-to-enable-ES-modules-in-nodejs.md","raw":"---\ntitle: How to enable ES modules in nodejs\ntags: [How To, ES6, nodejs]\nicon: fab fa-node\n---\n\nIn our previous [post](install-node), we installed `nodejs` in our machine. Even with the latest `nodejs` version, it is not possible to use the `ES` modules directly. We have to use transpilers like [`Babel`](babel-site).\n\nIn this blog, we will see how to use the `ES` modules without transpilation support.\n\n# CommonJS vs ES Module usage\n\n```js\n// CommonJS Module Import Usage\nconst express = require('express');\n\n// ES6 Module Import Usage\nimport express from 'express';\n```\n\n# Change the module type in `package.json`\n\n[install-node]:[/2019/02/18/install-nodejs-and-npm-pop-os/]\n","slug":"How-to-enable-ES-modules-in-nodejs","published":0,"date":"2019-07-02T18:53:47.932Z","updated":"2019-07-03T13:29:11.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6ld0003ryi0c64iqzlf","content":"<p>In our previous <a href=\"install-node\">post</a>, we installed <code>nodejs</code> in our machine. Even with the latest <code>nodejs</code> version, it is not possible to use the <code>ES</code> modules directly. We have to use transpilers like <a href=\"babel-site\"><code>Babel</code></a>.</p>\n<p>In this blog, we will see how to use the <code>ES</code> modules without transpilation support.</p>\n<h1 id=\"CommonJS-vs-ES-Module-usage\"><a href=\"#CommonJS-vs-ES-Module-usage\" class=\"headerlink\" title=\"CommonJS vs ES Module usage\"></a>CommonJS vs ES Module usage</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CommonJS Module Import Usage</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6 Module Import Usage</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> express <span class=\"keyword\">from</span> <span class=\"string\">'express'</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Change-the-module-type-in-package-json\"><a href=\"#Change-the-module-type-in-package-json\" class=\"headerlink\" title=\"Change the module type in package.json\"></a>Change the module type in <code>package.json</code></h1>","site":{"data":{}},"excerpt":"","more":"<p>In our previous <a href=\"install-node\">post</a>, we installed <code>nodejs</code> in our machine. Even with the latest <code>nodejs</code> version, it is not possible to use the <code>ES</code> modules directly. We have to use transpilers like <a href=\"babel-site\"><code>Babel</code></a>.</p>\n<p>In this blog, we will see how to use the <code>ES</code> modules without transpilation support.</p>\n<h1 id=\"CommonJS-vs-ES-Module-usage\"><a href=\"#CommonJS-vs-ES-Module-usage\" class=\"headerlink\" title=\"CommonJS vs ES Module usage\"></a>CommonJS vs ES Module usage</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CommonJS Module Import Usage</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6 Module Import Usage</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> express <span class=\"keyword\">from</span> <span class=\"string\">'express'</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Change-the-module-type-in-package-json\"><a href=\"#Change-the-module-type-in-package-json\" class=\"headerlink\" title=\"Change the module type in package.json\"></a>Change the module type in <code>package.json</code></h1>"},{"title":"Mosquitto: was expecting double-quote to start field name","icon":"fab fa-java","_content":"\nI recently encountered the following exception in my Spring Boot Rest application when I tried to publish a MQTT message for a topic.\n","source":"_drafts/Mosquitto-was-expecting-double-quote-to-start-field-name.md","raw":"---\ntitle: 'Mosquitto: was expecting double-quote to start field name'\ntags: [Java, Mosquitto]\nicon: fab fa-java\n---\n\nI recently encountered the following exception in my Spring Boot Rest application when I tried to publish a MQTT message for a topic.\n","slug":"Mosquitto-was-expecting-double-quote-to-start-field-name","published":0,"date":"2019-12-31T12:33:44.957Z","updated":"2020-01-05T18:49:30.020Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6lh0004ryi0omob3u2h","content":"<p>I recently encountered the following exception in my Spring Boot Rest application when I tried to publish a MQTT message for a topic.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I recently encountered the following exception in my Spring Boot Rest application when I tried to publish a MQTT message for a topic.</p>\n"},{"title":"Spring Boot: How to include a @Configuration from a dependency","_content":"","source":"_drafts/Spring-Boot-How-to-include-a-Configuration-from-a-dependency.md","raw":"---\ntitle: 'Spring Boot: How to include a @Configuration from a dependency'\ntags:\n---\n","slug":"Spring-Boot-How-to-include-a-Configuration-from-a-dependency","published":0,"date":"2020-01-02T12:59:56.878Z","updated":"2020-01-02T12:59:56.882Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6lj0005ryi04ju6y2af","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"API Development with Node.js and Express","icon":"fab fa-node","date":"2019-05-18T13:39:55.000Z","_content":"\n\nIn my previous [post](/2019/04/15/How-to-run-a-web-server-using-Node-JS/), we talked about how to run a webserver by using only node modules. As mentioned before, [express](//expressjs.com/) is good when it comes to routing. Now, we can talk bit more in detail about the API development around it. Express makes the API development looks easy as it takes care of the uneasy parts and let us only worry about the APIs.\n\nFor instance, to build `get` endpoint you just have to do the following:\n\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/api/greet', function(req, res) {\n  res.send('Hello, Welcome to AshKeys!');\n});\n\napp.listen(3000, () =>\n  console.log(`API is up and running at http://localhost:3000`)\n);\n```\n\nWhen you hit the endpoint `localhost:3000/api/greet`, you see the `Hello, Welcome to AshKeys!` message being displayed.\n\n> Congratulations! You have created your first API with express.\n\n> We can use other HTTP request methods such as `post`, `put`, `delete`, `merge`, `patch` and various others. You can see a full list of potential routing methods here: [Express routing methods](//expressjs.com/en/4x/api.html#app.METHOD)\n","source":"_posts/API-Development-with-Node-js-and-Express-2019-05-18.md","raw":"---\ntitle: API Development with Node.js and Express\ntags:\n  - nodejs\n  - API\n  - express\nicon: fab fa-node\ndate: 2019-05-18 15:39:55\n---\n\n\nIn my previous [post](/2019/04/15/How-to-run-a-web-server-using-Node-JS/), we talked about how to run a webserver by using only node modules. As mentioned before, [express](//expressjs.com/) is good when it comes to routing. Now, we can talk bit more in detail about the API development around it. Express makes the API development looks easy as it takes care of the uneasy parts and let us only worry about the APIs.\n\nFor instance, to build `get` endpoint you just have to do the following:\n\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/api/greet', function(req, res) {\n  res.send('Hello, Welcome to AshKeys!');\n});\n\napp.listen(3000, () =>\n  console.log(`API is up and running at http://localhost:3000`)\n);\n```\n\nWhen you hit the endpoint `localhost:3000/api/greet`, you see the `Hello, Welcome to AshKeys!` message being displayed.\n\n> Congratulations! You have created your first API with express.\n\n> We can use other HTTP request methods such as `post`, `put`, `delete`, `merge`, `patch` and various others. You can see a full list of potential routing methods here: [Express routing methods](//expressjs.com/en/4x/api.html#app.METHOD)\n","slug":"API-Development-with-Node-js-and-Express","published":1,"updated":"2019-05-18T13:39:55.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6n2000vryi0lw356har","content":"<p>In my previous <a href=\"/2019/04/15/How-to-run-a-web-server-using-Node-JS/\">post</a>, we talked about how to run a webserver by using only node modules. As mentioned before, <a href=\"//expressjs.com/\">express</a> is good when it comes to routing. Now, we can talk bit more in detail about the API development around it. Express makes the API development looks easy as it takes care of the uneasy parts and let us only worry about the APIs.</p>\n<p>For instance, to build <code>get</code> endpoint you just have to do the following:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/api/greet'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'Hello, Welcome to AshKeys!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, () =&gt;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`API is up and running at http://localhost:3000`</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>When you hit the endpoint <code>localhost:3000/api/greet</code>, you see the <code>Hello, Welcome to AshKeys!</code> message being displayed.</p>\n<blockquote>\n<p>Congratulations! You have created your first API with express.</p>\n</blockquote>\n<blockquote>\n<p>We can use other HTTP request methods such as <code>post</code>, <code>put</code>, <code>delete</code>, <code>merge</code>, <code>patch</code> and various others. You can see a full list of potential routing methods here: <a href=\"//expressjs.com/en/4x/api.html#app.METHOD\">Express routing methods</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>In my previous <a href=\"/2019/04/15/How-to-run-a-web-server-using-Node-JS/\">post</a>, we talked about how to run a webserver by using only node modules. As mentioned before, <a href=\"//expressjs.com/\">express</a> is good when it comes to routing. Now, we can talk bit more in detail about the API development around it. Express makes the API development looks easy as it takes care of the uneasy parts and let us only worry about the APIs.</p>\n<p>For instance, to build <code>get</code> endpoint you just have to do the following:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/api/greet'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'Hello, Welcome to AshKeys!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, () =&gt;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`API is up and running at http://localhost:3000`</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>When you hit the endpoint <code>localhost:3000/api/greet</code>, you see the <code>Hello, Welcome to AshKeys!</code> message being displayed.</p>\n<blockquote>\n<p>Congratulations! You have created your first API with express.</p>\n</blockquote>\n<blockquote>\n<p>We can use other HTTP request methods such as <code>post</code>, <code>put</code>, <code>delete</code>, <code>merge</code>, <code>patch</code> and various others. You can see a full list of potential routing methods here: <a href=\"//expressjs.com/en/4x/api.html#app.METHOD\">Express routing methods</a></p>\n</blockquote>\n"},{"title":"EADDRINUSE - kill process at a specific port","date":"2019-02-24T12:29:56.000Z","icon":"fab fa-linux","_content":"\nIt happens sometimes that an address in use is not released. For example, when we restart our IDE after an update or accidentally close the IDE without shutting down the server. In these cases, we encounter the below error:\n\n```\n    Error: listen EADDRINUSE 0.0.0.0:4000\n```\n\nsaying address already in use. In linux, there is a utility to release the port by killing the process that is using it.\n\n```\n    $ fuser -k 4000/tcp\n    4000/tcp:             9032\n```\n\nIt finds the user by the `4000` port with protocol `tcp`, kills it and outputs the `pid` (process id). If you do not supply the `-k`, it simply outputs the `pid`.\n","source":"_posts/Address-in-use-kill-process-at-a-specific-port-2019-02-24.md","raw":"---\ntitle: EADDRINUSE - kill process at a specific port\ndate: 2019-02-24 13:29:56\ntags: [Blog, Linux, Pop!_OS, Terminal Usage]\nicon: fab fa-linux\n---\n\nIt happens sometimes that an address in use is not released. For example, when we restart our IDE after an update or accidentally close the IDE without shutting down the server. In these cases, we encounter the below error:\n\n```\n    Error: listen EADDRINUSE 0.0.0.0:4000\n```\n\nsaying address already in use. In linux, there is a utility to release the port by killing the process that is using it.\n\n```\n    $ fuser -k 4000/tcp\n    4000/tcp:             9032\n```\n\nIt finds the user by the `4000` port with protocol `tcp`, kills it and outputs the `pid` (process id). If you do not supply the `-k`, it simply outputs the `pid`.\n","slug":"Address-in-use-kill-process-at-a-specific-port","published":1,"updated":"2019-03-17T17:27:23.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6n5000xryi0uysiae4b","content":"<p>It happens sometimes that an address in use is not released. For example, when we restart our IDE after an update or accidentally close the IDE without shutting down the server. In these cases, we encounter the below error:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: listen EADDRINUSE 0.0.0.0:4000</span><br></pre></td></tr></table></figure>\n<p>saying address already in use. In linux, there is a utility to release the port by killing the process that is using it.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ fuser -k 4000/tcp</span><br><span class=\"line\">4000/tcp:             9032</span><br></pre></td></tr></table></figure>\n<p>It finds the user by the <code>4000</code> port with protocol <code>tcp</code>, kills it and outputs the <code>pid</code> (process id). If you do not supply the <code>-k</code>, it simply outputs the <code>pid</code>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>It happens sometimes that an address in use is not released. For example, when we restart our IDE after an update or accidentally close the IDE without shutting down the server. In these cases, we encounter the below error:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: listen EADDRINUSE 0.0.0.0:4000</span><br></pre></td></tr></table></figure>\n<p>saying address already in use. In linux, there is a utility to release the port by killing the process that is using it.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ fuser -k 4000/tcp</span><br><span class=\"line\">4000/tcp:             9032</span><br></pre></td></tr></table></figure>\n<p>It finds the user by the <code>4000</code> port with protocol <code>tcp</code>, kills it and outputs the <code>pid</code> (process id). If you do not supply the <code>-k</code>, it simply outputs the <code>pid</code>.</p>\n"},{"title":"CSS pseudo elements and how to use them","icon":"fab fa-css3-alt","date":"2019-09-02T17:13:50.000Z","_content":"\nMost of you know about `::before` and `::after` CSS peudo elements from the [create your own custom checkbox post][1] or from [the usecases for `::first-child` and `::last-child` post][2]. Let's take a look at some other interesting peudo classes.\n\n<div id=\"pseudo-elements\"><link rel=\"preconnect\" href=\"https://source.unsplash.com\"><link rel=\"preconnect\" href=\"https://pseudo-elements.netlify.com\"><link rel=\"stylesheet\" href=\"https://pseudo-elements.netlify.com/style-for-blog.css\"><link rel=\"prefetch\" href=\"https://source.unsplash.com/random\"><h2 id=\"selection\">::selection</h2>Applies styles to user selected text of an element like the paragraph below. Try selecting it.<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n```css\n::selection {\n  background-color: yellowgreen;\n  color: blue;\n}\n```\n<h2 id=\"placeholder\">::placeholder</h2><p>We see the custom placeholder styles for all input elements.</p>\n```css\n::placeholder {\n  padding: 0 5px;\n  color: blue;\n  opacity: 0.6;\n  font-family: monospace;\n}\n```\n<div><input type=\"number\" name=\"age\" id=\"age\" placeholder=\"Please enter your age...\"><input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Please enter your email...\"></div><h2 id=\"backdrop\">::backdrop</h2><p>Backdrop is used to style the elements full screen box. Here in this example it is a dialog.</p><dialog id=\"dialog\"><h2>This is the dialog</h2><form method=\"dialog\"><button type=\"submit\">Close</button></form>\n</dialog><button onclick=\"document.getElementById('dialog').showModal()\">Show Dialog</button></div>\n\n```css\n::backdrop {\n  background-image: url(https://source.unsplash.com/random);\n  opacity: 0.4;\n}\n```\n\n[1]: /2019/08/26/How-to-create-a-custom-checkbox-with-just-CSS/\n[2]: /2019/06/10/Usecases-for-first-child-and-last-child-in-css/\n","source":"_posts/CSS-pseudo-elements-and-how-to-use-them-2019-09-02.md","raw":"---\ntitle: CSS pseudo elements and how to use them\ntags:\n  - How To\n  - CSS\n  - Pseudo classes\nicon: fab fa-css3-alt\ndate: 2019-09-02 19:13:50\n---\n\nMost of you know about `::before` and `::after` CSS peudo elements from the [create your own custom checkbox post][1] or from [the usecases for `::first-child` and `::last-child` post][2]. Let's take a look at some other interesting peudo classes.\n\n<div id=\"pseudo-elements\"><link rel=\"preconnect\" href=\"https://source.unsplash.com\"><link rel=\"preconnect\" href=\"https://pseudo-elements.netlify.com\"><link rel=\"stylesheet\" href=\"https://pseudo-elements.netlify.com/style-for-blog.css\"><link rel=\"prefetch\" href=\"https://source.unsplash.com/random\"><h2 id=\"selection\">::selection</h2>Applies styles to user selected text of an element like the paragraph below. Try selecting it.<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n```css\n::selection {\n  background-color: yellowgreen;\n  color: blue;\n}\n```\n<h2 id=\"placeholder\">::placeholder</h2><p>We see the custom placeholder styles for all input elements.</p>\n```css\n::placeholder {\n  padding: 0 5px;\n  color: blue;\n  opacity: 0.6;\n  font-family: monospace;\n}\n```\n<div><input type=\"number\" name=\"age\" id=\"age\" placeholder=\"Please enter your age...\"><input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Please enter your email...\"></div><h2 id=\"backdrop\">::backdrop</h2><p>Backdrop is used to style the elements full screen box. Here in this example it is a dialog.</p><dialog id=\"dialog\"><h2>This is the dialog</h2><form method=\"dialog\"><button type=\"submit\">Close</button></form>\n</dialog><button onclick=\"document.getElementById('dialog').showModal()\">Show Dialog</button></div>\n\n```css\n::backdrop {\n  background-image: url(https://source.unsplash.com/random);\n  opacity: 0.4;\n}\n```\n\n[1]: /2019/08/26/How-to-create-a-custom-checkbox-with-just-CSS/\n[2]: /2019/06/10/Usecases-for-first-child-and-last-child-in-css/\n","slug":"CSS-pseudo-elements-and-how-to-use-them","published":1,"updated":"2019-09-03T20:08:43.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6nd0010ryi0quevvx50","content":"<p>Most of you know about <code>::before</code> and <code>::after</code> CSS peudo elements from the <a href=\"/2019/08/26/How-to-create-a-custom-checkbox-with-just-CSS/\">create your own custom checkbox post</a> or from <a href=\"/2019/06/10/Usecases-for-first-child-and-last-child-in-css/\">the usecases for <code>::first-child</code> and <code>::last-child</code> post</a>. Let’s take a look at some other interesting peudo classes.</p>\n<div id=\"pseudo-elements\"><link rel=\"preconnect\" href=\"https://source.unsplash.com\"><link rel=\"preconnect\" href=\"https://pseudo-elements.netlify.com\"><link rel=\"stylesheet\" href=\"https://pseudo-elements.netlify.com/style-for-blog.css\"><link rel=\"prefetch\" href=\"https://source.unsplash.com/random\"><h2 id=\"selection\">::selection</h2>Applies styles to user selected text of an element like the paragraph below. Try selecting it.<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">::selection</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: yellowgreen;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><br><h2 id=\"placeholder\">::placeholder</h2><p>We see the custom placeholder styles for all input elements.</p><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">::placeholder</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0.6</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: monospace;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><br><div><input type=\"number\" name=\"age\" id=\"age\" placeholder=\"Please enter your age...\"><input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Please enter your email...\"></div><h2 id=\"backdrop\">::backdrop</h2><p>Backdrop is used to style the elements full screen box. Here in this example it is a dialog.</p><dialog id=\"dialog\"><h2>This is the dialog</h2><form method=\"dialog\"><button type=\"submit\">Close</button></form><br></dialog><button onclick=\"document.getElementById('dialog').showModal()\">Show Dialog</button></div>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">::backdrop</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(https://source.unsplash.com/random);</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0.4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Most of you know about <code>::before</code> and <code>::after</code> CSS peudo elements from the <a href=\"/2019/08/26/How-to-create-a-custom-checkbox-with-just-CSS/\">create your own custom checkbox post</a> or from <a href=\"/2019/06/10/Usecases-for-first-child-and-last-child-in-css/\">the usecases for <code>::first-child</code> and <code>::last-child</code> post</a>. Let’s take a look at some other interesting peudo classes.</p>\n<div id=\"pseudo-elements\"><link rel=\"preconnect\" href=\"https://source.unsplash.com\"><link rel=\"preconnect\" href=\"https://pseudo-elements.netlify.com\"><link rel=\"stylesheet\" href=\"https://pseudo-elements.netlify.com/style-for-blog.css\"><link rel=\"prefetch\" href=\"https://source.unsplash.com/random\"><h2 id=\"selection\">::selection</h2>Applies styles to user selected text of an element like the paragraph below. Try selecting it.<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">::selection</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: yellowgreen;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><br><h2 id=\"placeholder\">::placeholder</h2><p>We see the custom placeholder styles for all input elements.</p><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">::placeholder</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0.6</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: monospace;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><br><div><input type=\"number\" name=\"age\" id=\"age\" placeholder=\"Please enter your age...\"><input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Please enter your email...\"></div><h2 id=\"backdrop\">::backdrop</h2><p>Backdrop is used to style the elements full screen box. Here in this example it is a dialog.</p><dialog id=\"dialog\"><h2>This is the dialog</h2><form method=\"dialog\"><button type=\"submit\">Close</button></form><br></dialog><button onclick=\"document.getElementById('dialog').showModal()\">Show Dialog</button></div>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">::backdrop</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(https://source.unsplash.com/random);</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0.4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"DailyUI Challenge Series: 001 signup form","icon":"fas fa-palette","date":"2019-08-25T20:56:34.000Z","_content":"\n\nI have recently enrolled myself in the DailyUI challenge series. It is nice and I recommend to anyone who is looking for something to do for the code muscle memory or anyone who is interested into designing UI.\n\nIn all my IT experiences so far, I had never came across a situation where I had to design the page or a component by myself based on the customer requirements or hints for that matter. Designing is difficult guys as it requires some creativity at the same time keeping the customer in mind. Some things can be fancy to us but that does not mean it is going to guide the user to explore the application by himself helping here and there.\n\nAnyhow, as part of this DailyUI challenge, you will get an email everyday (Not on the weekends ;)) with a requirement for the design to be done.\n\n> You will also get some free useful stuffs as well if you do the challenges and share it regularly on [Twitter][1] or [Dribbble][2] as they have mentioned.\n\nBut, I did not want to do the design alone. As a developer, I wanted to make it work as per design more or less.\n\n> You can check out the completed challenge that has been deployed [here][3] in [Netlify][4].\n> [Here][5] is the repo for the same and below is the sneekpeak.\n\n![DailyUI Challenge 001 - SignUp Form](./dailyui-challenge-001-signup-form.png 'DailyUI Challenge 001 - SignUp Form')\n\n> Yeah, we do not have sign up form for our site yet! T_T But it is coming. \\O/\n\n[1]: https://twitter.com/search?q=%23DailyUI&src=typed_query\n[2]: https://dribbble.com/tags/dailyui\n[3]: https://daily-ui-challenge-001.netlify.com/\n[4]: https://www.netlify.com/\n[5]: https://github.com/Sojiro/daily-ui-challenge/tree/master/001-signup-form\n","source":"_posts/DailyUI-Challenge-Series-001-signup-form-2019-08-25.md","raw":"---\ntitle: 'DailyUI Challenge Series: 001 signup form'\ntags:\n  - DailyUI Challenge Series\n  - Angular\n  - Reactive Forms\n  - JavaScript\n  - CSS\nicon: fas fa-palette\ndate: 2019-08-25 22:56:34\n---\n\n\nI have recently enrolled myself in the DailyUI challenge series. It is nice and I recommend to anyone who is looking for something to do for the code muscle memory or anyone who is interested into designing UI.\n\nIn all my IT experiences so far, I had never came across a situation where I had to design the page or a component by myself based on the customer requirements or hints for that matter. Designing is difficult guys as it requires some creativity at the same time keeping the customer in mind. Some things can be fancy to us but that does not mean it is going to guide the user to explore the application by himself helping here and there.\n\nAnyhow, as part of this DailyUI challenge, you will get an email everyday (Not on the weekends ;)) with a requirement for the design to be done.\n\n> You will also get some free useful stuffs as well if you do the challenges and share it regularly on [Twitter][1] or [Dribbble][2] as they have mentioned.\n\nBut, I did not want to do the design alone. As a developer, I wanted to make it work as per design more or less.\n\n> You can check out the completed challenge that has been deployed [here][3] in [Netlify][4].\n> [Here][5] is the repo for the same and below is the sneekpeak.\n\n![DailyUI Challenge 001 - SignUp Form](./dailyui-challenge-001-signup-form.png 'DailyUI Challenge 001 - SignUp Form')\n\n> Yeah, we do not have sign up form for our site yet! T_T But it is coming. \\O/\n\n[1]: https://twitter.com/search?q=%23DailyUI&src=typed_query\n[2]: https://dribbble.com/tags/dailyui\n[3]: https://daily-ui-challenge-001.netlify.com/\n[4]: https://www.netlify.com/\n[5]: https://github.com/Sojiro/daily-ui-challenge/tree/master/001-signup-form\n","slug":"DailyUI-Challenge-Series-001-signup-form","published":1,"updated":"2019-08-25T20:56:34.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6ng0011ryi08cm0n9mg","content":"<p>I have recently enrolled myself in the DailyUI challenge series. It is nice and I recommend to anyone who is looking for something to do for the code muscle memory or anyone who is interested into designing UI.</p>\n<p>In all my IT experiences so far, I had never came across a situation where I had to design the page or a component by myself based on the customer requirements or hints for that matter. Designing is difficult guys as it requires some creativity at the same time keeping the customer in mind. Some things can be fancy to us but that does not mean it is going to guide the user to explore the application by himself helping here and there.</p>\n<p>Anyhow, as part of this DailyUI challenge, you will get an email everyday (Not on the weekends ;)) with a requirement for the design to be done.</p>\n<blockquote>\n<p>You will also get some free useful stuffs as well if you do the challenges and share it regularly on <a href=\"https://twitter.com/search?q=%23DailyUI&amp;src=typed_query\" target=\"_blank\" rel=\"noopener\">Twitter</a> or <a href=\"https://dribbble.com/tags/dailyui\" target=\"_blank\" rel=\"noopener\">Dribbble</a> as they have mentioned.</p>\n</blockquote>\n<p>But, I did not want to do the design alone. As a developer, I wanted to make it work as per design more or less.</p>\n<blockquote>\n<p>You can check out the completed challenge that has been deployed <a href=\"https://daily-ui-challenge-001.netlify.com/\" target=\"_blank\" rel=\"noopener\">here</a> in <a href=\"https://www.netlify.com/\" target=\"_blank\" rel=\"noopener\">Netlify</a>.<br><a href=\"https://github.com/Sojiro/daily-ui-challenge/tree/master/001-signup-form\" target=\"_blank\" rel=\"noopener\">Here</a> is the repo for the same and below is the sneekpeak.</p>\n</blockquote>\n<p><img src=\"./dailyui-challenge-001-signup-form.png\" alt=\"DailyUI Challenge 001 - SignUp Form\" title=\"DailyUI Challenge 001 - SignUp Form\"></p>\n<blockquote>\n<p>Yeah, we do not have sign up form for our site yet! T_T But it is coming. \\O/</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>I have recently enrolled myself in the DailyUI challenge series. It is nice and I recommend to anyone who is looking for something to do for the code muscle memory or anyone who is interested into designing UI.</p>\n<p>In all my IT experiences so far, I had never came across a situation where I had to design the page or a component by myself based on the customer requirements or hints for that matter. Designing is difficult guys as it requires some creativity at the same time keeping the customer in mind. Some things can be fancy to us but that does not mean it is going to guide the user to explore the application by himself helping here and there.</p>\n<p>Anyhow, as part of this DailyUI challenge, you will get an email everyday (Not on the weekends ;)) with a requirement for the design to be done.</p>\n<blockquote>\n<p>You will also get some free useful stuffs as well if you do the challenges and share it regularly on <a href=\"https://twitter.com/search?q=%23DailyUI&amp;src=typed_query\" target=\"_blank\" rel=\"noopener\">Twitter</a> or <a href=\"https://dribbble.com/tags/dailyui\" target=\"_blank\" rel=\"noopener\">Dribbble</a> as they have mentioned.</p>\n</blockquote>\n<p>But, I did not want to do the design alone. As a developer, I wanted to make it work as per design more or less.</p>\n<blockquote>\n<p>You can check out the completed challenge that has been deployed <a href=\"https://daily-ui-challenge-001.netlify.com/\" target=\"_blank\" rel=\"noopener\">here</a> in <a href=\"https://www.netlify.com/\" target=\"_blank\" rel=\"noopener\">Netlify</a>.<br><a href=\"https://github.com/Sojiro/daily-ui-challenge/tree/master/001-signup-form\" target=\"_blank\" rel=\"noopener\">Here</a> is the repo for the same and below is the sneekpeak.</p>\n</blockquote>\n<p><img src=\"./dailyui-challenge-001-signup-form.png\" alt=\"DailyUI Challenge 001 - SignUp Form\" title=\"DailyUI Challenge 001 - SignUp Form\"></p>\n<blockquote>\n<p>Yeah, we do not have sign up form for our site yet! T_T But it is coming. \\O/</p>\n</blockquote>\n"},{"title":"Few ways to add and remove items in an array","icon":"fab fa-js-square","date":"2019-08-01T21:42:24.000Z","_content":"\n\nThere more than one way to add an item to an array and remove an item from an array in JavaScript. Let's see how can we do that in this post.\n\n## `push` and `pop` methods\n\n![push and pop methods usage](push_pop_methods.svg 'push and pop methods usage')\n\n> **Note:** `push` inserts the elements at the end whereas `pop` pops out the top one that is the last item in the array.\n\n## `shift` and `unshift` methods\n\n![shift and unshift methods usage](shift_unshift_methods.svg 'shift and unshift methods usage')\n\n> **Note:** `shift` removes the first element of an array whereas `unshift` does exact the opposite.\n\n> **Tip:** It is called `shift` because once the method is called the items of an array shifts one position left if one pictures the array horizontally. \\O/\n","source":"_posts/Few-ways-to-add-and-remove-items-in-an-array-2019-08-01.md","raw":"---\ntitle: Few ways to add and remove items in an array\ntags:\n  - Blog\n  - Array\n  - JS\nicon: fab fa-js-square\ndate: 2019-08-01 23:42:24\n---\n\n\nThere more than one way to add an item to an array and remove an item from an array in JavaScript. Let's see how can we do that in this post.\n\n## `push` and `pop` methods\n\n![push and pop methods usage](push_pop_methods.svg 'push and pop methods usage')\n\n> **Note:** `push` inserts the elements at the end whereas `pop` pops out the top one that is the last item in the array.\n\n## `shift` and `unshift` methods\n\n![shift and unshift methods usage](shift_unshift_methods.svg 'shift and unshift methods usage')\n\n> **Note:** `shift` removes the first element of an array whereas `unshift` does exact the opposite.\n\n> **Tip:** It is called `shift` because once the method is called the items of an array shifts one position left if one pictures the array horizontally. \\O/\n","slug":"Few-ways-to-add-and-remove-items-in-an-array","published":1,"updated":"2019-08-01T21:42:24.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6nk0012ryi02xdfr0ec","content":"<p>There more than one way to add an item to an array and remove an item from an array in JavaScript. Let’s see how can we do that in this post.</p>\n<h2 id=\"push-and-pop-methods\"><a href=\"#push-and-pop-methods\" class=\"headerlink\" title=\"push and pop methods\"></a><code>push</code> and <code>pop</code> methods</h2><p><img src=\"push_pop_methods.svg\" alt=\"push and pop methods usage\" title=\"push and pop methods usage\"></p>\n<blockquote>\n<p><strong>Note:</strong> <code>push</code> inserts the elements at the end whereas <code>pop</code> pops out the top one that is the last item in the array.</p>\n</blockquote>\n<h2 id=\"shift-and-unshift-methods\"><a href=\"#shift-and-unshift-methods\" class=\"headerlink\" title=\"shift and unshift methods\"></a><code>shift</code> and <code>unshift</code> methods</h2><p><img src=\"shift_unshift_methods.svg\" alt=\"shift and unshift methods usage\" title=\"shift and unshift methods usage\"></p>\n<blockquote>\n<p><strong>Note:</strong> <code>shift</code> removes the first element of an array whereas <code>unshift</code> does exact the opposite.</p>\n</blockquote>\n<blockquote>\n<p><strong>Tip:</strong> It is called <code>shift</code> because once the method is called the items of an array shifts one position left if one pictures the array horizontally. \\O/</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>There more than one way to add an item to an array and remove an item from an array in JavaScript. Let’s see how can we do that in this post.</p>\n<h2 id=\"push-and-pop-methods\"><a href=\"#push-and-pop-methods\" class=\"headerlink\" title=\"push and pop methods\"></a><code>push</code> and <code>pop</code> methods</h2><p><img src=\"push_pop_methods.svg\" alt=\"push and pop methods usage\" title=\"push and pop methods usage\"></p>\n<blockquote>\n<p><strong>Note:</strong> <code>push</code> inserts the elements at the end whereas <code>pop</code> pops out the top one that is the last item in the array.</p>\n</blockquote>\n<h2 id=\"shift-and-unshift-methods\"><a href=\"#shift-and-unshift-methods\" class=\"headerlink\" title=\"shift and unshift methods\"></a><code>shift</code> and <code>unshift</code> methods</h2><p><img src=\"shift_unshift_methods.svg\" alt=\"shift and unshift methods usage\" title=\"shift and unshift methods usage\"></p>\n<blockquote>\n<p><strong>Note:</strong> <code>shift</code> removes the first element of an array whereas <code>unshift</code> does exact the opposite.</p>\n</blockquote>\n<blockquote>\n<p><strong>Tip:</strong> It is called <code>shift</code> because once the method is called the items of an array shifts one position left if one pictures the array horizontally. \\O/</p>\n</blockquote>\n"},{"title":"How to Change File Ownership & Groups in Linux","icon":"fab fa-linux","date":"2019-03-23T22:46:25.000Z","_content":"\n\nFile ownership and groups for files are fundamental to the Linux operating system. Every file in Linux is managed by a specific user and a specific group.\n\n## Figure out who owns the File or Folder, then use either `chown` or `chgrp`\n\nDisplay ownership and group information using the following command:\n\n```\n    $ ls -l ./ashokma.com/index.html\n    drwxr-xr-x   2 root docker   4096 Mar 23 15:23 ./ashokma.com/index.html\n```\n\nThis folder is owned by the *root* user and belongs to the *docker* group.\n\n## Changing the ownership of a file using `chown`\n\nYou can change the ownership of a specific file using the `chown` command. For security purposes only, the root user or members of the sudo group may transfer ownership of a file.\n\nTo change the ownership of a file:\n\n```\n    $ chown ashokma ./ashokma.com/index.html\n    \n    $ ls -l ./ashokma.com/index.html\n    drwxr-xr-x   2 ashokma docker   4096 Mar 23 20:23 ./ashokma.com/index.html\n```\n\nThe file *index.html* is now owned by *ashokma*. \n\n> By default, `chown` follows symbolic links and changes the owner of the file pointed to by the symbolic link. \n\n> **Tip:** If you wish to change ownership of all files inside a directory, you can use the `-R` option.\n\n```\n    $ chown -R ashokma ./ashokma.com/\n```\n\n## Changing the group ownership of a file using `chgrp`\n\nAll users on the system belong to at least one group. You can find out which groups you belong to using the following command:\n\n```\n    $ groups ashokma\n    ashokma : ashokma adm sudo docker\n```\n\nYou can then change the group ownership of a specific file using the `chgrp` command:\n\n```\n    $ chgrp ashokma index.html\n\n    $ ls -l index.html\n    drwxr-xr-x   2 ashokma ashokma   4096 Mar 23 21:23 index.html\n```\nThe file *index.html* now belongs to the *ashokma* group.\n\n## Changing both the owner and the group using `chown`\n\nYou can change both the owner and group of a file using just the `chown` command.\n\n```\n    $ chown ashokma:docker index.html\n    \n    $ ls -l index.html\n    drwxr-xr-x   2 ashokma docker    4096 Mar 23 21:23 index.html\n```\n\nThe file *index.html* is now owned by *ashokma* and belongs to the *docker* group.\n","source":"_posts/How-to-Change-File-Ownership-Groups-in-Linux-2019-03-23.md","raw":"---\ntitle: How to Change File Ownership & Groups in Linux\ntags:\n  - Tutorial\n  - How To\n  - Pop!_OS\n  - Linux\n  - Terminal Usage\nicon: fab fa-linux\ndate: 2019-03-23 23:46:25\n---\n\n\nFile ownership and groups for files are fundamental to the Linux operating system. Every file in Linux is managed by a specific user and a specific group.\n\n## Figure out who owns the File or Folder, then use either `chown` or `chgrp`\n\nDisplay ownership and group information using the following command:\n\n```\n    $ ls -l ./ashokma.com/index.html\n    drwxr-xr-x   2 root docker   4096 Mar 23 15:23 ./ashokma.com/index.html\n```\n\nThis folder is owned by the *root* user and belongs to the *docker* group.\n\n## Changing the ownership of a file using `chown`\n\nYou can change the ownership of a specific file using the `chown` command. For security purposes only, the root user or members of the sudo group may transfer ownership of a file.\n\nTo change the ownership of a file:\n\n```\n    $ chown ashokma ./ashokma.com/index.html\n    \n    $ ls -l ./ashokma.com/index.html\n    drwxr-xr-x   2 ashokma docker   4096 Mar 23 20:23 ./ashokma.com/index.html\n```\n\nThe file *index.html* is now owned by *ashokma*. \n\n> By default, `chown` follows symbolic links and changes the owner of the file pointed to by the symbolic link. \n\n> **Tip:** If you wish to change ownership of all files inside a directory, you can use the `-R` option.\n\n```\n    $ chown -R ashokma ./ashokma.com/\n```\n\n## Changing the group ownership of a file using `chgrp`\n\nAll users on the system belong to at least one group. You can find out which groups you belong to using the following command:\n\n```\n    $ groups ashokma\n    ashokma : ashokma adm sudo docker\n```\n\nYou can then change the group ownership of a specific file using the `chgrp` command:\n\n```\n    $ chgrp ashokma index.html\n\n    $ ls -l index.html\n    drwxr-xr-x   2 ashokma ashokma   4096 Mar 23 21:23 index.html\n```\nThe file *index.html* now belongs to the *ashokma* group.\n\n## Changing both the owner and the group using `chown`\n\nYou can change both the owner and group of a file using just the `chown` command.\n\n```\n    $ chown ashokma:docker index.html\n    \n    $ ls -l index.html\n    drwxr-xr-x   2 ashokma docker    4096 Mar 23 21:23 index.html\n```\n\nThe file *index.html* is now owned by *ashokma* and belongs to the *docker* group.\n","slug":"How-to-Change-File-Ownership-Groups-in-Linux","published":1,"updated":"2019-03-23T22:46:25.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6np0014ryi0nx95euy1","content":"<p>File ownership and groups for files are fundamental to the Linux operating system. Every file in Linux is managed by a specific user and a specific group.</p>\n<h2 id=\"Figure-out-who-owns-the-File-or-Folder-then-use-either-chown-or-chgrp\"><a href=\"#Figure-out-who-owns-the-File-or-Folder-then-use-either-chown-or-chgrp\" class=\"headerlink\" title=\"Figure out who owns the File or Folder, then use either chown or chgrp\"></a>Figure out who owns the File or Folder, then use either <code>chown</code> or <code>chgrp</code></h2><p>Display ownership and group information using the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -l ./ashokma.com/index.html</span><br><span class=\"line\">drwxr-xr-x   2 root docker   4096 Mar 23 15:23 ./ashokma.com/index.html</span><br></pre></td></tr></table></figure>\n<p>This folder is owned by the <em>root</em> user and belongs to the <em>docker</em> group.</p>\n<h2 id=\"Changing-the-ownership-of-a-file-using-chown\"><a href=\"#Changing-the-ownership-of-a-file-using-chown\" class=\"headerlink\" title=\"Changing the ownership of a file using chown\"></a>Changing the ownership of a file using <code>chown</code></h2><p>You can change the ownership of a specific file using the <code>chown</code> command. For security purposes only, the root user or members of the sudo group may transfer ownership of a file.</p>\n<p>To change the ownership of a file:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chown ashokma ./ashokma.com/index.html</span><br><span class=\"line\"></span><br><span class=\"line\">$ ls -l ./ashokma.com/index.html</span><br><span class=\"line\">drwxr-xr-x   2 ashokma docker   4096 Mar 23 20:23 ./ashokma.com/index.html</span><br></pre></td></tr></table></figure>\n<p>The file <em>index.html</em> is now owned by <em>ashokma</em>. </p>\n<blockquote>\n<p>By default, <code>chown</code> follows symbolic links and changes the owner of the file pointed to by the symbolic link. </p>\n</blockquote>\n<blockquote>\n<p><strong>Tip:</strong> If you wish to change ownership of all files inside a directory, you can use the <code>-R</code> option.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chown -R ashokma ./ashokma.com/</span><br></pre></td></tr></table></figure>\n<h2 id=\"Changing-the-group-ownership-of-a-file-using-chgrp\"><a href=\"#Changing-the-group-ownership-of-a-file-using-chgrp\" class=\"headerlink\" title=\"Changing the group ownership of a file using chgrp\"></a>Changing the group ownership of a file using <code>chgrp</code></h2><p>All users on the system belong to at least one group. You can find out which groups you belong to using the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ groups ashokma</span><br><span class=\"line\">ashokma : ashokma adm sudo docker</span><br></pre></td></tr></table></figure>\n<p>You can then change the group ownership of a specific file using the <code>chgrp</code> command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chgrp ashokma index.html</span><br><span class=\"line\"></span><br><span class=\"line\">$ ls -l index.html</span><br><span class=\"line\">drwxr-xr-x   2 ashokma ashokma   4096 Mar 23 21:23 index.html</span><br></pre></td></tr></table></figure>\n<p>The file <em>index.html</em> now belongs to the <em>ashokma</em> group.</p>\n<h2 id=\"Changing-both-the-owner-and-the-group-using-chown\"><a href=\"#Changing-both-the-owner-and-the-group-using-chown\" class=\"headerlink\" title=\"Changing both the owner and the group using chown\"></a>Changing both the owner and the group using <code>chown</code></h2><p>You can change both the owner and group of a file using just the <code>chown</code> command.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chown ashokma:docker index.html</span><br><span class=\"line\"></span><br><span class=\"line\">$ ls -l index.html</span><br><span class=\"line\">drwxr-xr-x   2 ashokma docker    4096 Mar 23 21:23 index.html</span><br></pre></td></tr></table></figure>\n<p>The file <em>index.html</em> is now owned by <em>ashokma</em> and belongs to the <em>docker</em> group.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>File ownership and groups for files are fundamental to the Linux operating system. Every file in Linux is managed by a specific user and a specific group.</p>\n<h2 id=\"Figure-out-who-owns-the-File-or-Folder-then-use-either-chown-or-chgrp\"><a href=\"#Figure-out-who-owns-the-File-or-Folder-then-use-either-chown-or-chgrp\" class=\"headerlink\" title=\"Figure out who owns the File or Folder, then use either chown or chgrp\"></a>Figure out who owns the File or Folder, then use either <code>chown</code> or <code>chgrp</code></h2><p>Display ownership and group information using the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -l ./ashokma.com/index.html</span><br><span class=\"line\">drwxr-xr-x   2 root docker   4096 Mar 23 15:23 ./ashokma.com/index.html</span><br></pre></td></tr></table></figure>\n<p>This folder is owned by the <em>root</em> user and belongs to the <em>docker</em> group.</p>\n<h2 id=\"Changing-the-ownership-of-a-file-using-chown\"><a href=\"#Changing-the-ownership-of-a-file-using-chown\" class=\"headerlink\" title=\"Changing the ownership of a file using chown\"></a>Changing the ownership of a file using <code>chown</code></h2><p>You can change the ownership of a specific file using the <code>chown</code> command. For security purposes only, the root user or members of the sudo group may transfer ownership of a file.</p>\n<p>To change the ownership of a file:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chown ashokma ./ashokma.com/index.html</span><br><span class=\"line\"></span><br><span class=\"line\">$ ls -l ./ashokma.com/index.html</span><br><span class=\"line\">drwxr-xr-x   2 ashokma docker   4096 Mar 23 20:23 ./ashokma.com/index.html</span><br></pre></td></tr></table></figure>\n<p>The file <em>index.html</em> is now owned by <em>ashokma</em>. </p>\n<blockquote>\n<p>By default, <code>chown</code> follows symbolic links and changes the owner of the file pointed to by the symbolic link. </p>\n</blockquote>\n<blockquote>\n<p><strong>Tip:</strong> If you wish to change ownership of all files inside a directory, you can use the <code>-R</code> option.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chown -R ashokma ./ashokma.com/</span><br></pre></td></tr></table></figure>\n<h2 id=\"Changing-the-group-ownership-of-a-file-using-chgrp\"><a href=\"#Changing-the-group-ownership-of-a-file-using-chgrp\" class=\"headerlink\" title=\"Changing the group ownership of a file using chgrp\"></a>Changing the group ownership of a file using <code>chgrp</code></h2><p>All users on the system belong to at least one group. You can find out which groups you belong to using the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ groups ashokma</span><br><span class=\"line\">ashokma : ashokma adm sudo docker</span><br></pre></td></tr></table></figure>\n<p>You can then change the group ownership of a specific file using the <code>chgrp</code> command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chgrp ashokma index.html</span><br><span class=\"line\"></span><br><span class=\"line\">$ ls -l index.html</span><br><span class=\"line\">drwxr-xr-x   2 ashokma ashokma   4096 Mar 23 21:23 index.html</span><br></pre></td></tr></table></figure>\n<p>The file <em>index.html</em> now belongs to the <em>ashokma</em> group.</p>\n<h2 id=\"Changing-both-the-owner-and-the-group-using-chown\"><a href=\"#Changing-both-the-owner-and-the-group-using-chown\" class=\"headerlink\" title=\"Changing both the owner and the group using chown\"></a>Changing both the owner and the group using <code>chown</code></h2><p>You can change both the owner and group of a file using just the <code>chown</code> command.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chown ashokma:docker index.html</span><br><span class=\"line\"></span><br><span class=\"line\">$ ls -l index.html</span><br><span class=\"line\">drwxr-xr-x   2 ashokma docker    4096 Mar 23 21:23 index.html</span><br></pre></td></tr></table></figure>\n<p>The file <em>index.html</em> is now owned by <em>ashokma</em> and belongs to the <em>docker</em> group.</p>\n"},{"title":"How to Turn Off Autocomplete for Input","icon":"fab fa-html5","date":"2019-07-10T21:21:36.000Z","_content":"\n# Solutions\n\n- [Field Level turn off](#Field-Level-in-general)\n- [Form Level turn off](#Form-Level)\n- [Special case for all browsers](#Special-case-for-all-browsers)\n\nI have recently encountered a situation where I had to turn off the `autocomplete` option for filling out the saved passwords by browser.\n\nIt was interesting to find out that there is a way to turn this option off. One can consider this for a security reason but to me it was about turning it off on the new password page. Browser was filling out the new password field with the saved password >\\_O\n\nThere are two ways to turn it off in `field` level!\n\n## Field Level in general\n\n```html\n<input name=\"ashkeys\" type=\"text\" autocomplete=\"off\" />\n```\n\nEven though few browsers support `autocomplete`, there are cases they ignore all together. Login or Sign-up forms for example. In those cases, the following helps.\n\n## Field Level for new passwords\n\n```html\n<input name=\"ashkeys\" type=\"password\" autocomplete=\"new-password\" />\n```\n\n## Form Level\n\n```html\n<form autocomplete=\"off\">\n  <input name=\"ashkeys\" type=\"password\" />\n</form>\n```\n\n## Special case for all browsers\n\nThe below one is kind of hacky way to trick the browser than turn off the `autocomplete` option. /O\\ One should consider this as a last resort to solve the problem.\n\n```html\n<form>\n  <input type=\"password\" hidden />\n  <input name=\"ashkeys\" type=\"password\" />\n</form>\n```\n\nYeah, you are right! We are cheating the browser here by declaring the first password field `hidden` so that browser will the saved password there.\n","source":"_posts/How-to-Turn-Off-Autocomplete-for-Input-2019-07-10.md","raw":"---\ntitle: How to Turn Off Autocomplete for Input\ntags:\n  - How To\n  - HTML\n  - Web Browser\nicon: fab fa-html5\ndate: 2019-07-10 23:21:36\n---\n\n# Solutions\n\n- [Field Level turn off](#Field-Level-in-general)\n- [Form Level turn off](#Form-Level)\n- [Special case for all browsers](#Special-case-for-all-browsers)\n\nI have recently encountered a situation where I had to turn off the `autocomplete` option for filling out the saved passwords by browser.\n\nIt was interesting to find out that there is a way to turn this option off. One can consider this for a security reason but to me it was about turning it off on the new password page. Browser was filling out the new password field with the saved password >\\_O\n\nThere are two ways to turn it off in `field` level!\n\n## Field Level in general\n\n```html\n<input name=\"ashkeys\" type=\"text\" autocomplete=\"off\" />\n```\n\nEven though few browsers support `autocomplete`, there are cases they ignore all together. Login or Sign-up forms for example. In those cases, the following helps.\n\n## Field Level for new passwords\n\n```html\n<input name=\"ashkeys\" type=\"password\" autocomplete=\"new-password\" />\n```\n\n## Form Level\n\n```html\n<form autocomplete=\"off\">\n  <input name=\"ashkeys\" type=\"password\" />\n</form>\n```\n\n## Special case for all browsers\n\nThe below one is kind of hacky way to trick the browser than turn off the `autocomplete` option. /O\\ One should consider this as a last resort to solve the problem.\n\n```html\n<form>\n  <input type=\"password\" hidden />\n  <input name=\"ashkeys\" type=\"password\" />\n</form>\n```\n\nYeah, you are right! We are cheating the browser here by declaring the first password field `hidden` so that browser will the saved password there.\n","slug":"How-to-Turn-Off-Autocomplete-for-Input","published":1,"updated":"2019-08-11T12:36:20.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6nr0015ryi096pl0vsa","content":"<h1 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h1><ul>\n<li><a href=\"#Field-Level-in-general\">Field Level turn off</a></li>\n<li><a href=\"#Form-Level\">Form Level turn off</a></li>\n<li><a href=\"#Special-case-for-all-browsers\">Special case for all browsers</a></li>\n</ul>\n<p>I have recently encountered a situation where I had to turn off the <code>autocomplete</code> option for filling out the saved passwords by browser.</p>\n<p>It was interesting to find out that there is a way to turn this option off. One can consider this for a security reason but to me it was about turning it off on the new password page. Browser was filling out the new password field with the saved password &gt;_O</p>\n<p>There are two ways to turn it off in <code>field</code> level!</p>\n<h2 id=\"Field-Level-in-general\"><a href=\"#Field-Level-in-general\" class=\"headerlink\" title=\"Field Level in general\"></a>Field Level in general</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ashkeys\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"off\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Even though few browsers support <code>autocomplete</code>, there are cases they ignore all together. Login or Sign-up forms for example. In those cases, the following helps.</p>\n<h2 id=\"Field-Level-for-new-passwords\"><a href=\"#Field-Level-for-new-passwords\" class=\"headerlink\" title=\"Field Level for new passwords\"></a>Field Level for new passwords</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ashkeys\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"new-password\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Form-Level\"><a href=\"#Form-Level\" class=\"headerlink\" title=\"Form Level\"></a>Form Level</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"off\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ashkeys\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Special-case-for-all-browsers\"><a href=\"#Special-case-for-all-browsers\" class=\"headerlink\" title=\"Special case for all browsers\"></a>Special case for all browsers</h2><p>The below one is kind of hacky way to trick the browser than turn off the <code>autocomplete</code> option. /O\\ One should consider this as a last resort to solve the problem.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">hidden</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ashkeys\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Yeah, you are right! We are cheating the browser here by declaring the first password field <code>hidden</code> so that browser will the saved password there.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h1><ul>\n<li><a href=\"#Field-Level-in-general\">Field Level turn off</a></li>\n<li><a href=\"#Form-Level\">Form Level turn off</a></li>\n<li><a href=\"#Special-case-for-all-browsers\">Special case for all browsers</a></li>\n</ul>\n<p>I have recently encountered a situation where I had to turn off the <code>autocomplete</code> option for filling out the saved passwords by browser.</p>\n<p>It was interesting to find out that there is a way to turn this option off. One can consider this for a security reason but to me it was about turning it off on the new password page. Browser was filling out the new password field with the saved password &gt;_O</p>\n<p>There are two ways to turn it off in <code>field</code> level!</p>\n<h2 id=\"Field-Level-in-general\"><a href=\"#Field-Level-in-general\" class=\"headerlink\" title=\"Field Level in general\"></a>Field Level in general</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ashkeys\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"off\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Even though few browsers support <code>autocomplete</code>, there are cases they ignore all together. Login or Sign-up forms for example. In those cases, the following helps.</p>\n<h2 id=\"Field-Level-for-new-passwords\"><a href=\"#Field-Level-for-new-passwords\" class=\"headerlink\" title=\"Field Level for new passwords\"></a>Field Level for new passwords</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ashkeys\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"new-password\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Form-Level\"><a href=\"#Form-Level\" class=\"headerlink\" title=\"Form Level\"></a>Form Level</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"off\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ashkeys\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Special-case-for-all-browsers\"><a href=\"#Special-case-for-all-browsers\" class=\"headerlink\" title=\"Special case for all browsers\"></a>Special case for all browsers</h2><p>The below one is kind of hacky way to trick the browser than turn off the <code>autocomplete</code> option. /O\\ One should consider this as a last resort to solve the problem.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">hidden</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ashkeys\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Yeah, you are right! We are cheating the browser here by declaring the first password field <code>hidden</code> so that browser will the saved password there.</p>\n"},{"title":"CSS: transform property","icon":"fab fa-css3-alt","date":"2019-08-22T22:17:47.000Z","_content":"\n\nI am busy with my work lately. So, I could not able to post regularly >\\_<. Anyways, here goes!\n\nCSS transform property is amazing and it helps creating our own kind-of animations. I have recently came across a code snippet and wanted to share it with you guys.\n\nThe html goes like this.\n\n![CSS Transform HTML Code](./css-transform-html.svg)\n\nand the css goes like this.\n\n![CSS Transfrom CSS Code](./css-transform-css.svg)\n\nI have tried the piece of code and it works great! ^\\_^\n\n**Live Demo** [CSS Transform 3D in action](https://css-transform-3d.netlify.com/)\n\n> **Note:** I am exploring the css by myself. It is amazing that we can do a lot of dynamic stuffs with it. As mentioned, code snippets are from online or people I follow in social networks. \\O/\n","source":"_posts/CSS-transform-property-2019-08-23.md","raw":"---\ntitle: 'CSS: transform property'\ntags:\n  - New to me\n  - CSS\n  - HTML\nicon: fab fa-css3-alt\ndate: 2019-08-23 00:17:47\n---\n\n\nI am busy with my work lately. So, I could not able to post regularly >\\_<. Anyways, here goes!\n\nCSS transform property is amazing and it helps creating our own kind-of animations. I have recently came across a code snippet and wanted to share it with you guys.\n\nThe html goes like this.\n\n![CSS Transform HTML Code](./css-transform-html.svg)\n\nand the css goes like this.\n\n![CSS Transfrom CSS Code](./css-transform-css.svg)\n\nI have tried the piece of code and it works great! ^\\_^\n\n**Live Demo** [CSS Transform 3D in action](https://css-transform-3d.netlify.com/)\n\n> **Note:** I am exploring the css by myself. It is amazing that we can do a lot of dynamic stuffs with it. As mentioned, code snippets are from online or people I follow in social networks. \\O/\n","slug":"CSS-transform-property","published":1,"updated":"2019-08-22T22:17:47.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6nt0017ryi0es5nnwde","content":"<p>I am busy with my work lately. So, I could not able to post regularly &gt;_&lt;. Anyways, here goes!</p>\n<p>CSS transform property is amazing and it helps creating our own kind-of animations. I have recently came across a code snippet and wanted to share it with you guys.</p>\n<p>The html goes like this.</p>\n<p><img src=\"./css-transform-html.svg\" alt=\"CSS Transform HTML Code\"></p>\n<p>and the css goes like this.</p>\n<p><img src=\"./css-transform-css.svg\" alt=\"CSS Transfrom CSS Code\"></p>\n<p>I have tried the piece of code and it works great! ^_^</p>\n<p><strong>Live Demo</strong> <a href=\"https://css-transform-3d.netlify.com/\" target=\"_blank\" rel=\"noopener\">CSS Transform 3D in action</a></p>\n<blockquote>\n<p><strong>Note:</strong> I am exploring the css by myself. It is amazing that we can do a lot of dynamic stuffs with it. As mentioned, code snippets are from online or people I follow in social networks. \\O/</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>I am busy with my work lately. So, I could not able to post regularly &gt;_&lt;. Anyways, here goes!</p>\n<p>CSS transform property is amazing and it helps creating our own kind-of animations. I have recently came across a code snippet and wanted to share it with you guys.</p>\n<p>The html goes like this.</p>\n<p><img src=\"./css-transform-html.svg\" alt=\"CSS Transform HTML Code\"></p>\n<p>and the css goes like this.</p>\n<p><img src=\"./css-transform-css.svg\" alt=\"CSS Transfrom CSS Code\"></p>\n<p>I have tried the piece of code and it works great! ^_^</p>\n<p><strong>Live Demo</strong> <a href=\"https://css-transform-3d.netlify.com/\" target=\"_blank\" rel=\"noopener\">CSS Transform 3D in action</a></p>\n<blockquote>\n<p><strong>Note:</strong> I am exploring the css by myself. It is amazing that we can do a lot of dynamic stuffs with it. As mentioned, code snippets are from online or people I follow in social networks. \\O/</p>\n</blockquote>\n"},{"title":"How to add quick night mode to your blog","icon":"fab fa-css3-alt","date":"2019-09-03T20:55:13.000Z","_content":"\n\nAs you might have already noticed, I have added an instant night mode option to [ashokma.com](//ashokma.com). It is nothing fancy of sort but it does the job right by making our eyes ease to read at night +\\_+\n\nIn case you did not notice, here is the quick guide:\n\n### Day Mode:\n\n![Ashkeys Instant Night Mode](./ashkeys-instant-nightmode.png 'Ashkeys Instant Night Mode')\n\n### Night Mode:\n\n![Ashkeys Instant Night Mode On](./ashkeys-instant-nightmode-on.png 'Ashkeys Instant Night Mode On')\n\nNow, lets see how can we do this in a very simple css styles. I have used the [`filter`][filter] property and `invert` function to invert the colors totally. Since our site is fully of bright colors already, it totally makes sense and easy to do as we agreed it is an instant one. ^\\_^\n\n## CSS Part:\n\n```scss\nbody {\n  // Yes, we need to apply it to the body so that it is for all the pages/sections.\n  transition: all 0.8s;\n  &.night-mode {\n    background: #000;\n    filter: invert(1) hue-rotate(210deg);\n    img {\n      filter: invert(1);\n    }\n  }\n}\n```\n\nWe need the night mode but also where people can read the lines without streching their eyes wide. So, I ended up with the above styles. It was challenging to find the perfect one for images though. O_o\n\n> **Tip:** Always use some preprocessors like [`SASS`](https://sass-lang.com/) I used here. It saves a lot of time by reducing the duplication and increasing the readability. More over, we can groupd the styles properly.\n\n## HTML Part\n\nJust a small checkbox (obviously a [custom made][1] one with cute little night mode icons sun/moon) ^\\_^\n\n```html\n<input\n  type=\"checkbox\"\n  onchange=\"toggle(this.checked);\"\n  id=\"nightModeIndicator\"\n/>\n```\n\n## JS Part\n\nIt is easy to add the class to the body as you already know. But, we need to remember the user selection somewhere so that we can keep track of it between the pages and tabs. For that, [`localStorage`][2] would be the right man for the job.\n\n```js\nfunction toggle(nightMode) {\n  /* Yea, this is ugly due to the fact that when we retrieve from localStorage,\n   it gives us all as strings. >_O */\n  nightMode === 'true' || nightMode === true\n    ? document.body.classList.add('night-mode')\n    : document.body.classList.remove('night-mode');\n\n  // Do remember to choose a meaningful name under the respective namespace.\n  window.localStorage.setItem('ashokma.com.nightmode', nightMode);\n}\n\ntoggle(window.localStorage.getItem('ashokma.com.nightmode'));\n\n// Make sure the below will be called after the night-mode checkbox creation.\ndocument.getElementById('nightModeIndicator').checked =\n  window.localStorage.getItem('ashokma.com.nightmode') === 'true';\n```\n\n> **Tip:** [`sessionStorage`][3] is also an option if you want to persist the selection per session that is per browser window. As soon as the user closes the tab, the [`sessionStorage`][3] will be cleared.\n\n[1]: /2019/08/26/How-to-create-a-custom-checkbox-with-just-CSS/\n[2]: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n[3]: https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\n[filter]: https://developer.mozilla.org/en-US/docs/Web/CSS/filter\n","source":"_posts/How-to-add-quick-night-mode-to-your-blog-2019-09-03.md","raw":"---\ntitle: How to add quick night mode to your blog\ntags:\n  - How To\n  - Blog\n  - CSS3\n  - HTML\n  - JavaScript\nicon: fab fa-css3-alt\ndate: 2019-09-03 22:55:13\n---\n\n\nAs you might have already noticed, I have added an instant night mode option to [ashokma.com](//ashokma.com). It is nothing fancy of sort but it does the job right by making our eyes ease to read at night +\\_+\n\nIn case you did not notice, here is the quick guide:\n\n### Day Mode:\n\n![Ashkeys Instant Night Mode](./ashkeys-instant-nightmode.png 'Ashkeys Instant Night Mode')\n\n### Night Mode:\n\n![Ashkeys Instant Night Mode On](./ashkeys-instant-nightmode-on.png 'Ashkeys Instant Night Mode On')\n\nNow, lets see how can we do this in a very simple css styles. I have used the [`filter`][filter] property and `invert` function to invert the colors totally. Since our site is fully of bright colors already, it totally makes sense and easy to do as we agreed it is an instant one. ^\\_^\n\n## CSS Part:\n\n```scss\nbody {\n  // Yes, we need to apply it to the body so that it is for all the pages/sections.\n  transition: all 0.8s;\n  &.night-mode {\n    background: #000;\n    filter: invert(1) hue-rotate(210deg);\n    img {\n      filter: invert(1);\n    }\n  }\n}\n```\n\nWe need the night mode but also where people can read the lines without streching their eyes wide. So, I ended up with the above styles. It was challenging to find the perfect one for images though. O_o\n\n> **Tip:** Always use some preprocessors like [`SASS`](https://sass-lang.com/) I used here. It saves a lot of time by reducing the duplication and increasing the readability. More over, we can groupd the styles properly.\n\n## HTML Part\n\nJust a small checkbox (obviously a [custom made][1] one with cute little night mode icons sun/moon) ^\\_^\n\n```html\n<input\n  type=\"checkbox\"\n  onchange=\"toggle(this.checked);\"\n  id=\"nightModeIndicator\"\n/>\n```\n\n## JS Part\n\nIt is easy to add the class to the body as you already know. But, we need to remember the user selection somewhere so that we can keep track of it between the pages and tabs. For that, [`localStorage`][2] would be the right man for the job.\n\n```js\nfunction toggle(nightMode) {\n  /* Yea, this is ugly due to the fact that when we retrieve from localStorage,\n   it gives us all as strings. >_O */\n  nightMode === 'true' || nightMode === true\n    ? document.body.classList.add('night-mode')\n    : document.body.classList.remove('night-mode');\n\n  // Do remember to choose a meaningful name under the respective namespace.\n  window.localStorage.setItem('ashokma.com.nightmode', nightMode);\n}\n\ntoggle(window.localStorage.getItem('ashokma.com.nightmode'));\n\n// Make sure the below will be called after the night-mode checkbox creation.\ndocument.getElementById('nightModeIndicator').checked =\n  window.localStorage.getItem('ashokma.com.nightmode') === 'true';\n```\n\n> **Tip:** [`sessionStorage`][3] is also an option if you want to persist the selection per session that is per browser window. As soon as the user closes the tab, the [`sessionStorage`][3] will be cleared.\n\n[1]: /2019/08/26/How-to-create-a-custom-checkbox-with-just-CSS/\n[2]: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n[3]: https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\n[filter]: https://developer.mozilla.org/en-US/docs/Web/CSS/filter\n","slug":"How-to-add-quick-night-mode-to-your-blog","published":1,"updated":"2019-09-03T20:55:13.968Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6nv0019ryi0rw0psr68","content":"<p>As you might have already noticed, I have added an instant night mode option to <a href=\"//ashokma.com\">ashokma.com</a>. It is nothing fancy of sort but it does the job right by making our eyes ease to read at night +_+</p>\n<p>In case you did not notice, here is the quick guide:</p>\n<h3 id=\"Day-Mode\"><a href=\"#Day-Mode\" class=\"headerlink\" title=\"Day Mode:\"></a>Day Mode:</h3><p><img src=\"./ashkeys-instant-nightmode.png\" alt=\"Ashkeys Instant Night Mode\" title=\"Ashkeys Instant Night Mode\"></p>\n<h3 id=\"Night-Mode\"><a href=\"#Night-Mode\" class=\"headerlink\" title=\"Night Mode:\"></a>Night Mode:</h3><p><img src=\"./ashkeys-instant-nightmode-on.png\" alt=\"Ashkeys Instant Night Mode On\" title=\"Ashkeys Instant Night Mode On\"></p>\n<p>Now, lets see how can we do this in a very simple css styles. I have used the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter\" target=\"_blank\" rel=\"noopener\"><code>filter</code></a> property and <code>invert</code> function to invert the colors totally. Since our site is fully of bright colors already, it totally makes sense and easy to do as we agreed it is an instant one. ^_^</p>\n<h2 id=\"CSS-Part\"><a href=\"#CSS-Part\" class=\"headerlink\" title=\"CSS Part:\"></a>CSS Part:</h2><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Yes, we need to apply it to the body so that it is for all the pages/sections.</span></span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">0.8s</span>;</span><br><span class=\"line\">  &amp;<span class=\"selector-class\">.night-mode</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">filter</span>: invert(<span class=\"number\">1</span>) hue-rotate(<span class=\"number\">210deg</span>);</span><br><span class=\"line\">    <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">filter</span>: invert(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We need the night mode but also where people can read the lines without streching their eyes wide. So, I ended up with the above styles. It was challenging to find the perfect one for images though. O_o</p>\n<blockquote>\n<p><strong>Tip:</strong> Always use some preprocessors like <a href=\"https://sass-lang.com/\" target=\"_blank\" rel=\"noopener\"><code>SASS</code></a> I used here. It saves a lot of time by reducing the duplication and increasing the readability. More over, we can groupd the styles properly.</p>\n</blockquote>\n<h2 id=\"HTML-Part\"><a href=\"#HTML-Part\" class=\"headerlink\" title=\"HTML Part\"></a>HTML Part</h2><p>Just a small checkbox (obviously a <a href=\"/2019/08/26/How-to-create-a-custom-checkbox-with-just-CSS/\">custom made</a> one with cute little night mode icons sun/moon) ^_^</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">onchange</span>=<span class=\"string\">\"toggle(this.checked);\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">id</span>=<span class=\"string\">\"nightModeIndicator\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"JS-Part\"><a href=\"#JS-Part\" class=\"headerlink\" title=\"JS Part\"></a>JS Part</h2><p>It is easy to add the class to the body as you already know. But, we need to remember the user selection somewhere so that we can keep track of it between the pages and tabs. For that, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\" target=\"_blank\" rel=\"noopener\"><code>localStorage</code></a> would be the right man for the job.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggle</span>(<span class=\"params\">nightMode</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* Yea, this is ugly due to the fact that when we retrieve from localStorage,</span></span><br><span class=\"line\"><span class=\"comment\">   it gives us all as strings. &gt;_O */</span></span><br><span class=\"line\">  nightMode === <span class=\"string\">'true'</span> || nightMode === <span class=\"literal\">true</span></span><br><span class=\"line\">    ? <span class=\"built_in\">document</span>.body.classList.add(<span class=\"string\">'night-mode'</span>)</span><br><span class=\"line\">    : <span class=\"built_in\">document</span>.body.classList.remove(<span class=\"string\">'night-mode'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Do remember to choose a meaningful name under the respective namespace.</span></span><br><span class=\"line\">  <span class=\"built_in\">window</span>.localStorage.setItem(<span class=\"string\">'ashokma.com.nightmode'</span>, nightMode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">toggle(<span class=\"built_in\">window</span>.localStorage.getItem(<span class=\"string\">'ashokma.com.nightmode'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Make sure the below will be called after the night-mode checkbox creation.</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'nightModeIndicator'</span>).checked =</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.localStorage.getItem(<span class=\"string\">'ashokma.com.nightmode'</span>) === <span class=\"string\">'true'</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\" target=\"_blank\" rel=\"noopener\"><code>sessionStorage</code></a> is also an option if you want to persist the selection per session that is per browser window. As soon as the user closes the tab, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\" target=\"_blank\" rel=\"noopener\"><code>sessionStorage</code></a> will be cleared.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>As you might have already noticed, I have added an instant night mode option to <a href=\"//ashokma.com\">ashokma.com</a>. It is nothing fancy of sort but it does the job right by making our eyes ease to read at night +_+</p>\n<p>In case you did not notice, here is the quick guide:</p>\n<h3 id=\"Day-Mode\"><a href=\"#Day-Mode\" class=\"headerlink\" title=\"Day Mode:\"></a>Day Mode:</h3><p><img src=\"./ashkeys-instant-nightmode.png\" alt=\"Ashkeys Instant Night Mode\" title=\"Ashkeys Instant Night Mode\"></p>\n<h3 id=\"Night-Mode\"><a href=\"#Night-Mode\" class=\"headerlink\" title=\"Night Mode:\"></a>Night Mode:</h3><p><img src=\"./ashkeys-instant-nightmode-on.png\" alt=\"Ashkeys Instant Night Mode On\" title=\"Ashkeys Instant Night Mode On\"></p>\n<p>Now, lets see how can we do this in a very simple css styles. I have used the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter\" target=\"_blank\" rel=\"noopener\"><code>filter</code></a> property and <code>invert</code> function to invert the colors totally. Since our site is fully of bright colors already, it totally makes sense and easy to do as we agreed it is an instant one. ^_^</p>\n<h2 id=\"CSS-Part\"><a href=\"#CSS-Part\" class=\"headerlink\" title=\"CSS Part:\"></a>CSS Part:</h2><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Yes, we need to apply it to the body so that it is for all the pages/sections.</span></span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">0.8s</span>;</span><br><span class=\"line\">  &amp;<span class=\"selector-class\">.night-mode</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">filter</span>: invert(<span class=\"number\">1</span>) hue-rotate(<span class=\"number\">210deg</span>);</span><br><span class=\"line\">    <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">filter</span>: invert(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We need the night mode but also where people can read the lines without streching their eyes wide. So, I ended up with the above styles. It was challenging to find the perfect one for images though. O_o</p>\n<blockquote>\n<p><strong>Tip:</strong> Always use some preprocessors like <a href=\"https://sass-lang.com/\" target=\"_blank\" rel=\"noopener\"><code>SASS</code></a> I used here. It saves a lot of time by reducing the duplication and increasing the readability. More over, we can groupd the styles properly.</p>\n</blockquote>\n<h2 id=\"HTML-Part\"><a href=\"#HTML-Part\" class=\"headerlink\" title=\"HTML Part\"></a>HTML Part</h2><p>Just a small checkbox (obviously a <a href=\"/2019/08/26/How-to-create-a-custom-checkbox-with-just-CSS/\">custom made</a> one with cute little night mode icons sun/moon) ^_^</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">onchange</span>=<span class=\"string\">\"toggle(this.checked);\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">id</span>=<span class=\"string\">\"nightModeIndicator\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"JS-Part\"><a href=\"#JS-Part\" class=\"headerlink\" title=\"JS Part\"></a>JS Part</h2><p>It is easy to add the class to the body as you already know. But, we need to remember the user selection somewhere so that we can keep track of it between the pages and tabs. For that, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\" target=\"_blank\" rel=\"noopener\"><code>localStorage</code></a> would be the right man for the job.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggle</span>(<span class=\"params\">nightMode</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* Yea, this is ugly due to the fact that when we retrieve from localStorage,</span></span><br><span class=\"line\"><span class=\"comment\">   it gives us all as strings. &gt;_O */</span></span><br><span class=\"line\">  nightMode === <span class=\"string\">'true'</span> || nightMode === <span class=\"literal\">true</span></span><br><span class=\"line\">    ? <span class=\"built_in\">document</span>.body.classList.add(<span class=\"string\">'night-mode'</span>)</span><br><span class=\"line\">    : <span class=\"built_in\">document</span>.body.classList.remove(<span class=\"string\">'night-mode'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Do remember to choose a meaningful name under the respective namespace.</span></span><br><span class=\"line\">  <span class=\"built_in\">window</span>.localStorage.setItem(<span class=\"string\">'ashokma.com.nightmode'</span>, nightMode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">toggle(<span class=\"built_in\">window</span>.localStorage.getItem(<span class=\"string\">'ashokma.com.nightmode'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Make sure the below will be called after the night-mode checkbox creation.</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'nightModeIndicator'</span>).checked =</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.localStorage.getItem(<span class=\"string\">'ashokma.com.nightmode'</span>) === <span class=\"string\">'true'</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\" target=\"_blank\" rel=\"noopener\"><code>sessionStorage</code></a> is also an option if you want to persist the selection per session that is per browser window. As soon as the user closes the tab, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\" target=\"_blank\" rel=\"noopener\"><code>sessionStorage</code></a> will be cleared.</p>\n</blockquote>\n"},{"title":"How to change port mapping of a running docker container","icon":"fab fa-docker","date":"2019-03-23T22:46:44.000Z","_content":"\n\nSometimes, we might have a situation where we have to change the port mappings of a running docker container. So, it is better to know our options. Lets take a look at it with an example scenario where our [postgreSQL container](/2019/03/17/Run-Postgres-as-Docker-container/) was mapped to as following:\n\n```\n    $ docker ps\n\n    CONTAINER ID        IMAGE              PORTS                    NAMES\n    85261c36bf0e        postgres           0.0.0.0:5433->5432/tcp   pg-docker\n```\n\nI was looking for a solution where I can just edit the *localhost* mapping from *5433* to *5432* (which is also the default for postgreSQL).\n\nAnyways, Now we know what we need, let us take a look at the steps to make it happen.\n\n## Stop the container\n\nSince the container is busy bound to port *5433* which we want to change, we have to stop the container first as following:\n\n```\n    $ docker stop pg-docker\n\n    pg-docker\n```\n\n## Stop the docker daemon\n\nDocker daemon is the service which keeps tracks of containers and their configurations in short. As we are going to edit container specific configuration file, we need the daemon to be up and running after our changes. Now, stop the docker daemon:\n\n```\n    $ sudo systemctl stop docker\n```\n\n## Edit the container's *hostconfig.json*\n\nDocker keeps container configurations in a file called *hostconfig.json*. You can find the same file using the following pattern:\n\n*/var/lib/docker/containers/**<container_full_hash_id>**/hostconfig.json*\n\n> **Tip:** Use the following command to quickly get the full hash id of the container: (ofcourse, docker daemon has to be running)\n> `$ docker container inspect pg-docker | grep Id`\n>  \"Id\": \"85261c36bf0e94520012b508f67c7c0c86c0d52953a88f3cad7e06da77b225a0\",\n\nNow, we know where to find *hostconfig.json* file. In order to update the host mapping, we must edit the file and change the **\"HostPort\":\"5433\"** to our desired port mappings.\n\nOnce we are done editing the file, lets start the docker daemon and the container respectively.\n\n```\n    $ sudo systemctl start docker\n    \n    $ docker start pg-docker\n    pg-docker\n```\n\nIf we take a look at our running docker container now, we see the edited port mappings.\n\n```\n    $ docker ps\n\n    CONTAINER ID        IMAGE              PORTS                    NAMES\n    85261c36bf0e        postgres           0.0.0.0:5432->5432/tcp   pg-docker\n```\n\nYay \\O/\n\nWe have just updated our port mappings keeping all our container configurations!","source":"_posts/How-to-change-port-mapping-of-a-running-docker-container-2019-03-23.md","raw":"---\ntitle: How to change port mapping of a running docker container\ntags:\n  - Blog\n  - How To\n  - Docker\n  - Pop!_OS\n  - Linux\nicon: fab fa-docker\ndate: 2019-03-23 23:46:44\n---\n\n\nSometimes, we might have a situation where we have to change the port mappings of a running docker container. So, it is better to know our options. Lets take a look at it with an example scenario where our [postgreSQL container](/2019/03/17/Run-Postgres-as-Docker-container/) was mapped to as following:\n\n```\n    $ docker ps\n\n    CONTAINER ID        IMAGE              PORTS                    NAMES\n    85261c36bf0e        postgres           0.0.0.0:5433->5432/tcp   pg-docker\n```\n\nI was looking for a solution where I can just edit the *localhost* mapping from *5433* to *5432* (which is also the default for postgreSQL).\n\nAnyways, Now we know what we need, let us take a look at the steps to make it happen.\n\n## Stop the container\n\nSince the container is busy bound to port *5433* which we want to change, we have to stop the container first as following:\n\n```\n    $ docker stop pg-docker\n\n    pg-docker\n```\n\n## Stop the docker daemon\n\nDocker daemon is the service which keeps tracks of containers and their configurations in short. As we are going to edit container specific configuration file, we need the daemon to be up and running after our changes. Now, stop the docker daemon:\n\n```\n    $ sudo systemctl stop docker\n```\n\n## Edit the container's *hostconfig.json*\n\nDocker keeps container configurations in a file called *hostconfig.json*. You can find the same file using the following pattern:\n\n*/var/lib/docker/containers/**<container_full_hash_id>**/hostconfig.json*\n\n> **Tip:** Use the following command to quickly get the full hash id of the container: (ofcourse, docker daemon has to be running)\n> `$ docker container inspect pg-docker | grep Id`\n>  \"Id\": \"85261c36bf0e94520012b508f67c7c0c86c0d52953a88f3cad7e06da77b225a0\",\n\nNow, we know where to find *hostconfig.json* file. In order to update the host mapping, we must edit the file and change the **\"HostPort\":\"5433\"** to our desired port mappings.\n\nOnce we are done editing the file, lets start the docker daemon and the container respectively.\n\n```\n    $ sudo systemctl start docker\n    \n    $ docker start pg-docker\n    pg-docker\n```\n\nIf we take a look at our running docker container now, we see the edited port mappings.\n\n```\n    $ docker ps\n\n    CONTAINER ID        IMAGE              PORTS                    NAMES\n    85261c36bf0e        postgres           0.0.0.0:5432->5432/tcp   pg-docker\n```\n\nYay \\O/\n\nWe have just updated our port mappings keeping all our container configurations!","slug":"How-to-change-port-mapping-of-a-running-docker-container","published":1,"updated":"2019-03-23T22:55:57.857Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6ny001cryi0vefaxd3d","content":"<p>Sometimes, we might have a situation where we have to change the port mappings of a running docker container. So, it is better to know our options. Lets take a look at it with an example scenario where our <a href=\"/2019/03/17/Run-Postgres-as-Docker-container/\">postgreSQL container</a> was mapped to as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br><span class=\"line\"></span><br><span class=\"line\">CONTAINER ID        IMAGE              PORTS                    NAMES</span><br><span class=\"line\">85261c36bf0e        postgres           0.0.0.0:5433-&gt;5432/tcp   pg-docker</span><br></pre></td></tr></table></figure>\n<p>I was looking for a solution where I can just edit the <em>localhost</em> mapping from <em>5433</em> to <em>5432</em> (which is also the default for postgreSQL).</p>\n<p>Anyways, Now we know what we need, let us take a look at the steps to make it happen.</p>\n<h2 id=\"Stop-the-container\"><a href=\"#Stop-the-container\" class=\"headerlink\" title=\"Stop the container\"></a>Stop the container</h2><p>Since the container is busy bound to port <em>5433</em> which we want to change, we have to stop the container first as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker stop pg-docker</span><br><span class=\"line\"></span><br><span class=\"line\">pg-docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"Stop-the-docker-daemon\"><a href=\"#Stop-the-docker-daemon\" class=\"headerlink\" title=\"Stop the docker daemon\"></a>Stop the docker daemon</h2><p>Docker daemon is the service which keeps tracks of containers and their configurations in short. As we are going to edit container specific configuration file, we need the daemon to be up and running after our changes. Now, stop the docker daemon:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl stop docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"Edit-the-container’s-hostconfig-json\"><a href=\"#Edit-the-container’s-hostconfig-json\" class=\"headerlink\" title=\"Edit the container’s hostconfig.json\"></a>Edit the container’s <em>hostconfig.json</em></h2><p>Docker keeps container configurations in a file called <em>hostconfig.json</em>. You can find the same file using the following pattern:</p>\n<p><em>/var/lib/docker/containers/<strong>&lt;container_full_hash_id&gt;</strong>/hostconfig.json</em></p>\n<blockquote>\n<p><strong>Tip:</strong> Use the following command to quickly get the full hash id of the container: (ofcourse, docker daemon has to be running)<br><code>$ docker container inspect pg-docker | grep Id</code><br> “Id”: “85261c36bf0e94520012b508f67c7c0c86c0d52953a88f3cad7e06da77b225a0”,</p>\n</blockquote>\n<p>Now, we know where to find <em>hostconfig.json</em> file. In order to update the host mapping, we must edit the file and change the <strong>“HostPort”:”5433”</strong> to our desired port mappings.</p>\n<p>Once we are done editing the file, lets start the docker daemon and the container respectively.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl start docker</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker start pg-docker</span><br><span class=\"line\">pg-docker</span><br></pre></td></tr></table></figure>\n<p>If we take a look at our running docker container now, we see the edited port mappings.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br><span class=\"line\"></span><br><span class=\"line\">CONTAINER ID        IMAGE              PORTS                    NAMES</span><br><span class=\"line\">85261c36bf0e        postgres           0.0.0.0:5432-&gt;5432/tcp   pg-docker</span><br></pre></td></tr></table></figure>\n<p>Yay \\O/</p>\n<p>We have just updated our port mappings keeping all our container configurations!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Sometimes, we might have a situation where we have to change the port mappings of a running docker container. So, it is better to know our options. Lets take a look at it with an example scenario where our <a href=\"/2019/03/17/Run-Postgres-as-Docker-container/\">postgreSQL container</a> was mapped to as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br><span class=\"line\"></span><br><span class=\"line\">CONTAINER ID        IMAGE              PORTS                    NAMES</span><br><span class=\"line\">85261c36bf0e        postgres           0.0.0.0:5433-&gt;5432/tcp   pg-docker</span><br></pre></td></tr></table></figure>\n<p>I was looking for a solution where I can just edit the <em>localhost</em> mapping from <em>5433</em> to <em>5432</em> (which is also the default for postgreSQL).</p>\n<p>Anyways, Now we know what we need, let us take a look at the steps to make it happen.</p>\n<h2 id=\"Stop-the-container\"><a href=\"#Stop-the-container\" class=\"headerlink\" title=\"Stop the container\"></a>Stop the container</h2><p>Since the container is busy bound to port <em>5433</em> which we want to change, we have to stop the container first as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker stop pg-docker</span><br><span class=\"line\"></span><br><span class=\"line\">pg-docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"Stop-the-docker-daemon\"><a href=\"#Stop-the-docker-daemon\" class=\"headerlink\" title=\"Stop the docker daemon\"></a>Stop the docker daemon</h2><p>Docker daemon is the service which keeps tracks of containers and their configurations in short. As we are going to edit container specific configuration file, we need the daemon to be up and running after our changes. Now, stop the docker daemon:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl stop docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"Edit-the-container’s-hostconfig-json\"><a href=\"#Edit-the-container’s-hostconfig-json\" class=\"headerlink\" title=\"Edit the container’s hostconfig.json\"></a>Edit the container’s <em>hostconfig.json</em></h2><p>Docker keeps container configurations in a file called <em>hostconfig.json</em>. You can find the same file using the following pattern:</p>\n<p><em>/var/lib/docker/containers/<strong>&lt;container_full_hash_id&gt;</strong>/hostconfig.json</em></p>\n<blockquote>\n<p><strong>Tip:</strong> Use the following command to quickly get the full hash id of the container: (ofcourse, docker daemon has to be running)<br><code>$ docker container inspect pg-docker | grep Id</code><br> “Id”: “85261c36bf0e94520012b508f67c7c0c86c0d52953a88f3cad7e06da77b225a0”,</p>\n</blockquote>\n<p>Now, we know where to find <em>hostconfig.json</em> file. In order to update the host mapping, we must edit the file and change the <strong>“HostPort”:”5433”</strong> to our desired port mappings.</p>\n<p>Once we are done editing the file, lets start the docker daemon and the container respectively.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl start docker</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker start pg-docker</span><br><span class=\"line\">pg-docker</span><br></pre></td></tr></table></figure>\n<p>If we take a look at our running docker container now, we see the edited port mappings.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br><span class=\"line\"></span><br><span class=\"line\">CONTAINER ID        IMAGE              PORTS                    NAMES</span><br><span class=\"line\">85261c36bf0e        postgres           0.0.0.0:5432-&gt;5432/tcp   pg-docker</span><br></pre></td></tr></table></figure>\n<p>Yay \\O/</p>\n<p>We have just updated our port mappings keeping all our container configurations!</p>\n"},{"title":"How to add environment or path variables in linux","icon":"fab fa-linux","date":"2019-07-02T22:18:55.000Z","_content":"\n\nI am exploring `Golang` as `C` and `C++` are the main languages being used in the company I work now. Even though I do not see a future where I have to code in `Golang`, I just wanted to explore the `Hello World` with it.\n\nInstead of installing it as part of package manager, this time I downloaded the binaries and wanted to set the environment path containing `go` command file.\n\n# Download the binaries.\n\nGo to [`golang` download page](//golang.org/dl/) and download the version you want for linux.\n\nExplod the same as following:\n\n```bash\n$ tar xvzf ./go1.12.6.linux-amd64.tar.gz\n```\n\n# Add to path variable\n\nAdd the following entry at the end of the `.bashrc` file under your home directory (`/home/ashokma/.bashrc`)\n\n```bash\nexport GOPATH=/home/ashokma/projects/go\nexport GOROOT=/home/golang\nexport PATH=${PATH}:${GOROOT}/bin:${GOPATH}/bin\n```\n\n# Load the configs:\n\nUnlike other systems, in linux we can just load the startup configs using `source` util.\n\n```bash\n$ source /home/ashokma/.bashrc\n```\n\nVola \\O/ That is it! Now, when we try the `go` in terminal linux knows where to find it.\n\n```shell\n$ go\nGo is a tool for managing Go source code.\n\nUsage:\n\ngo <command> [arguments]\n```\n","source":"_posts/How-to-add-environment-or-path-variables-in-linux-2019-07-03.md","raw":"---\ntitle: How to add environment or path variables in linux\ntags:\n  - How To\n  - Pop!_OS\n  - Linux\n  - Terminal Usage\nicon: fab fa-linux\ndate: 2019-07-03 00:18:55\n---\n\n\nI am exploring `Golang` as `C` and `C++` are the main languages being used in the company I work now. Even though I do not see a future where I have to code in `Golang`, I just wanted to explore the `Hello World` with it.\n\nInstead of installing it as part of package manager, this time I downloaded the binaries and wanted to set the environment path containing `go` command file.\n\n# Download the binaries.\n\nGo to [`golang` download page](//golang.org/dl/) and download the version you want for linux.\n\nExplod the same as following:\n\n```bash\n$ tar xvzf ./go1.12.6.linux-amd64.tar.gz\n```\n\n# Add to path variable\n\nAdd the following entry at the end of the `.bashrc` file under your home directory (`/home/ashokma/.bashrc`)\n\n```bash\nexport GOPATH=/home/ashokma/projects/go\nexport GOROOT=/home/golang\nexport PATH=${PATH}:${GOROOT}/bin:${GOPATH}/bin\n```\n\n# Load the configs:\n\nUnlike other systems, in linux we can just load the startup configs using `source` util.\n\n```bash\n$ source /home/ashokma/.bashrc\n```\n\nVola \\O/ That is it! Now, when we try the `go` in terminal linux knows where to find it.\n\n```shell\n$ go\nGo is a tool for managing Go source code.\n\nUsage:\n\ngo <command> [arguments]\n```\n","slug":"How-to-add-environment-or-path-variables-in-linux","published":1,"updated":"2019-07-02T18:48:55.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6o0001eryi0w3g5id8t","content":"<p>I am exploring <code>Golang</code> as <code>C</code> and <code>C++</code> are the main languages being used in the company I work now. Even though I do not see a future where I have to code in <code>Golang</code>, I just wanted to explore the <code>Hello World</code> with it.</p>\n<p>Instead of installing it as part of package manager, this time I downloaded the binaries and wanted to set the environment path containing <code>go</code> command file.</p>\n<h1 id=\"Download-the-binaries\"><a href=\"#Download-the-binaries\" class=\"headerlink\" title=\"Download the binaries.\"></a>Download the binaries.</h1><p>Go to <a href=\"//golang.org/dl/\"><code>golang</code> download page</a> and download the version you want for linux.</p>\n<p>Explod the same as following:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar xvzf ./go1.12.6.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n<h1 id=\"Add-to-path-variable\"><a href=\"#Add-to-path-variable\" class=\"headerlink\" title=\"Add to path variable\"></a>Add to path variable</h1><p>Add the following entry at the end of the <code>.bashrc</code> file under your home directory (<code>/home/ashokma/.bashrc</code>)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GOPATH=/home/ashokma/projects/go</span><br><span class=\"line\"><span class=\"built_in\">export</span> GOROOT=/home/golang</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$&#123;PATH&#125;</span>:<span class=\"variable\">$&#123;GOROOT&#125;</span>/bin:<span class=\"variable\">$&#123;GOPATH&#125;</span>/bin</span><br></pre></td></tr></table></figure>\n<h1 id=\"Load-the-configs\"><a href=\"#Load-the-configs\" class=\"headerlink\" title=\"Load the configs:\"></a>Load the configs:</h1><p>Unlike other systems, in linux we can just load the startup configs using <code>source</code> util.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> /home/ashokma/.bashrc</span><br></pre></td></tr></table></figure>\n<p>Vola \\O/ That is it! Now, when we try the <code>go</code> in terminal linux knows where to find it.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> go</span></span><br><span class=\"line\">Go is a tool for managing Go source code.</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\"></span><br><span class=\"line\">go &lt;command&gt; [arguments]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>I am exploring <code>Golang</code> as <code>C</code> and <code>C++</code> are the main languages being used in the company I work now. Even though I do not see a future where I have to code in <code>Golang</code>, I just wanted to explore the <code>Hello World</code> with it.</p>\n<p>Instead of installing it as part of package manager, this time I downloaded the binaries and wanted to set the environment path containing <code>go</code> command file.</p>\n<h1 id=\"Download-the-binaries\"><a href=\"#Download-the-binaries\" class=\"headerlink\" title=\"Download the binaries.\"></a>Download the binaries.</h1><p>Go to <a href=\"//golang.org/dl/\"><code>golang</code> download page</a> and download the version you want for linux.</p>\n<p>Explod the same as following:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar xvzf ./go1.12.6.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n<h1 id=\"Add-to-path-variable\"><a href=\"#Add-to-path-variable\" class=\"headerlink\" title=\"Add to path variable\"></a>Add to path variable</h1><p>Add the following entry at the end of the <code>.bashrc</code> file under your home directory (<code>/home/ashokma/.bashrc</code>)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GOPATH=/home/ashokma/projects/go</span><br><span class=\"line\"><span class=\"built_in\">export</span> GOROOT=/home/golang</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$&#123;PATH&#125;</span>:<span class=\"variable\">$&#123;GOROOT&#125;</span>/bin:<span class=\"variable\">$&#123;GOPATH&#125;</span>/bin</span><br></pre></td></tr></table></figure>\n<h1 id=\"Load-the-configs\"><a href=\"#Load-the-configs\" class=\"headerlink\" title=\"Load the configs:\"></a>Load the configs:</h1><p>Unlike other systems, in linux we can just load the startup configs using <code>source</code> util.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> /home/ashokma/.bashrc</span><br></pre></td></tr></table></figure>\n<p>Vola \\O/ That is it! Now, when we try the <code>go</code> in terminal linux knows where to find it.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> go</span></span><br><span class=\"line\">Go is a tool for managing Go source code.</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\"></span><br><span class=\"line\">go &lt;command&gt; [arguments]</span><br></pre></td></tr></table></figure>\n"},{"title":"How to convert SVGs to desired color","icon":"fab fa-css3","date":"2019-10-08T21:04:18.000Z","_content":"\n\nMost of us encounter a situation where an SVG is pixel perfect for re-use but there is one slight thing is missing. The color of the SVG has to be different >\\_O. I have recently encountered this situation. Instead of just duplicating the SVG file and editing the color to desired one (I knew that was the easy one >\\_<), I spent some time looking for options to do it in CSS only because duplication did not feel right. Vola! \\O/\n\nI found it and I want to share it with you guys. Using this online tool, we can create a `filter` property value that will convert/transform an SVG to our desired color!\n\n![Css Filter Generator](css_filter_generator.png 'Css Filter Generator')\n\n[CSS filter generator to convert from black to target hex color](https://codepen.io/sosuke/pen/Pjoqqp)\n\n> **P.S:** This helped me to transform the SVG icons into desired colors ^\\_^\n\nHope this helps you guys too!\n","source":"_posts/How-to-convert-SVGs-to-desired-color-2019-10-08.md","raw":"---\ntitle: How to convert SVGs to desired color\ntags:\n  - How To\n  - SVG\n  - CSS\n  - Tools\nicon: fab fa-css3\ndate: 2019-10-08 23:04:18\n---\n\n\nMost of us encounter a situation where an SVG is pixel perfect for re-use but there is one slight thing is missing. The color of the SVG has to be different >\\_O. I have recently encountered this situation. Instead of just duplicating the SVG file and editing the color to desired one (I knew that was the easy one >\\_<), I spent some time looking for options to do it in CSS only because duplication did not feel right. Vola! \\O/\n\nI found it and I want to share it with you guys. Using this online tool, we can create a `filter` property value that will convert/transform an SVG to our desired color!\n\n![Css Filter Generator](css_filter_generator.png 'Css Filter Generator')\n\n[CSS filter generator to convert from black to target hex color](https://codepen.io/sosuke/pen/Pjoqqp)\n\n> **P.S:** This helped me to transform the SVG icons into desired colors ^\\_^\n\nHope this helps you guys too!\n","slug":"How-to-convert-SVGs-to-desired-color","published":1,"updated":"2019-10-08T21:04:18.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6o5001gryi0z9zbija2","content":"<p>Most of us encounter a situation where an SVG is pixel perfect for re-use but there is one slight thing is missing. The color of the SVG has to be different &gt;_O. I have recently encountered this situation. Instead of just duplicating the SVG file and editing the color to desired one (I knew that was the easy one &gt;_&lt;), I spent some time looking for options to do it in CSS only because duplication did not feel right. Vola! \\O/</p>\n<p>I found it and I want to share it with you guys. Using this online tool, we can create a <code>filter</code> property value that will convert/transform an SVG to our desired color!</p>\n<p><img src=\"css_filter_generator.png\" alt=\"Css Filter Generator\" title=\"Css Filter Generator\"></p>\n<p><a href=\"https://codepen.io/sosuke/pen/Pjoqqp\" target=\"_blank\" rel=\"noopener\">CSS filter generator to convert from black to target hex color</a></p>\n<blockquote>\n<p><strong>P.S:</strong> This helped me to transform the SVG icons into desired colors ^_^</p>\n</blockquote>\n<p>Hope this helps you guys too!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Most of us encounter a situation where an SVG is pixel perfect for re-use but there is one slight thing is missing. The color of the SVG has to be different &gt;_O. I have recently encountered this situation. Instead of just duplicating the SVG file and editing the color to desired one (I knew that was the easy one &gt;_&lt;), I spent some time looking for options to do it in CSS only because duplication did not feel right. Vola! \\O/</p>\n<p>I found it and I want to share it with you guys. Using this online tool, we can create a <code>filter</code> property value that will convert/transform an SVG to our desired color!</p>\n<p><img src=\"css_filter_generator.png\" alt=\"Css Filter Generator\" title=\"Css Filter Generator\"></p>\n<p><a href=\"https://codepen.io/sosuke/pen/Pjoqqp\" target=\"_blank\" rel=\"noopener\">CSS filter generator to convert from black to target hex color</a></p>\n<blockquote>\n<p><strong>P.S:</strong> This helped me to transform the SVG icons into desired colors ^_^</p>\n</blockquote>\n<p>Hope this helps you guys too!</p>\n"},{"title":"How to configure PostgreSQL to accept all incoming connections","icon":"fab fa-docker","date":"2019-04-01T20:14:12.000Z","_content":"\n\nSometimes, you might want to connect to your test or acceptance environment databases. Mostly for we might want to test our local changes with real-time data instead of mock data. Or simply you do not want to set a local database up. ^\\_^\n\nFor these cases and people who are interested in connecting their application to non-development environment database, we are going to look at how to enable postgres to listen to all incoming connections.\n\n## Edit the `postgresql.conf` file:\n\nWe have to edit the **CONNECTIONS AND AUTHENTICATION** section in **`postgresql.conf`** file as follows:\nYou will find this file under your volume directory. Since I [run postgresql as docker container](/2019/03/17/Run-Postgres-as-Docker-container/), it is in `/home/ashokma/docker/volumes/postgres/postgresql.conf`.\n\n```\n    #------------------------------------------------------------------------------\n    # CONNECTIONS AND AUTHENTICATION\n    #------------------------------------------------------------------------------\n\n    # - Connection Settings -\n\n    listen_addresses = '*'\n                                            # comma-separated list of addresses;\n                                            # defaults to 'localhost'; use '*' for all\n                                            # (change requires restart)\n```\n\nOnce restarted, we can expect to listen to all ips. Yes, it will listen and you get proper not authenticated exception on trying to connect to database instead of a confusing connection refused >\\_O\n\n> Tip: It is okay to listen to all addresses if you are sure you are not expecting a DDoS to it. At least, in this way people know the DB is up but they do not have permissions!\n\n## Edit the `pg_hba.conf` file: (HBA stands for host-based authentication)\n\nIn order to configure the enable the authentications for specific or to all users as a temporary, we have to edit the `pg_hba.conf` file as follows:\n\n```\n    # TYPE  DATABASE   USER   ADDRESS   METHOD\n\n    # \"local\" is for Unix domain socket connections only\n    local   all        all             trust\n    host    all        all    all      md5\n```\n\nOnce restarted, anyone in the network can access the database with valid credentials like\n\n```\n    $ psql -h ashokma.com -U ashkeys\n    Password for user ashkeys:\n```\n\n> Tip: `postgres` has very good documentation. To know more about the options in `pg_hba.conf`, take a look at [postgresql.org](//www.postgresql.org/docs/9.1/auth-pg-hba-conf.html)\n","source":"_posts/How-to-configure-PostgreSQL-to-accept-all-incoming-connections-2019-04-01.md","raw":"---\ntitle: How to configure PostgreSQL to accept all incoming connections\ntags:\n  - Blog\n  - How To\n  - Postgres\n  - Docker\nicon: fab fa-docker\ndate: 2019-04-01 22:14:12\n---\n\n\nSometimes, you might want to connect to your test or acceptance environment databases. Mostly for we might want to test our local changes with real-time data instead of mock data. Or simply you do not want to set a local database up. ^\\_^\n\nFor these cases and people who are interested in connecting their application to non-development environment database, we are going to look at how to enable postgres to listen to all incoming connections.\n\n## Edit the `postgresql.conf` file:\n\nWe have to edit the **CONNECTIONS AND AUTHENTICATION** section in **`postgresql.conf`** file as follows:\nYou will find this file under your volume directory. Since I [run postgresql as docker container](/2019/03/17/Run-Postgres-as-Docker-container/), it is in `/home/ashokma/docker/volumes/postgres/postgresql.conf`.\n\n```\n    #------------------------------------------------------------------------------\n    # CONNECTIONS AND AUTHENTICATION\n    #------------------------------------------------------------------------------\n\n    # - Connection Settings -\n\n    listen_addresses = '*'\n                                            # comma-separated list of addresses;\n                                            # defaults to 'localhost'; use '*' for all\n                                            # (change requires restart)\n```\n\nOnce restarted, we can expect to listen to all ips. Yes, it will listen and you get proper not authenticated exception on trying to connect to database instead of a confusing connection refused >\\_O\n\n> Tip: It is okay to listen to all addresses if you are sure you are not expecting a DDoS to it. At least, in this way people know the DB is up but they do not have permissions!\n\n## Edit the `pg_hba.conf` file: (HBA stands for host-based authentication)\n\nIn order to configure the enable the authentications for specific or to all users as a temporary, we have to edit the `pg_hba.conf` file as follows:\n\n```\n    # TYPE  DATABASE   USER   ADDRESS   METHOD\n\n    # \"local\" is for Unix domain socket connections only\n    local   all        all             trust\n    host    all        all    all      md5\n```\n\nOnce restarted, anyone in the network can access the database with valid credentials like\n\n```\n    $ psql -h ashokma.com -U ashkeys\n    Password for user ashkeys:\n```\n\n> Tip: `postgres` has very good documentation. To know more about the options in `pg_hba.conf`, take a look at [postgresql.org](//www.postgresql.org/docs/9.1/auth-pg-hba-conf.html)\n","slug":"How-to-configure-PostgreSQL-to-accept-all-incoming-connections","published":1,"updated":"2019-04-01T20:14:12.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6o6001hryi0rgkzaufh","content":"<p>Sometimes, you might want to connect to your test or acceptance environment databases. Mostly for we might want to test our local changes with real-time data instead of mock data. Or simply you do not want to set a local database up. ^_^</p>\n<p>For these cases and people who are interested in connecting their application to non-development environment database, we are going to look at how to enable postgres to listen to all incoming connections.</p>\n<h2 id=\"Edit-the-postgresql-conf-file\"><a href=\"#Edit-the-postgresql-conf-file\" class=\"headerlink\" title=\"Edit the postgresql.conf file:\"></a>Edit the <code>postgresql.conf</code> file:</h2><p>We have to edit the <strong>CONNECTIONS AND AUTHENTICATION</strong> section in <strong><code>postgresql.conf</code></strong> file as follows:<br>You will find this file under your volume directory. Since I <a href=\"/2019/03/17/Run-Postgres-as-Docker-container/\">run postgresql as docker container</a>, it is in <code>/home/ashokma/docker/volumes/postgres/postgresql.conf</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#------------------------------------------------------------------------------</span><br><span class=\"line\"># CONNECTIONS AND AUTHENTICATION</span><br><span class=\"line\">#------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># - Connection Settings -</span><br><span class=\"line\"></span><br><span class=\"line\">listen_addresses = &apos;*&apos;</span><br><span class=\"line\">                                        # comma-separated list of addresses;</span><br><span class=\"line\">                                        # defaults to &apos;localhost&apos;; use &apos;*&apos; for all</span><br><span class=\"line\">                                        # (change requires restart)</span><br></pre></td></tr></table></figure>\n<p>Once restarted, we can expect to listen to all ips. Yes, it will listen and you get proper not authenticated exception on trying to connect to database instead of a confusing connection refused &gt;_O</p>\n<blockquote>\n<p>Tip: It is okay to listen to all addresses if you are sure you are not expecting a DDoS to it. At least, in this way people know the DB is up but they do not have permissions!</p>\n</blockquote>\n<h2 id=\"Edit-the-pg-hba-conf-file-HBA-stands-for-host-based-authentication\"><a href=\"#Edit-the-pg-hba-conf-file-HBA-stands-for-host-based-authentication\" class=\"headerlink\" title=\"Edit the pg_hba.conf file: (HBA stands for host-based authentication)\"></a>Edit the <code>pg_hba.conf</code> file: (HBA stands for host-based authentication)</h2><p>In order to configure the enable the authentications for specific or to all users as a temporary, we have to edit the <code>pg_hba.conf</code> file as follows:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># TYPE  DATABASE   USER   ADDRESS   METHOD</span><br><span class=\"line\"></span><br><span class=\"line\"># &quot;local&quot; is for Unix domain socket connections only</span><br><span class=\"line\">local   all        all             trust</span><br><span class=\"line\">host    all        all    all      md5</span><br></pre></td></tr></table></figure>\n<p>Once restarted, anyone in the network can access the database with valid credentials like</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ psql -h ashokma.com -U ashkeys</span><br><span class=\"line\">Password for user ashkeys:</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Tip: <code>postgres</code> has very good documentation. To know more about the options in <code>pg_hba.conf</code>, take a look at <a href=\"//www.postgresql.org/docs/9.1/auth-pg-hba-conf.html\">postgresql.org</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Sometimes, you might want to connect to your test or acceptance environment databases. Mostly for we might want to test our local changes with real-time data instead of mock data. Or simply you do not want to set a local database up. ^_^</p>\n<p>For these cases and people who are interested in connecting their application to non-development environment database, we are going to look at how to enable postgres to listen to all incoming connections.</p>\n<h2 id=\"Edit-the-postgresql-conf-file\"><a href=\"#Edit-the-postgresql-conf-file\" class=\"headerlink\" title=\"Edit the postgresql.conf file:\"></a>Edit the <code>postgresql.conf</code> file:</h2><p>We have to edit the <strong>CONNECTIONS AND AUTHENTICATION</strong> section in <strong><code>postgresql.conf</code></strong> file as follows:<br>You will find this file under your volume directory. Since I <a href=\"/2019/03/17/Run-Postgres-as-Docker-container/\">run postgresql as docker container</a>, it is in <code>/home/ashokma/docker/volumes/postgres/postgresql.conf</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#------------------------------------------------------------------------------</span><br><span class=\"line\"># CONNECTIONS AND AUTHENTICATION</span><br><span class=\"line\">#------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># - Connection Settings -</span><br><span class=\"line\"></span><br><span class=\"line\">listen_addresses = &apos;*&apos;</span><br><span class=\"line\">                                        # comma-separated list of addresses;</span><br><span class=\"line\">                                        # defaults to &apos;localhost&apos;; use &apos;*&apos; for all</span><br><span class=\"line\">                                        # (change requires restart)</span><br></pre></td></tr></table></figure>\n<p>Once restarted, we can expect to listen to all ips. Yes, it will listen and you get proper not authenticated exception on trying to connect to database instead of a confusing connection refused &gt;_O</p>\n<blockquote>\n<p>Tip: It is okay to listen to all addresses if you are sure you are not expecting a DDoS to it. At least, in this way people know the DB is up but they do not have permissions!</p>\n</blockquote>\n<h2 id=\"Edit-the-pg-hba-conf-file-HBA-stands-for-host-based-authentication\"><a href=\"#Edit-the-pg-hba-conf-file-HBA-stands-for-host-based-authentication\" class=\"headerlink\" title=\"Edit the pg_hba.conf file: (HBA stands for host-based authentication)\"></a>Edit the <code>pg_hba.conf</code> file: (HBA stands for host-based authentication)</h2><p>In order to configure the enable the authentications for specific or to all users as a temporary, we have to edit the <code>pg_hba.conf</code> file as follows:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># TYPE  DATABASE   USER   ADDRESS   METHOD</span><br><span class=\"line\"></span><br><span class=\"line\"># &quot;local&quot; is for Unix domain socket connections only</span><br><span class=\"line\">local   all        all             trust</span><br><span class=\"line\">host    all        all    all      md5</span><br></pre></td></tr></table></figure>\n<p>Once restarted, anyone in the network can access the database with valid credentials like</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ psql -h ashokma.com -U ashkeys</span><br><span class=\"line\">Password for user ashkeys:</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Tip: <code>postgres</code> has very good documentation. To know more about the options in <code>pg_hba.conf</code>, take a look at <a href=\"//www.postgresql.org/docs/9.1/auth-pg-hba-conf.html\">postgresql.org</a></p>\n</blockquote>\n"},{"title":"How to convert value to a string in JavaScript","icon":"fab fa-js-square","date":"2019-06-02T13:54:37.000Z","_content":"\n- [`toString()` method](#Using-toString-method)\n- [Template String Literals](#Using-template-string-literal)\n- [`JSON.stringfy()` method](#Using-JSON-stringfy-method)\n- [`String()` constructor](#Using-String-constructor)\n\nThe Java programmers know to call `toString()`method in order to convert any value to string. That is also the case with JavaScript.\n\n## Using `toString()` method\n\n```js\nconst balance = 910;\n\nconst notification = 'You owe me ' + balance.toString(1);\n\nconsole.log(notification); // You owe me 910\n```\n\n> **Tip:** `toString()` also accepts an argument to represent the numeric values with respect to a base. Please refer the [docs][mdn-docs-tostring] to make a better use of it.\n\nSince the `ES6` standard, we have another way as well, called template string literals.\n\n## Using template string literal\n\n```js\nconst balance = 910;\n\nconst notification = `You owe me ${balance}!`;\n\nconsole.log(notification); // You owe me 910!\n```\n\nLooks good is it not ^\\_^\n\n> **Tip:** Prefer template strings whenever constructing strings with values or object references.\n\n## Using `JSON.stringfy()` method\n\n```js\nconst balance = 910;\n\nconst notification = 'You owe me ' + JSON.stringify(balance);\n\nconsole.log(notification); // You owe me 910\n```\n\nThis really comes handy for objects in order to print the object structure in string notation. `JSON.stringfy` accepts two more arguments called `replacer` and `space` respectively.\n\n> **Tip:** Prefer to supply `space` argument when stringfying objects. Refer [docs][mdn-docs-stringfy] for more.\n\n## Using `String()` constructor\n\n```js\nconst balance = 910;\n\nconst notification = 'You owe me ' + new String(balance);\n\nconsole.log(notification); // You owe me 910\n```\n\nThere is this `constructor` option for us to be OOPs.\n\n> **Tip:** Use `String()` without the `new` keyword to get string literal instead. We can verify the same with `typeof` operator as well.\n\n```js\nconst stringObject = new String('AshKeys');\n\nconsole.log(typeof stringObject); // object\n\nconst stringLiteral = String('AshKeys');\n\nconsole.log(typeof stringLiteral); // string\n\nconsole.log(stringObject == stringLiteral); // true\nconsole.log(stringObject === stringLiteral); // false\n```\n\nAs you can see, `stringObject` is value equals with `stringLiteral`, but does not strict equals it.\n\n[mdn-docs-tostring]: //developer.mozilla.org/en-us/docs/web/javascript/reference/global_objects/number/tostring#parameters\n[mdn-docs-stringfy]: //developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n","source":"_posts/How-to-convert-value-to-a-string-in-JavaScript-2019-06-02.md","raw":"---\ntitle: How to convert value to a string in JavaScript\ntags:\n  - How To\n  - String\n  - JS\n  - ES6\nicon: fab fa-js-square\ndate: 2019-06-02 15:54:37\n---\n\n- [`toString()` method](#Using-toString-method)\n- [Template String Literals](#Using-template-string-literal)\n- [`JSON.stringfy()` method](#Using-JSON-stringfy-method)\n- [`String()` constructor](#Using-String-constructor)\n\nThe Java programmers know to call `toString()`method in order to convert any value to string. That is also the case with JavaScript.\n\n## Using `toString()` method\n\n```js\nconst balance = 910;\n\nconst notification = 'You owe me ' + balance.toString(1);\n\nconsole.log(notification); // You owe me 910\n```\n\n> **Tip:** `toString()` also accepts an argument to represent the numeric values with respect to a base. Please refer the [docs][mdn-docs-tostring] to make a better use of it.\n\nSince the `ES6` standard, we have another way as well, called template string literals.\n\n## Using template string literal\n\n```js\nconst balance = 910;\n\nconst notification = `You owe me ${balance}!`;\n\nconsole.log(notification); // You owe me 910!\n```\n\nLooks good is it not ^\\_^\n\n> **Tip:** Prefer template strings whenever constructing strings with values or object references.\n\n## Using `JSON.stringfy()` method\n\n```js\nconst balance = 910;\n\nconst notification = 'You owe me ' + JSON.stringify(balance);\n\nconsole.log(notification); // You owe me 910\n```\n\nThis really comes handy for objects in order to print the object structure in string notation. `JSON.stringfy` accepts two more arguments called `replacer` and `space` respectively.\n\n> **Tip:** Prefer to supply `space` argument when stringfying objects. Refer [docs][mdn-docs-stringfy] for more.\n\n## Using `String()` constructor\n\n```js\nconst balance = 910;\n\nconst notification = 'You owe me ' + new String(balance);\n\nconsole.log(notification); // You owe me 910\n```\n\nThere is this `constructor` option for us to be OOPs.\n\n> **Tip:** Use `String()` without the `new` keyword to get string literal instead. We can verify the same with `typeof` operator as well.\n\n```js\nconst stringObject = new String('AshKeys');\n\nconsole.log(typeof stringObject); // object\n\nconst stringLiteral = String('AshKeys');\n\nconsole.log(typeof stringLiteral); // string\n\nconsole.log(stringObject == stringLiteral); // true\nconsole.log(stringObject === stringLiteral); // false\n```\n\nAs you can see, `stringObject` is value equals with `stringLiteral`, but does not strict equals it.\n\n[mdn-docs-tostring]: //developer.mozilla.org/en-us/docs/web/javascript/reference/global_objects/number/tostring#parameters\n[mdn-docs-stringfy]: //developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n","slug":"How-to-convert-value-to-a-string-in-JavaScript","published":1,"updated":"2019-06-03T18:10:57.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6o8001iryi0j7lch97w","content":"<ul>\n<li><a href=\"#Using-toString-method\"><code>toString()</code> method</a></li>\n<li><a href=\"#Using-template-string-literal\">Template String Literals</a></li>\n<li><a href=\"#Using-JSON-stringfy-method\"><code>JSON.stringfy()</code> method</a></li>\n<li><a href=\"#Using-String-constructor\"><code>String()</code> constructor</a></li>\n</ul>\n<p>The Java programmers know to call <code>toString()</code>method in order to convert any value to string. That is also the case with JavaScript.</p>\n<h2 id=\"Using-toString-method\"><a href=\"#Using-toString-method\" class=\"headerlink\" title=\"Using toString() method\"></a>Using <code>toString()</code> method</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> balance = <span class=\"number\">910</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> notification = <span class=\"string\">'You owe me '</span> + balance.toString(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(notification); <span class=\"comment\">// You owe me 910</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> <code>toString()</code> also accepts an argument to represent the numeric values with respect to a base. Please refer the <a href=\"//developer.mozilla.org/en-us/docs/web/javascript/reference/global_objects/number/tostring#parameters\">docs</a> to make a better use of it.</p>\n</blockquote>\n<p>Since the <code>ES6</code> standard, we have another way as well, called template string literals.</p>\n<h2 id=\"Using-template-string-literal\"><a href=\"#Using-template-string-literal\" class=\"headerlink\" title=\"Using template string literal\"></a>Using template string literal</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> balance = <span class=\"number\">910</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> notification = <span class=\"string\">`You owe me <span class=\"subst\">$&#123;balance&#125;</span>!`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(notification); <span class=\"comment\">// You owe me 910!</span></span><br></pre></td></tr></table></figure>\n<p>Looks good is it not ^_^</p>\n<blockquote>\n<p><strong>Tip:</strong> Prefer template strings whenever constructing strings with values or object references.</p>\n</blockquote>\n<h2 id=\"Using-JSON-stringfy-method\"><a href=\"#Using-JSON-stringfy-method\" class=\"headerlink\" title=\"Using JSON.stringfy() method\"></a>Using <code>JSON.stringfy()</code> method</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> balance = <span class=\"number\">910</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> notification = <span class=\"string\">'You owe me '</span> + <span class=\"built_in\">JSON</span>.stringify(balance);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(notification); <span class=\"comment\">// You owe me 910</span></span><br></pre></td></tr></table></figure>\n<p>This really comes handy for objects in order to print the object structure in string notation. <code>JSON.stringfy</code> accepts two more arguments called <code>replacer</code> and <code>space</code> respectively.</p>\n<blockquote>\n<p><strong>Tip:</strong> Prefer to supply <code>space</code> argument when stringfying objects. Refer <a href=\"//developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">docs</a> for more.</p>\n</blockquote>\n<h2 id=\"Using-String-constructor\"><a href=\"#Using-String-constructor\" class=\"headerlink\" title=\"Using String() constructor\"></a>Using <code>String()</code> constructor</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> balance = <span class=\"number\">910</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> notification = <span class=\"string\">'You owe me '</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(balance);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(notification); <span class=\"comment\">// You owe me 910</span></span><br></pre></td></tr></table></figure>\n<p>There is this <code>constructor</code> option for us to be OOPs.</p>\n<blockquote>\n<p><strong>Tip:</strong> Use <code>String()</code> without the <code>new</code> keyword to get string literal instead. We can verify the same with <code>typeof</code> operator as well.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stringObject = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'AshKeys'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> stringObject); <span class=\"comment\">// object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> stringLiteral = <span class=\"built_in\">String</span>(<span class=\"string\">'AshKeys'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> stringLiteral); <span class=\"comment\">// string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stringObject == stringLiteral); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stringObject === stringLiteral); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>As you can see, <code>stringObject</code> is value equals with <code>stringLiteral</code>, but does not strict equals it.</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"#Using-toString-method\"><code>toString()</code> method</a></li>\n<li><a href=\"#Using-template-string-literal\">Template String Literals</a></li>\n<li><a href=\"#Using-JSON-stringfy-method\"><code>JSON.stringfy()</code> method</a></li>\n<li><a href=\"#Using-String-constructor\"><code>String()</code> constructor</a></li>\n</ul>\n<p>The Java programmers know to call <code>toString()</code>method in order to convert any value to string. That is also the case with JavaScript.</p>\n<h2 id=\"Using-toString-method\"><a href=\"#Using-toString-method\" class=\"headerlink\" title=\"Using toString() method\"></a>Using <code>toString()</code> method</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> balance = <span class=\"number\">910</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> notification = <span class=\"string\">'You owe me '</span> + balance.toString(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(notification); <span class=\"comment\">// You owe me 910</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> <code>toString()</code> also accepts an argument to represent the numeric values with respect to a base. Please refer the <a href=\"//developer.mozilla.org/en-us/docs/web/javascript/reference/global_objects/number/tostring#parameters\">docs</a> to make a better use of it.</p>\n</blockquote>\n<p>Since the <code>ES6</code> standard, we have another way as well, called template string literals.</p>\n<h2 id=\"Using-template-string-literal\"><a href=\"#Using-template-string-literal\" class=\"headerlink\" title=\"Using template string literal\"></a>Using template string literal</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> balance = <span class=\"number\">910</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> notification = <span class=\"string\">`You owe me <span class=\"subst\">$&#123;balance&#125;</span>!`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(notification); <span class=\"comment\">// You owe me 910!</span></span><br></pre></td></tr></table></figure>\n<p>Looks good is it not ^_^</p>\n<blockquote>\n<p><strong>Tip:</strong> Prefer template strings whenever constructing strings with values or object references.</p>\n</blockquote>\n<h2 id=\"Using-JSON-stringfy-method\"><a href=\"#Using-JSON-stringfy-method\" class=\"headerlink\" title=\"Using JSON.stringfy() method\"></a>Using <code>JSON.stringfy()</code> method</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> balance = <span class=\"number\">910</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> notification = <span class=\"string\">'You owe me '</span> + <span class=\"built_in\">JSON</span>.stringify(balance);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(notification); <span class=\"comment\">// You owe me 910</span></span><br></pre></td></tr></table></figure>\n<p>This really comes handy for objects in order to print the object structure in string notation. <code>JSON.stringfy</code> accepts two more arguments called <code>replacer</code> and <code>space</code> respectively.</p>\n<blockquote>\n<p><strong>Tip:</strong> Prefer to supply <code>space</code> argument when stringfying objects. Refer <a href=\"//developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">docs</a> for more.</p>\n</blockquote>\n<h2 id=\"Using-String-constructor\"><a href=\"#Using-String-constructor\" class=\"headerlink\" title=\"Using String() constructor\"></a>Using <code>String()</code> constructor</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> balance = <span class=\"number\">910</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> notification = <span class=\"string\">'You owe me '</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(balance);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(notification); <span class=\"comment\">// You owe me 910</span></span><br></pre></td></tr></table></figure>\n<p>There is this <code>constructor</code> option for us to be OOPs.</p>\n<blockquote>\n<p><strong>Tip:</strong> Use <code>String()</code> without the <code>new</code> keyword to get string literal instead. We can verify the same with <code>typeof</code> operator as well.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stringObject = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'AshKeys'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> stringObject); <span class=\"comment\">// object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> stringLiteral = <span class=\"built_in\">String</span>(<span class=\"string\">'AshKeys'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> stringLiteral); <span class=\"comment\">// string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stringObject == stringLiteral); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stringObject === stringLiteral); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>As you can see, <code>stringObject</code> is value equals with <code>stringLiteral</code>, but does not strict equals it.</p>\n"},{"title":"How to create a custom checkbox with just CSS","icon":"fab fa-css3-alt","date":"2019-08-26T21:14:19.000Z","_content":"\nToday, I had to create a custom solution for a design requirement. A custom checkbox! It was fun doing it of course and I learned bit more about CSS.\n\nHowever, I realized that it took me more time to track down the perfect custom solution that was need for me than the complexity of the solution itself. I did not want anything that will make my style sheets more messier and also not for just fancy. Just the right one needed as per the design.\n\nHere follows the code piece. I am trying out this new approach where I add comments in order to explain what a piece of code does or why does it need to be there. ^\\_^\n\n```html\n<div>\n  <!-- Yes, the label should follow the input and id/name is must,\n   in order to associate the label to the input -->\n  <input type=\"checkbox\" name=\"customCheckbox\" id=\"customCheckbox\" />\n  <label for=\"customCheckbox\">Custom Checkbox</label>\n</div>\n```\n\nHere comes the fun part of CSS only!\n\n```css\n/* First hide the default browser's boring style. */\ninput[type='checkbox'] {\n  opacity: 0;\n  cursor: pointer;\n  height: 0;\n  width: 0;\n}\n\n/* Makes the label clickable and also not selectable.*/\nlabel {\n  cursor: pointer;\n  position: relative;\n  margin-left: 15px;\n  user-select: none;\n}\n\n/* Creates the box for our check mark. */\nlabel::before {\n  content: '';\n  position: absolute;\n  top: 1px;\n  left: -17px;\n  width: 14px;\n  height: 14px;\n  border-radius: 2px;\n  border: solid 1px rgb(25, 209, 25);\n}\n\n/* Here comes the checkmark. */\nlabel::after {\n  content: '';\n  position: absolute;\n  left: -14px;\n  top: 5px;\n  display: inline-block;\n  width: 10px;\n  height: 4px;\n  border-left: 1px solid;\n  border-bottom: 1px solid;\n  border-color: rgb(22, 43, 230);\n  transform: rotate(-45deg);\n}\n\n/* Makes sure the tick is not displayed by default */\ninput[type='checkbox'] + label:after {\n  content: none;\n}\n\n/* But, only when user checks the box */\ninput[type='checkbox']:checked + label:after {\n  content: '';\n}\n\n/* Makes ease of user interaction by addressing the focus state */\ninput[type='checkbox']:focus + label::before {\n  box-shadow: 0 0 4px 0 rgb(25, 209, 25);\n}\n```\n\n> **Tip:** As you can see, I just used the general style property. This works fine in chrome. I strongly advice to use CSS preprocessors like [`SASS`](https://sass-lang.com/) so that you do not need to worry about browser specific property prefixes such as `-webkit-` for chrome. \\O/\n\n<center>\n**Live Demo:**\n\nhttps://custom-checkbox-css-only.netlify.com/\n\n**Sneak Peek**\n\n![Custom Checkbox - CSS only!](./custom-checkbox-css-only.png 'Custom Checkbox - CSS only!')\n\n</center>\n","source":"_posts/How-to-create-a-custom-checkbox-with-just-CSS-2019-08-26.md","raw":"---\ntitle: How to create a custom checkbox with just CSS\ntags:\n  - How To\n  - CSS3\n  - Pseudo classes\n  - Custom\nicon: fab fa-css3-alt\ndate: 2019-08-26 23:14:19\n---\n\nToday, I had to create a custom solution for a design requirement. A custom checkbox! It was fun doing it of course and I learned bit more about CSS.\n\nHowever, I realized that it took me more time to track down the perfect custom solution that was need for me than the complexity of the solution itself. I did not want anything that will make my style sheets more messier and also not for just fancy. Just the right one needed as per the design.\n\nHere follows the code piece. I am trying out this new approach where I add comments in order to explain what a piece of code does or why does it need to be there. ^\\_^\n\n```html\n<div>\n  <!-- Yes, the label should follow the input and id/name is must,\n   in order to associate the label to the input -->\n  <input type=\"checkbox\" name=\"customCheckbox\" id=\"customCheckbox\" />\n  <label for=\"customCheckbox\">Custom Checkbox</label>\n</div>\n```\n\nHere comes the fun part of CSS only!\n\n```css\n/* First hide the default browser's boring style. */\ninput[type='checkbox'] {\n  opacity: 0;\n  cursor: pointer;\n  height: 0;\n  width: 0;\n}\n\n/* Makes the label clickable and also not selectable.*/\nlabel {\n  cursor: pointer;\n  position: relative;\n  margin-left: 15px;\n  user-select: none;\n}\n\n/* Creates the box for our check mark. */\nlabel::before {\n  content: '';\n  position: absolute;\n  top: 1px;\n  left: -17px;\n  width: 14px;\n  height: 14px;\n  border-radius: 2px;\n  border: solid 1px rgb(25, 209, 25);\n}\n\n/* Here comes the checkmark. */\nlabel::after {\n  content: '';\n  position: absolute;\n  left: -14px;\n  top: 5px;\n  display: inline-block;\n  width: 10px;\n  height: 4px;\n  border-left: 1px solid;\n  border-bottom: 1px solid;\n  border-color: rgb(22, 43, 230);\n  transform: rotate(-45deg);\n}\n\n/* Makes sure the tick is not displayed by default */\ninput[type='checkbox'] + label:after {\n  content: none;\n}\n\n/* But, only when user checks the box */\ninput[type='checkbox']:checked + label:after {\n  content: '';\n}\n\n/* Makes ease of user interaction by addressing the focus state */\ninput[type='checkbox']:focus + label::before {\n  box-shadow: 0 0 4px 0 rgb(25, 209, 25);\n}\n```\n\n> **Tip:** As you can see, I just used the general style property. This works fine in chrome. I strongly advice to use CSS preprocessors like [`SASS`](https://sass-lang.com/) so that you do not need to worry about browser specific property prefixes such as `-webkit-` for chrome. \\O/\n\n<center>\n**Live Demo:**\n\nhttps://custom-checkbox-css-only.netlify.com/\n\n**Sneak Peek**\n\n![Custom Checkbox - CSS only!](./custom-checkbox-css-only.png 'Custom Checkbox - CSS only!')\n\n</center>\n","slug":"How-to-create-a-custom-checkbox-with-just-CSS","published":1,"updated":"2019-09-02T17:02:00.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6oa001lryi0jmxq57jo","content":"<p>Today, I had to create a custom solution for a design requirement. A custom checkbox! It was fun doing it of course and I learned bit more about CSS.</p>\n<p>However, I realized that it took me more time to track down the perfect custom solution that was need for me than the complexity of the solution itself. I did not want anything that will make my style sheets more messier and also not for just fancy. Just the right one needed as per the design.</p>\n<p>Here follows the code piece. I am trying out this new approach where I add comments in order to explain what a piece of code does or why does it need to be there. ^_^</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- Yes, the label should follow the input and id/name is must,</span></span><br><span class=\"line\"><span class=\"comment\">   in order to associate the label to the input --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"customCheckbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"customCheckbox\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"customCheckbox\"</span>&gt;</span>Custom Checkbox<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Here comes the fun part of CSS only!</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* First hide the default browser's boring style. */</span></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='checkbox']</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Makes the label clickable and also not selectable.*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">label</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">user-select</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Creates the box for our check mark. */</span></span><br><span class=\"line\"><span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: -<span class=\"number\">17px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> <span class=\"built_in\">rgb</span>(25, 209, 25);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Here comes the checkmark. */</span></span><br><span class=\"line\"><span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: -<span class=\"number\">14px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: <span class=\"built_in\">rgb</span>(22, 43, 230);</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(-45deg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Makes sure the tick is not displayed by default */</span></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='checkbox']</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* But, only when user checks the box */</span></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='checkbox']</span><span class=\"selector-pseudo\">:checked</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Makes ease of user interaction by addressing the focus state */</span></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='checkbox']</span><span class=\"selector-pseudo\">:focus</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">4px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgb</span>(25, 209, 25);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> As you can see, I just used the general style property. This works fine in chrome. I strongly advice to use CSS preprocessors like <a href=\"https://sass-lang.com/\" target=\"_blank\" rel=\"noopener\"><code>SASS</code></a> so that you do not need to worry about browser specific property prefixes such as <code>-webkit-</code> for chrome. \\O/</p>\n</blockquote>\n<center><br><strong>Live Demo:</strong><br><br><a href=\"https://custom-checkbox-css-only.netlify.com/\" target=\"_blank\" rel=\"noopener\">https://custom-checkbox-css-only.netlify.com/</a><br><br><strong>Sneak Peek</strong><br><br><img src=\"./custom-checkbox-css-only.png\" alt=\"Custom Checkbox - CSS only!\" title=\"Custom Checkbox - CSS only!\"><br><br></center>\n","site":{"data":{}},"excerpt":"","more":"<p>Today, I had to create a custom solution for a design requirement. A custom checkbox! It was fun doing it of course and I learned bit more about CSS.</p>\n<p>However, I realized that it took me more time to track down the perfect custom solution that was need for me than the complexity of the solution itself. I did not want anything that will make my style sheets more messier and also not for just fancy. Just the right one needed as per the design.</p>\n<p>Here follows the code piece. I am trying out this new approach where I add comments in order to explain what a piece of code does or why does it need to be there. ^_^</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- Yes, the label should follow the input and id/name is must,</span></span><br><span class=\"line\"><span class=\"comment\">   in order to associate the label to the input --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"customCheckbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"customCheckbox\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"customCheckbox\"</span>&gt;</span>Custom Checkbox<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Here comes the fun part of CSS only!</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* First hide the default browser's boring style. */</span></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='checkbox']</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Makes the label clickable and also not selectable.*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">label</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">user-select</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Creates the box for our check mark. */</span></span><br><span class=\"line\"><span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: -<span class=\"number\">17px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> <span class=\"built_in\">rgb</span>(25, 209, 25);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Here comes the checkmark. */</span></span><br><span class=\"line\"><span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: -<span class=\"number\">14px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: <span class=\"built_in\">rgb</span>(22, 43, 230);</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(-45deg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Makes sure the tick is not displayed by default */</span></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='checkbox']</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* But, only when user checks the box */</span></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='checkbox']</span><span class=\"selector-pseudo\">:checked</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Makes ease of user interaction by addressing the focus state */</span></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='checkbox']</span><span class=\"selector-pseudo\">:focus</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">4px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgb</span>(25, 209, 25);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> As you can see, I just used the general style property. This works fine in chrome. I strongly advice to use CSS preprocessors like <a href=\"https://sass-lang.com/\" target=\"_blank\" rel=\"noopener\"><code>SASS</code></a> so that you do not need to worry about browser specific property prefixes such as <code>-webkit-</code> for chrome. \\O/</p>\n</blockquote>\n<center><br><strong>Live Demo:</strong><br><br><a href=\"https://custom-checkbox-css-only.netlify.com/\" target=\"_blank\" rel=\"noopener\">https://custom-checkbox-css-only.netlify.com/</a><br><br><strong>Sneak Peek</strong><br><br><img src=\"./custom-checkbox-css-only.png\" alt=\"Custom Checkbox - CSS only!\" title=\"Custom Checkbox - CSS only!\"><br><br></center>\n"},{"title":"How to create users and groups in Linux from the command line","icon":"fab fa-linux","date":"2019-03-23T22:46:49.000Z","_content":"\n\nHere's a quick guide to adding users and groups, and then how to add users to groups, all from the command line on the Linux platform.\n\nI want to walk you through the process of:\n\n - [Creating users](#Creating-users)\n - [Creating groups](#Creating-groups)\n - [Adding users to groups](#Adding-users-to-groups)\n\nLet's jump in!\n\n## Creating users\n\nFor this, we will be making use of the `useradd` command. This command is pretty flexible and allows you to create users that can login or even users that cannot login (in the case of creating a user for a software installation).\n\nThe basic syntax of the command is:\n\n```\n    $ useradd [options] <username>\n```\n\nSay, you want to create the user *ashokma* such that he has a home directory and can log in. If you were to issue the command:\n\n```\n    $ sudo useradd ashokma\n```\nThe user would be added, without a home directory and can not log in.\n\n> **From The Manual:** When invoked without the -D option, the useradd command creates a new user account using the values specified on the command line plus the default values from the system.\n\n```\n    $ sudo useradd -m ashokma\n```\n\nThe above command would create the user and also create the user's home directory to match the username. So if you looked in the */home* directory, you would now see *ashokma*.\n\nBut what about the *password*? You can do this in two ways simply. If you've already created the user, you could issue the command:\n\n```\n    $ sudo passwd ashokma\n\n    Enter new UNIX password: \n    Retype new UNIX password: \n    passwd: password updated successfully\n```\nYes, it is same you set your password or reset it for that matter.\n\nIf you want to do this all in a single step, that command would look like this:\n\n```\n    $ sudo useradd -m ashokma -p De_Tenken\n```\n\n> **Tip:** You can remove a user and his home directory using the following command:\n> `$ sudo userdel -r ashokma`\n\nIf you need to create a user that has no home directory and is locked out from logging in, you can do this with the the following commands:\n\n```\n    $ sudo useradd -M ashokma \n    $ ​sudo usermod -L ashokma\n```\nThe first command creates the user without a home directory and the second command locks the user out of logging in.\n\n## Creating groups\n\nIt's time to create a group. Let's create the group *ashkeys*. To do this, you would issue the command:\n\n```\n    $ sudo groupadd ashkeys\n```\n\n> **Tip:** You can delete a group using the following command:\n> `$ sudo groupdel ashkeys`\n\n## Adding users to groups\n\nWe want to add our new user, *ashokma*, to the group *ashkeys*. For this we will take advantage of the `usermod` command. This command is quite simple to use.\n\n```\n    $ sudo usermod -a -G ashkeys ashokma\n```\n\nThe `-a` option tells `usermod` we are appending and the `-G` option tells usermod we are appending to the group name that follows the option.\n\nTo find out which users are already a member of a group, you can do the following command:\n\n```\n    $ grep ashokma /etc/group\n    \n    ashkeys:x:1001:ashokma\n```\n","source":"_posts/How-to-create-users-and-groups-in-Linux-from-the-command-line-2019-03-23.md","raw":"---\ntitle: How to create users and groups in Linux from the command line\ntags:\n  - Tutorial\n  - How To\n  - Pop!_OS\n  - Linux\n  - Terminal Usage\nicon: fab fa-linux\ndate: 2019-03-23 23:46:49\n---\n\n\nHere's a quick guide to adding users and groups, and then how to add users to groups, all from the command line on the Linux platform.\n\nI want to walk you through the process of:\n\n - [Creating users](#Creating-users)\n - [Creating groups](#Creating-groups)\n - [Adding users to groups](#Adding-users-to-groups)\n\nLet's jump in!\n\n## Creating users\n\nFor this, we will be making use of the `useradd` command. This command is pretty flexible and allows you to create users that can login or even users that cannot login (in the case of creating a user for a software installation).\n\nThe basic syntax of the command is:\n\n```\n    $ useradd [options] <username>\n```\n\nSay, you want to create the user *ashokma* such that he has a home directory and can log in. If you were to issue the command:\n\n```\n    $ sudo useradd ashokma\n```\nThe user would be added, without a home directory and can not log in.\n\n> **From The Manual:** When invoked without the -D option, the useradd command creates a new user account using the values specified on the command line plus the default values from the system.\n\n```\n    $ sudo useradd -m ashokma\n```\n\nThe above command would create the user and also create the user's home directory to match the username. So if you looked in the */home* directory, you would now see *ashokma*.\n\nBut what about the *password*? You can do this in two ways simply. If you've already created the user, you could issue the command:\n\n```\n    $ sudo passwd ashokma\n\n    Enter new UNIX password: \n    Retype new UNIX password: \n    passwd: password updated successfully\n```\nYes, it is same you set your password or reset it for that matter.\n\nIf you want to do this all in a single step, that command would look like this:\n\n```\n    $ sudo useradd -m ashokma -p De_Tenken\n```\n\n> **Tip:** You can remove a user and his home directory using the following command:\n> `$ sudo userdel -r ashokma`\n\nIf you need to create a user that has no home directory and is locked out from logging in, you can do this with the the following commands:\n\n```\n    $ sudo useradd -M ashokma \n    $ ​sudo usermod -L ashokma\n```\nThe first command creates the user without a home directory and the second command locks the user out of logging in.\n\n## Creating groups\n\nIt's time to create a group. Let's create the group *ashkeys*. To do this, you would issue the command:\n\n```\n    $ sudo groupadd ashkeys\n```\n\n> **Tip:** You can delete a group using the following command:\n> `$ sudo groupdel ashkeys`\n\n## Adding users to groups\n\nWe want to add our new user, *ashokma*, to the group *ashkeys*. For this we will take advantage of the `usermod` command. This command is quite simple to use.\n\n```\n    $ sudo usermod -a -G ashkeys ashokma\n```\n\nThe `-a` option tells `usermod` we are appending and the `-G` option tells usermod we are appending to the group name that follows the option.\n\nTo find out which users are already a member of a group, you can do the following command:\n\n```\n    $ grep ashokma /etc/group\n    \n    ashkeys:x:1001:ashokma\n```\n","slug":"How-to-create-users-and-groups-in-Linux-from-the-command-line","published":1,"updated":"2019-03-23T22:46:49.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6oc001nryi09dpcr96g","content":"<p>Here’s a quick guide to adding users and groups, and then how to add users to groups, all from the command line on the Linux platform.</p>\n<p>I want to walk you through the process of:</p>\n<ul>\n<li><a href=\"#Creating-users\">Creating users</a></li>\n<li><a href=\"#Creating-groups\">Creating groups</a></li>\n<li><a href=\"#Adding-users-to-groups\">Adding users to groups</a></li>\n</ul>\n<p>Let’s jump in!</p>\n<h2 id=\"Creating-users\"><a href=\"#Creating-users\" class=\"headerlink\" title=\"Creating users\"></a>Creating users</h2><p>For this, we will be making use of the <code>useradd</code> command. This command is pretty flexible and allows you to create users that can login or even users that cannot login (in the case of creating a user for a software installation).</p>\n<p>The basic syntax of the command is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ useradd [options] &lt;username&gt;</span><br></pre></td></tr></table></figure>\n<p>Say, you want to create the user <em>ashokma</em> such that he has a home directory and can log in. If you were to issue the command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo useradd ashokma</span><br></pre></td></tr></table></figure>\n<p>The user would be added, without a home directory and can not log in.</p>\n<blockquote>\n<p><strong>From The Manual:</strong> When invoked without the -D option, the useradd command creates a new user account using the values specified on the command line plus the default values from the system.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo useradd -m ashokma</span><br></pre></td></tr></table></figure>\n<p>The above command would create the user and also create the user’s home directory to match the username. So if you looked in the <em>/home</em> directory, you would now see <em>ashokma</em>.</p>\n<p>But what about the <em>password</em>? You can do this in two ways simply. If you’ve already created the user, you could issue the command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo passwd ashokma</span><br><span class=\"line\"></span><br><span class=\"line\">Enter new UNIX password: </span><br><span class=\"line\">Retype new UNIX password: </span><br><span class=\"line\">passwd: password updated successfully</span><br></pre></td></tr></table></figure>\n<p>Yes, it is same you set your password or reset it for that matter.</p>\n<p>If you want to do this all in a single step, that command would look like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo useradd -m ashokma -p De_Tenken</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> You can remove a user and his home directory using the following command:<br><code>$ sudo userdel -r ashokma</code></p>\n</blockquote>\n<p>If you need to create a user that has no home directory and is locked out from logging in, you can do this with the the following commands:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo useradd -M ashokma </span><br><span class=\"line\">$ ​sudo usermod -L ashokma</span><br></pre></td></tr></table></figure>\n<p>The first command creates the user without a home directory and the second command locks the user out of logging in.</p>\n<h2 id=\"Creating-groups\"><a href=\"#Creating-groups\" class=\"headerlink\" title=\"Creating groups\"></a>Creating groups</h2><p>It’s time to create a group. Let’s create the group <em>ashkeys</em>. To do this, you would issue the command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo groupadd ashkeys</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> You can delete a group using the following command:<br><code>$ sudo groupdel ashkeys</code></p>\n</blockquote>\n<h2 id=\"Adding-users-to-groups\"><a href=\"#Adding-users-to-groups\" class=\"headerlink\" title=\"Adding users to groups\"></a>Adding users to groups</h2><p>We want to add our new user, <em>ashokma</em>, to the group <em>ashkeys</em>. For this we will take advantage of the <code>usermod</code> command. This command is quite simple to use.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo usermod -a -G ashkeys ashokma</span><br></pre></td></tr></table></figure>\n<p>The <code>-a</code> option tells <code>usermod</code> we are appending and the <code>-G</code> option tells usermod we are appending to the group name that follows the option.</p>\n<p>To find out which users are already a member of a group, you can do the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ grep ashokma /etc/group</span><br><span class=\"line\"></span><br><span class=\"line\">ashkeys:x:1001:ashokma</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Here’s a quick guide to adding users and groups, and then how to add users to groups, all from the command line on the Linux platform.</p>\n<p>I want to walk you through the process of:</p>\n<ul>\n<li><a href=\"#Creating-users\">Creating users</a></li>\n<li><a href=\"#Creating-groups\">Creating groups</a></li>\n<li><a href=\"#Adding-users-to-groups\">Adding users to groups</a></li>\n</ul>\n<p>Let’s jump in!</p>\n<h2 id=\"Creating-users\"><a href=\"#Creating-users\" class=\"headerlink\" title=\"Creating users\"></a>Creating users</h2><p>For this, we will be making use of the <code>useradd</code> command. This command is pretty flexible and allows you to create users that can login or even users that cannot login (in the case of creating a user for a software installation).</p>\n<p>The basic syntax of the command is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ useradd [options] &lt;username&gt;</span><br></pre></td></tr></table></figure>\n<p>Say, you want to create the user <em>ashokma</em> such that he has a home directory and can log in. If you were to issue the command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo useradd ashokma</span><br></pre></td></tr></table></figure>\n<p>The user would be added, without a home directory and can not log in.</p>\n<blockquote>\n<p><strong>From The Manual:</strong> When invoked without the -D option, the useradd command creates a new user account using the values specified on the command line plus the default values from the system.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo useradd -m ashokma</span><br></pre></td></tr></table></figure>\n<p>The above command would create the user and also create the user’s home directory to match the username. So if you looked in the <em>/home</em> directory, you would now see <em>ashokma</em>.</p>\n<p>But what about the <em>password</em>? You can do this in two ways simply. If you’ve already created the user, you could issue the command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo passwd ashokma</span><br><span class=\"line\"></span><br><span class=\"line\">Enter new UNIX password: </span><br><span class=\"line\">Retype new UNIX password: </span><br><span class=\"line\">passwd: password updated successfully</span><br></pre></td></tr></table></figure>\n<p>Yes, it is same you set your password or reset it for that matter.</p>\n<p>If you want to do this all in a single step, that command would look like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo useradd -m ashokma -p De_Tenken</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> You can remove a user and his home directory using the following command:<br><code>$ sudo userdel -r ashokma</code></p>\n</blockquote>\n<p>If you need to create a user that has no home directory and is locked out from logging in, you can do this with the the following commands:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo useradd -M ashokma </span><br><span class=\"line\">$ ​sudo usermod -L ashokma</span><br></pre></td></tr></table></figure>\n<p>The first command creates the user without a home directory and the second command locks the user out of logging in.</p>\n<h2 id=\"Creating-groups\"><a href=\"#Creating-groups\" class=\"headerlink\" title=\"Creating groups\"></a>Creating groups</h2><p>It’s time to create a group. Let’s create the group <em>ashkeys</em>. To do this, you would issue the command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo groupadd ashkeys</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> You can delete a group using the following command:<br><code>$ sudo groupdel ashkeys</code></p>\n</blockquote>\n<h2 id=\"Adding-users-to-groups\"><a href=\"#Adding-users-to-groups\" class=\"headerlink\" title=\"Adding users to groups\"></a>Adding users to groups</h2><p>We want to add our new user, <em>ashokma</em>, to the group <em>ashkeys</em>. For this we will take advantage of the <code>usermod</code> command. This command is quite simple to use.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo usermod -a -G ashkeys ashokma</span><br></pre></td></tr></table></figure>\n<p>The <code>-a</code> option tells <code>usermod</code> we are appending and the <code>-G</code> option tells usermod we are appending to the group name that follows the option.</p>\n<p>To find out which users are already a member of a group, you can do the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ grep ashokma /etc/group</span><br><span class=\"line\"></span><br><span class=\"line\">ashkeys:x:1001:ashokma</span><br></pre></td></tr></table></figure>\n"},{"title":"How to debug JavaScript effectively","icon":"fab fa-js-square","date":"2019-09-30T20:19:59.000Z","_content":"\n\nI work with the frontend of the application more than the backend as many of us nowadays. So, it helps to know the better way of debugging in JavaScript, not only to increase the productivity but also to keeping ourselves from getting tired of debugging. Let's see few of the most frequently used ones.\n\n## `console.log`\n\nMany of us know this but only few of us know how to effectively use `console.log`. By default it logs the `toString()` representation of what we want to log.\n\n```js\nconst msg = 'Welcome to AshKeys!';\n\nconsole.log(msg); // Welcome to AshKeys!\n```\n\nHow many times many of us had to check the file it was logged from in the browser console. >\\_O Because, we log many things and it is hard to know which one is being logged here. That is okay! Mostly, we do something like this to keep track.\n\n```js\nconst msg = 'Welcome to AshKeys!';\n\nconsole.log('msg -> ' + msg); // msg -> Welcome to AshKeys!\n```\n\n> **Tip:** Prefer string template literals `` ` ` `` over string concatenation as follows\n> `` console.log(`msg -> ${msg}`) ``\n\nThis is not bad, is it? But, there is again a problem when we need to log more things on the way. There comes a situation where we spend some considerable amount of time thinking about what to concatenate with. >\\_<\n\nIn those cases, we can quickly do the following:\n\n```js\nconst msg = 'Welcome to AshKeys!';\n\nconsole.log({ msg }); // { msg: 'Welcome to AshKeys!' }\n```\n\nYes, we just make a placeholder object with same key as our named variable. It makes sense as we spent already some effort in giving a variable meaningful name before wanting to log it. ^\\_^ Thus, it makes it easy to keep track.\n\n> **Tip:** We can log more than one in the same `console.log` call like `console.log({msg}, {ashkeys})`\n\n## `console.table`\n\nIt is useful if we are operating around table-like data. Sometimes, it does not even have to be a table data. A plain object with property names too. Let's take a look at those two examples.\n\n```js\nconst employee = {\n  name: 'Ashok M A',\n  role: 'Full Stack Web Developer',\n  drinks: 'coffee'\n};\n\nconsole.table(employee);\n\n┌─────────┬────────────────────────────┐\n│ (index) │           Values           │\n├─────────┼────────────────────────────┤\n│  name   │        'Ashok M A'         │\n│  role   │ 'Full Stack Web Developer' │\n│ drinks  │          'coffee'          │\n└─────────┴────────────────────────────┘\n```\n\nFor a plain object, it logs the key-value pair in tabular forms. But, for an array of objects:\n\n```js\nconst employees = [\n  {\n    name: 'Ashok M A',\n    role: 'Full Stack Web Developer',\n    drinks: 'coffee'\n  },\n  {\n    name: 'AshKeys',\n    role: 'Just Developer',\n    drinks: 'caffeine'\n  }\n];\n\nconsole.table(employees);\n\n┌─────────┬─────────────┬────────────────────────────┬────────────┐\n│ (index) │    name     │            role            │   drinks   │\n├─────────┼─────────────┼────────────────────────────┼────────────┤\n│    0    │ 'Ashok M A' │ 'Full Stack Web Developer' │  'coffee'  │\n│    1    │  'AshKeys'  │      'Just Developer'      │ 'caffeine' │\n└─────────┴─────────────┴────────────────────────────┴────────────┘\n```\n\nThis makes it easy to quickly glance and verify instead of expanding the logged object or array and waste some time on clicking. Wouldn't you agree? \\O/\n\n> **Tip:** Remember this, like any other programming/scripting languages, JavaScript also has options to log messages with respect to their log levels (`console.error`, `console.warn`, `console.info`, `console.debug`, `console.trace`). We can do the same things we did with `console.log`.\n","source":"_posts/How-to-debug-JavaScript-effectively-2019-09-30.md","raw":"---\ntitle: How to debug JavaScript effectively\ntags:\n  - How To\n  - Debug\n  - JS\nicon: fab fa-js-square\ndate: 2019-09-30 22:19:59\n---\n\n\nI work with the frontend of the application more than the backend as many of us nowadays. So, it helps to know the better way of debugging in JavaScript, not only to increase the productivity but also to keeping ourselves from getting tired of debugging. Let's see few of the most frequently used ones.\n\n## `console.log`\n\nMany of us know this but only few of us know how to effectively use `console.log`. By default it logs the `toString()` representation of what we want to log.\n\n```js\nconst msg = 'Welcome to AshKeys!';\n\nconsole.log(msg); // Welcome to AshKeys!\n```\n\nHow many times many of us had to check the file it was logged from in the browser console. >\\_O Because, we log many things and it is hard to know which one is being logged here. That is okay! Mostly, we do something like this to keep track.\n\n```js\nconst msg = 'Welcome to AshKeys!';\n\nconsole.log('msg -> ' + msg); // msg -> Welcome to AshKeys!\n```\n\n> **Tip:** Prefer string template literals `` ` ` `` over string concatenation as follows\n> `` console.log(`msg -> ${msg}`) ``\n\nThis is not bad, is it? But, there is again a problem when we need to log more things on the way. There comes a situation where we spend some considerable amount of time thinking about what to concatenate with. >\\_<\n\nIn those cases, we can quickly do the following:\n\n```js\nconst msg = 'Welcome to AshKeys!';\n\nconsole.log({ msg }); // { msg: 'Welcome to AshKeys!' }\n```\n\nYes, we just make a placeholder object with same key as our named variable. It makes sense as we spent already some effort in giving a variable meaningful name before wanting to log it. ^\\_^ Thus, it makes it easy to keep track.\n\n> **Tip:** We can log more than one in the same `console.log` call like `console.log({msg}, {ashkeys})`\n\n## `console.table`\n\nIt is useful if we are operating around table-like data. Sometimes, it does not even have to be a table data. A plain object with property names too. Let's take a look at those two examples.\n\n```js\nconst employee = {\n  name: 'Ashok M A',\n  role: 'Full Stack Web Developer',\n  drinks: 'coffee'\n};\n\nconsole.table(employee);\n\n┌─────────┬────────────────────────────┐\n│ (index) │           Values           │\n├─────────┼────────────────────────────┤\n│  name   │        'Ashok M A'         │\n│  role   │ 'Full Stack Web Developer' │\n│ drinks  │          'coffee'          │\n└─────────┴────────────────────────────┘\n```\n\nFor a plain object, it logs the key-value pair in tabular forms. But, for an array of objects:\n\n```js\nconst employees = [\n  {\n    name: 'Ashok M A',\n    role: 'Full Stack Web Developer',\n    drinks: 'coffee'\n  },\n  {\n    name: 'AshKeys',\n    role: 'Just Developer',\n    drinks: 'caffeine'\n  }\n];\n\nconsole.table(employees);\n\n┌─────────┬─────────────┬────────────────────────────┬────────────┐\n│ (index) │    name     │            role            │   drinks   │\n├─────────┼─────────────┼────────────────────────────┼────────────┤\n│    0    │ 'Ashok M A' │ 'Full Stack Web Developer' │  'coffee'  │\n│    1    │  'AshKeys'  │      'Just Developer'      │ 'caffeine' │\n└─────────┴─────────────┴────────────────────────────┴────────────┘\n```\n\nThis makes it easy to quickly glance and verify instead of expanding the logged object or array and waste some time on clicking. Wouldn't you agree? \\O/\n\n> **Tip:** Remember this, like any other programming/scripting languages, JavaScript also has options to log messages with respect to their log levels (`console.error`, `console.warn`, `console.info`, `console.debug`, `console.trace`). We can do the same things we did with `console.log`.\n","slug":"How-to-debug-JavaScript-effectively","published":1,"updated":"2019-09-30T20:19:59.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6oe001qryi0xk5mn78b","content":"<p>I work with the frontend of the application more than the backend as many of us nowadays. So, it helps to know the better way of debugging in JavaScript, not only to increase the productivity but also to keeping ourselves from getting tired of debugging. Let’s see few of the most frequently used ones.</p>\n<h2 id=\"console-log\"><a href=\"#console-log\" class=\"headerlink\" title=\"console.log\"></a><code>console.log</code></h2><p>Many of us know this but only few of us know how to effectively use <code>console.log</code>. By default it logs the <code>toString()</code> representation of what we want to log.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> msg = <span class=\"string\">'Welcome to AshKeys!'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(msg); <span class=\"comment\">// Welcome to AshKeys!</span></span><br></pre></td></tr></table></figure>\n<p>How many times many of us had to check the file it was logged from in the browser console. &gt;_O Because, we log many things and it is hard to know which one is being logged here. That is okay! Mostly, we do something like this to keep track.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> msg = <span class=\"string\">'Welcome to AshKeys!'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'msg -&gt; '</span> + msg); <span class=\"comment\">// msg -&gt; Welcome to AshKeys!</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> Prefer string template literals <code>` `</code> over string concatenation as follows<br><code>console.log(`msg -&gt; ${msg}`)</code></p>\n</blockquote>\n<p>This is not bad, is it? But, there is again a problem when we need to log more things on the way. There comes a situation where we spend some considerable amount of time thinking about what to concatenate with. &gt;_&lt;</p>\n<p>In those cases, we can quickly do the following:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> msg = <span class=\"string\">'Welcome to AshKeys!'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123; msg &#125;); <span class=\"comment\">// &#123; msg: 'Welcome to AshKeys!' &#125;</span></span><br></pre></td></tr></table></figure>\n<p>Yes, we just make a placeholder object with same key as our named variable. It makes sense as we spent already some effort in giving a variable meaningful name before wanting to log it. ^_^ Thus, it makes it easy to keep track.</p>\n<blockquote>\n<p><strong>Tip:</strong> We can log more than one in the same <code>console.log</code> call like <code>console.log({msg}, {ashkeys})</code></p>\n</blockquote>\n<h2 id=\"console-table\"><a href=\"#console-table\" class=\"headerlink\" title=\"console.table\"></a><code>console.table</code></h2><p>It is useful if we are operating around table-like data. Sometimes, it does not even have to be a table data. A plain object with property names too. Let’s take a look at those two examples.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> employee = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Ashok M A'</span>,</span><br><span class=\"line\">  role: <span class=\"string\">'Full Stack Web Developer'</span>,</span><br><span class=\"line\">  drinks: <span class=\"string\">'coffee'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(employee);</span><br><span class=\"line\"></span><br><span class=\"line\">┌─────────┬────────────────────────────┐</span><br><span class=\"line\">│ (index) │           Values           │</span><br><span class=\"line\">├─────────┼────────────────────────────┤</span><br><span class=\"line\">│  name   │        <span class=\"string\">'Ashok M A'</span>         │</span><br><span class=\"line\">│  role   │ <span class=\"string\">'Full Stack Web Developer'</span> │</span><br><span class=\"line\">│ drinks  │          <span class=\"string\">'coffee'</span>          │</span><br><span class=\"line\">└─────────┴────────────────────────────┘</span><br></pre></td></tr></table></figure>\n<p>For a plain object, it logs the key-value pair in tabular forms. But, for an array of objects:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> employees = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Ashok M A'</span>,</span><br><span class=\"line\">    role: <span class=\"string\">'Full Stack Web Developer'</span>,</span><br><span class=\"line\">    drinks: <span class=\"string\">'coffee'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'AshKeys'</span>,</span><br><span class=\"line\">    role: <span class=\"string\">'Just Developer'</span>,</span><br><span class=\"line\">    drinks: <span class=\"string\">'caffeine'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(employees);</span><br><span class=\"line\"></span><br><span class=\"line\">┌─────────┬─────────────┬────────────────────────────┬────────────┐</span><br><span class=\"line\">│ (index) │    name     │            role            │   drinks   │</span><br><span class=\"line\">├─────────┼─────────────┼────────────────────────────┼────────────┤</span><br><span class=\"line\">│    <span class=\"number\">0</span>    │ <span class=\"string\">'Ashok M A'</span> │ <span class=\"string\">'Full Stack Web Developer'</span> │  <span class=\"string\">'coffee'</span>  │</span><br><span class=\"line\">│    <span class=\"number\">1</span>    │  <span class=\"string\">'AshKeys'</span>  │      <span class=\"string\">'Just Developer'</span>      │ <span class=\"string\">'caffeine'</span> │</span><br><span class=\"line\">└─────────┴─────────────┴────────────────────────────┴────────────┘</span><br></pre></td></tr></table></figure>\n<p>This makes it easy to quickly glance and verify instead of expanding the logged object or array and waste some time on clicking. Wouldn’t you agree? \\O/</p>\n<blockquote>\n<p><strong>Tip:</strong> Remember this, like any other programming/scripting languages, JavaScript also has options to log messages with respect to their log levels (<code>console.error</code>, <code>console.warn</code>, <code>console.info</code>, <code>console.debug</code>, <code>console.trace</code>). We can do the same things we did with <code>console.log</code>.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>I work with the frontend of the application more than the backend as many of us nowadays. So, it helps to know the better way of debugging in JavaScript, not only to increase the productivity but also to keeping ourselves from getting tired of debugging. Let’s see few of the most frequently used ones.</p>\n<h2 id=\"console-log\"><a href=\"#console-log\" class=\"headerlink\" title=\"console.log\"></a><code>console.log</code></h2><p>Many of us know this but only few of us know how to effectively use <code>console.log</code>. By default it logs the <code>toString()</code> representation of what we want to log.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> msg = <span class=\"string\">'Welcome to AshKeys!'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(msg); <span class=\"comment\">// Welcome to AshKeys!</span></span><br></pre></td></tr></table></figure>\n<p>How many times many of us had to check the file it was logged from in the browser console. &gt;_O Because, we log many things and it is hard to know which one is being logged here. That is okay! Mostly, we do something like this to keep track.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> msg = <span class=\"string\">'Welcome to AshKeys!'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'msg -&gt; '</span> + msg); <span class=\"comment\">// msg -&gt; Welcome to AshKeys!</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> Prefer string template literals <code>` `</code> over string concatenation as follows<br><code>console.log(`msg -&gt; ${msg}`)</code></p>\n</blockquote>\n<p>This is not bad, is it? But, there is again a problem when we need to log more things on the way. There comes a situation where we spend some considerable amount of time thinking about what to concatenate with. &gt;_&lt;</p>\n<p>In those cases, we can quickly do the following:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> msg = <span class=\"string\">'Welcome to AshKeys!'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123; msg &#125;); <span class=\"comment\">// &#123; msg: 'Welcome to AshKeys!' &#125;</span></span><br></pre></td></tr></table></figure>\n<p>Yes, we just make a placeholder object with same key as our named variable. It makes sense as we spent already some effort in giving a variable meaningful name before wanting to log it. ^_^ Thus, it makes it easy to keep track.</p>\n<blockquote>\n<p><strong>Tip:</strong> We can log more than one in the same <code>console.log</code> call like <code>console.log({msg}, {ashkeys})</code></p>\n</blockquote>\n<h2 id=\"console-table\"><a href=\"#console-table\" class=\"headerlink\" title=\"console.table\"></a><code>console.table</code></h2><p>It is useful if we are operating around table-like data. Sometimes, it does not even have to be a table data. A plain object with property names too. Let’s take a look at those two examples.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> employee = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Ashok M A'</span>,</span><br><span class=\"line\">  role: <span class=\"string\">'Full Stack Web Developer'</span>,</span><br><span class=\"line\">  drinks: <span class=\"string\">'coffee'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(employee);</span><br><span class=\"line\"></span><br><span class=\"line\">┌─────────┬────────────────────────────┐</span><br><span class=\"line\">│ (index) │           Values           │</span><br><span class=\"line\">├─────────┼────────────────────────────┤</span><br><span class=\"line\">│  name   │        <span class=\"string\">'Ashok M A'</span>         │</span><br><span class=\"line\">│  role   │ <span class=\"string\">'Full Stack Web Developer'</span> │</span><br><span class=\"line\">│ drinks  │          <span class=\"string\">'coffee'</span>          │</span><br><span class=\"line\">└─────────┴────────────────────────────┘</span><br></pre></td></tr></table></figure>\n<p>For a plain object, it logs the key-value pair in tabular forms. But, for an array of objects:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> employees = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Ashok M A'</span>,</span><br><span class=\"line\">    role: <span class=\"string\">'Full Stack Web Developer'</span>,</span><br><span class=\"line\">    drinks: <span class=\"string\">'coffee'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'AshKeys'</span>,</span><br><span class=\"line\">    role: <span class=\"string\">'Just Developer'</span>,</span><br><span class=\"line\">    drinks: <span class=\"string\">'caffeine'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(employees);</span><br><span class=\"line\"></span><br><span class=\"line\">┌─────────┬─────────────┬────────────────────────────┬────────────┐</span><br><span class=\"line\">│ (index) │    name     │            role            │   drinks   │</span><br><span class=\"line\">├─────────┼─────────────┼────────────────────────────┼────────────┤</span><br><span class=\"line\">│    <span class=\"number\">0</span>    │ <span class=\"string\">'Ashok M A'</span> │ <span class=\"string\">'Full Stack Web Developer'</span> │  <span class=\"string\">'coffee'</span>  │</span><br><span class=\"line\">│    <span class=\"number\">1</span>    │  <span class=\"string\">'AshKeys'</span>  │      <span class=\"string\">'Just Developer'</span>      │ <span class=\"string\">'caffeine'</span> │</span><br><span class=\"line\">└─────────┴─────────────┴────────────────────────────┴────────────┘</span><br></pre></td></tr></table></figure>\n<p>This makes it easy to quickly glance and verify instead of expanding the logged object or array and waste some time on clicking. Wouldn’t you agree? \\O/</p>\n<blockquote>\n<p><strong>Tip:</strong> Remember this, like any other programming/scripting languages, JavaScript also has options to log messages with respect to their log levels (<code>console.error</code>, <code>console.warn</code>, <code>console.info</code>, <code>console.debug</code>, <code>console.trace</code>). We can do the same things we did with <code>console.log</code>.</p>\n</blockquote>\n"},{"title":"How to create your own startup script in linux","icon":"fab fa-linux","date":"2019-07-17T20:13:20.000Z","_content":"\nEveryday, as soon as I logged into my linux machine, in order to start working, I had to open up some IDEs and run `docker` containers.\n\nI decided to automate this as part of my startup process. It is so easy with linux. ^\\_^\n\nIn this [post][1], we talked about adding the environment variables by updating the `.bashrc` startup script. It can do more than that!\n\nFirst, list out the things you do repeatedly during the startup of your machine and add those commands or startup steps at the end of `.bashrc` file as follows:\n\nBelow are the steps I was repeating everyday. >\\_O I know it is not much but we are developers! We should be lazy to do repeated stuffs and automate them instead \\O/\n\n```bash\n# Starting the database\ndocker start postgres\n\n# Launch the VSCode for FE Dev.\ncode /home/ashkeys/ashokma.com\n\n# Launch IntelliJ IDE for BE Dev.\n/home/ashkeys/apps/idea-IC-183.5912.21/bin/idea.sh &\n```\n\nTo see it happening rightaway just [load the configs][2].\n\n```bash\n$ source /home/ashkeys/.bashrc\n```\n\n> **Tip:** It is not just about launching IDEs and such. We can also `git pull` any changes to keep our code updated before we start working or make the linux `clean build` our app in the meantime we get our coffee ^\\_^\n\n> **Caution:** Do remember that the script will be executed for each shell session that is for each Terminal launch as it loads the profile per launch. /O\\\\/O\\\n\n[1]: /2019/07/03/How-to-add-environment-or-path-variables-in-linux/#Add-to-path-variable\n[2]: /2019/07/03/How-to-add-environment-or-path-variables-in-linux/#Load-the-configs\n","source":"_posts/How-to-create-your-own-startup-script-in-linux-2019-07-17.md","raw":"---\ntitle: How to create your own startup script in linux\ntags:\n  - How To\n  - Bash\n  - Shell\n  - Linux\n  - Pop!_OS\nicon: fab fa-linux\ndate: 2019-07-17 22:13:20\n---\n\nEveryday, as soon as I logged into my linux machine, in order to start working, I had to open up some IDEs and run `docker` containers.\n\nI decided to automate this as part of my startup process. It is so easy with linux. ^\\_^\n\nIn this [post][1], we talked about adding the environment variables by updating the `.bashrc` startup script. It can do more than that!\n\nFirst, list out the things you do repeatedly during the startup of your machine and add those commands or startup steps at the end of `.bashrc` file as follows:\n\nBelow are the steps I was repeating everyday. >\\_O I know it is not much but we are developers! We should be lazy to do repeated stuffs and automate them instead \\O/\n\n```bash\n# Starting the database\ndocker start postgres\n\n# Launch the VSCode for FE Dev.\ncode /home/ashkeys/ashokma.com\n\n# Launch IntelliJ IDE for BE Dev.\n/home/ashkeys/apps/idea-IC-183.5912.21/bin/idea.sh &\n```\n\nTo see it happening rightaway just [load the configs][2].\n\n```bash\n$ source /home/ashkeys/.bashrc\n```\n\n> **Tip:** It is not just about launching IDEs and such. We can also `git pull` any changes to keep our code updated before we start working or make the linux `clean build` our app in the meantime we get our coffee ^\\_^\n\n> **Caution:** Do remember that the script will be executed for each shell session that is for each Terminal launch as it loads the profile per launch. /O\\\\/O\\\n\n[1]: /2019/07/03/How-to-add-environment-or-path-variables-in-linux/#Add-to-path-variable\n[2]: /2019/07/03/How-to-add-environment-or-path-variables-in-linux/#Load-the-configs\n","slug":"How-to-create-your-own-startup-script-in-linux","published":1,"updated":"2019-07-21T20:08:30.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6og001sryi02yfb9ils","content":"<p>Everyday, as soon as I logged into my linux machine, in order to start working, I had to open up some IDEs and run <code>docker</code> containers.</p>\n<p>I decided to automate this as part of my startup process. It is so easy with linux. ^_^</p>\n<p>In this <a href=\"/2019/07/03/How-to-add-environment-or-path-variables-in-linux/#Add-to-path-variable\">post</a>, we talked about adding the environment variables by updating the <code>.bashrc</code> startup script. It can do more than that!</p>\n<p>First, list out the things you do repeatedly during the startup of your machine and add those commands or startup steps at the end of <code>.bashrc</code> file as follows:</p>\n<p>Below are the steps I was repeating everyday. &gt;_O I know it is not much but we are developers! We should be lazy to do repeated stuffs and automate them instead \\O/</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Starting the database</span></span><br><span class=\"line\">docker start postgres</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Launch the VSCode for FE Dev.</span></span><br><span class=\"line\">code /home/ashkeys/ashokma.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Launch IntelliJ IDE for BE Dev.</span></span><br><span class=\"line\">/home/ashkeys/apps/idea-IC-183.5912.21/bin/idea.sh &amp;</span><br></pre></td></tr></table></figure>\n<p>To see it happening rightaway just <a href=\"/2019/07/03/How-to-add-environment-or-path-variables-in-linux/#Load-the-configs\">load the configs</a>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> /home/ashkeys/.bashrc</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> It is not just about launching IDEs and such. We can also <code>git pull</code> any changes to keep our code updated before we start working or make the linux <code>clean build</code> our app in the meantime we get our coffee ^_^</p>\n</blockquote>\n<blockquote>\n<p><strong>Caution:</strong> Do remember that the script will be executed for each shell session that is for each Terminal launch as it loads the profile per launch. /O\\/O\\</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Everyday, as soon as I logged into my linux machine, in order to start working, I had to open up some IDEs and run <code>docker</code> containers.</p>\n<p>I decided to automate this as part of my startup process. It is so easy with linux. ^_^</p>\n<p>In this <a href=\"/2019/07/03/How-to-add-environment-or-path-variables-in-linux/#Add-to-path-variable\">post</a>, we talked about adding the environment variables by updating the <code>.bashrc</code> startup script. It can do more than that!</p>\n<p>First, list out the things you do repeatedly during the startup of your machine and add those commands or startup steps at the end of <code>.bashrc</code> file as follows:</p>\n<p>Below are the steps I was repeating everyday. &gt;_O I know it is not much but we are developers! We should be lazy to do repeated stuffs and automate them instead \\O/</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Starting the database</span></span><br><span class=\"line\">docker start postgres</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Launch the VSCode for FE Dev.</span></span><br><span class=\"line\">code /home/ashkeys/ashokma.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Launch IntelliJ IDE for BE Dev.</span></span><br><span class=\"line\">/home/ashkeys/apps/idea-IC-183.5912.21/bin/idea.sh &amp;</span><br></pre></td></tr></table></figure>\n<p>To see it happening rightaway just <a href=\"/2019/07/03/How-to-add-environment-or-path-variables-in-linux/#Load-the-configs\">load the configs</a>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> /home/ashkeys/.bashrc</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> It is not just about launching IDEs and such. We can also <code>git pull</code> any changes to keep our code updated before we start working or make the linux <code>clean build</code> our app in the meantime we get our coffee ^_^</p>\n</blockquote>\n<blockquote>\n<p><strong>Caution:</strong> Do remember that the script will be executed for each shell session that is for each Terminal launch as it loads the profile per launch. /O\\/O\\</p>\n</blockquote>\n"},{"title":"How to get a list of files in a directory using Bash","icon":"fas fa-terminal","date":"2019-05-23T18:46:34.000Z","_content":"\nRecently, I have been doing a lot of `shell` scripting to automate some time consuming manual processes. For instance, read configuration using `xslt` transformation stylesheets. >\\_O Though it was painful to my eyes, once done I felt bit proud of myself learning something new. (Yes, `XSLT` you go to my _Skills List_ ^\\_^)\n\nAs part of that process, I had to iterate files in a configuration folder for transformation into `.json` files. We shall come to that later. Now, let's see the shell script to list out the files in a folder.\n\n```sh\nfor f in /home/ashokma/ashkeys/config/*;\ndo\n    if [[ ! -d ${f} ]]; # Not if it is sub-directory.\n    then\n        echo    \"File Name with full path - ${f}\"\n        echo -e \"File Name with extension - $(basename ${f})\"\n    fi\ndone\n```\n\n> **Tip:** You can strip the extension away from the file using this snippet: <br/>\n>\n> `echo -e \"File Name with extension - $(basename $(echo \"$f\" | cut -f 1 -d '.'))\"`\n","source":"_posts/How-to-get-a-list-of-files-in-a-directory-using-Bash-2019-05-23.md","raw":"---\ntitle: How to get a list of files in a directory using Bash\ntags:\n  - How To\n  - Linux\n  - Bash\n  - Shell\n  - Terminal\nicon: fas fa-terminal\ndate: 2019-05-23 20:46:34\n---\n\nRecently, I have been doing a lot of `shell` scripting to automate some time consuming manual processes. For instance, read configuration using `xslt` transformation stylesheets. >\\_O Though it was painful to my eyes, once done I felt bit proud of myself learning something new. (Yes, `XSLT` you go to my _Skills List_ ^\\_^)\n\nAs part of that process, I had to iterate files in a configuration folder for transformation into `.json` files. We shall come to that later. Now, let's see the shell script to list out the files in a folder.\n\n```sh\nfor f in /home/ashokma/ashkeys/config/*;\ndo\n    if [[ ! -d ${f} ]]; # Not if it is sub-directory.\n    then\n        echo    \"File Name with full path - ${f}\"\n        echo -e \"File Name with extension - $(basename ${f})\"\n    fi\ndone\n```\n\n> **Tip:** You can strip the extension away from the file using this snippet: <br/>\n>\n> `echo -e \"File Name with extension - $(basename $(echo \"$f\" | cut -f 1 -d '.'))\"`\n","slug":"How-to-get-a-list-of-files-in-a-directory-using-Bash","published":1,"updated":"2019-05-23T19:05:21.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6oi001uryi0yv28wfwx","content":"<p>Recently, I have been doing a lot of <code>shell</code> scripting to automate some time consuming manual processes. For instance, read configuration using <code>xslt</code> transformation stylesheets. &gt;_O Though it was painful to my eyes, once done I felt bit proud of myself learning something new. (Yes, <code>XSLT</code> you go to my <em>Skills List</em> ^_^)</p>\n<p>As part of that process, I had to iterate files in a configuration folder for transformation into <code>.json</code> files. We shall come to that later. Now, let’s see the shell script to list out the files in a folder.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> /home/ashokma/ashkeys/config/*;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ ! -d <span class=\"variable\">$&#123;f&#125;</span> ]]; <span class=\"comment\"># Not if it is sub-directory.</span></span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span>    <span class=\"string\">\"File Name with full path - <span class=\"variable\">$&#123;f&#125;</span>\"</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> -e <span class=\"string\">\"File Name with extension - <span class=\"variable\">$(basename $&#123;f&#125;)</span>\"</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> You can strip the extension away from the file using this snippet: <br></p>\n<p><code>echo -e &quot;File Name with extension - $(basename $(echo &quot;$f&quot; | cut -f 1 -d &#39;.&#39;))&quot;</code></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Recently, I have been doing a lot of <code>shell</code> scripting to automate some time consuming manual processes. For instance, read configuration using <code>xslt</code> transformation stylesheets. &gt;_O Though it was painful to my eyes, once done I felt bit proud of myself learning something new. (Yes, <code>XSLT</code> you go to my <em>Skills List</em> ^_^)</p>\n<p>As part of that process, I had to iterate files in a configuration folder for transformation into <code>.json</code> files. We shall come to that later. Now, let’s see the shell script to list out the files in a folder.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> /home/ashokma/ashkeys/config/*;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ ! -d <span class=\"variable\">$&#123;f&#125;</span> ]]; <span class=\"comment\"># Not if it is sub-directory.</span></span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span>    <span class=\"string\">\"File Name with full path - <span class=\"variable\">$&#123;f&#125;</span>\"</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> -e <span class=\"string\">\"File Name with extension - <span class=\"variable\">$(basename $&#123;f&#125;)</span>\"</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> You can strip the extension away from the file using this snippet: <br></p>\n<p><code>echo -e &quot;File Name with extension - $(basename $(echo &quot;$f&quot; | cut -f 1 -d &#39;.&#39;))&quot;</code></p>\n</blockquote>\n"},{"title":"How to make terminal to always ask for password","icon":"fas fa-terminal","date":"2019-12-22T19:09:04.000Z","_content":"\n\nBy default, terminal stores the password for 15 mins to ease the user in case of continuous `sudo` activities such as installation or upgrades. In order to override these defaults, we must edit the `/etc/sudoers.tmp` as follows:\n\n```sh\n# This file MUST be edited with the 'visudo' command as root.\n#\n# Please consider adding local content in /etc/sudoers.d/ instead of\n# directly modifying this file.\n#\n# See the man page for details on how to write a sudoers file.\n#\nDefaults        env_reset,timestamp_timeout=0\n```\n\nThe `timestamp_timeout=0` means that terminal will always ask for password when we do actions with `sudo`.\n\n> **Caution:** Mind that it is a timer. So, when we place values lesser than 0 like -1, it means that the password will be asked once and never again even after reboot.\n\nAs the comment suggests, always edit the file using `sudo visudo` command. This makes sure that others do not edit the file while you are. It is safer that way! \\O/\n\n> **Tip:** `sudoers.d` is powerful when it comes to configuring user permissions down to what commands and programs one can execute and what not. O_O\n","source":"_posts/How-to-make-terminal-to-always-ask-for-password-2019-12-22.md","raw":"---\ntitle: How to make terminal to always ask for password\ntags:\n  - How To\n  - Terminal\n  - Pop!_OS\n  - Linux\nicon: fas fa-terminal\ndate: 2019-12-22 20:09:04\n---\n\n\nBy default, terminal stores the password for 15 mins to ease the user in case of continuous `sudo` activities such as installation or upgrades. In order to override these defaults, we must edit the `/etc/sudoers.tmp` as follows:\n\n```sh\n# This file MUST be edited with the 'visudo' command as root.\n#\n# Please consider adding local content in /etc/sudoers.d/ instead of\n# directly modifying this file.\n#\n# See the man page for details on how to write a sudoers file.\n#\nDefaults        env_reset,timestamp_timeout=0\n```\n\nThe `timestamp_timeout=0` means that terminal will always ask for password when we do actions with `sudo`.\n\n> **Caution:** Mind that it is a timer. So, when we place values lesser than 0 like -1, it means that the password will be asked once and never again even after reboot.\n\nAs the comment suggests, always edit the file using `sudo visudo` command. This makes sure that others do not edit the file while you are. It is safer that way! \\O/\n\n> **Tip:** `sudoers.d` is powerful when it comes to configuring user permissions down to what commands and programs one can execute and what not. O_O\n","slug":"How-to-make-terminal-to-always-ask-for-password","published":1,"updated":"2019-12-22T19:09:04.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6ok001wryi0r2dr0na8","content":"<p>By default, terminal stores the password for 15 mins to ease the user in case of continuous <code>sudo</code> activities such as installation or upgrades. In order to override these defaults, we must edit the <code>/etc/sudoers.tmp</code> as follows:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This file MUST be edited with the 'visudo' command as root.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Please consider adding local content in /etc/sudoers.d/ instead of</span></span><br><span class=\"line\"><span class=\"comment\"># directly modifying this file.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># See the man page for details on how to write a sudoers file.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">Defaults        env_reset,timestamp_timeout=0</span><br></pre></td></tr></table></figure>\n<p>The <code>timestamp_timeout=0</code> means that terminal will always ask for password when we do actions with <code>sudo</code>.</p>\n<blockquote>\n<p><strong>Caution:</strong> Mind that it is a timer. So, when we place values lesser than 0 like -1, it means that the password will be asked once and never again even after reboot.</p>\n</blockquote>\n<p>As the comment suggests, always edit the file using <code>sudo visudo</code> command. This makes sure that others do not edit the file while you are. It is safer that way! \\O/</p>\n<blockquote>\n<p><strong>Tip:</strong> <code>sudoers.d</code> is powerful when it comes to configuring user permissions down to what commands and programs one can execute and what not. O_O</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>By default, terminal stores the password for 15 mins to ease the user in case of continuous <code>sudo</code> activities such as installation or upgrades. In order to override these defaults, we must edit the <code>/etc/sudoers.tmp</code> as follows:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This file MUST be edited with the 'visudo' command as root.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Please consider adding local content in /etc/sudoers.d/ instead of</span></span><br><span class=\"line\"><span class=\"comment\"># directly modifying this file.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># See the man page for details on how to write a sudoers file.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">Defaults        env_reset,timestamp_timeout=0</span><br></pre></td></tr></table></figure>\n<p>The <code>timestamp_timeout=0</code> means that terminal will always ask for password when we do actions with <code>sudo</code>.</p>\n<blockquote>\n<p><strong>Caution:</strong> Mind that it is a timer. So, when we place values lesser than 0 like -1, it means that the password will be asked once and never again even after reboot.</p>\n</blockquote>\n<p>As the comment suggests, always edit the file using <code>sudo visudo</code> command. This makes sure that others do not edit the file while you are. It is safer that way! \\O/</p>\n<blockquote>\n<p><strong>Tip:</strong> <code>sudoers.d</code> is powerful when it comes to configuring user permissions down to what commands and programs one can execute and what not. O_O</p>\n</blockquote>\n"},{"title":"How to merge arrays in JavaScript","icon":"fab fa-js-square","date":"2019-05-19T20:54:46.000Z","_content":"\n# The `concat` method\n\nWith `concat`, we do not have to add even a single `for...in` loop. Instead, we can simply chain the `concat` method in the order we want!\n\n```javascript\nconst array1 = [1, 2, 3];\nconst array2 = [4, 5, 6];\nconst array3 = [7, 8, 9];\n\nconst mergedArray = []\n  .concat(array1)\n  .concat(array2)\n  .concat(array3);\n\nconsole.log(mergedArray); // [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n```\n\n> **Tip:** Prefer starting with empty array when chaining `concat`. In this way, it is clear that we make a new array and do not manipulate the existing ones! ^\\_^\n\n# [Spread Operator][1] (Since `ES6`)\n\nWith `ES6` it is simple now! We can merge two or more arrays in one line:\n\n```javascript\nconst array1 = [1, 2, 3];\nconst array2 = [4, 5, 6];\nconst array3 = [7, 8, 9];\n\nconst mergedArray = [...array1, ...array2, ...array3];\n\nconsole.log(mergedArray); // [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n```\n\n[1]: //developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\n","source":"_posts/How-to-merge-arrays-in-JavaScript-2019-05-19.md","raw":"---\ntitle: How to merge arrays in JavaScript\ntags:\n  - How to\n  - Arrays\n  - JS\n  - ES6\nicon: fab fa-js-square\ndate: 2019-05-19 22:54:46\n---\n\n# The `concat` method\n\nWith `concat`, we do not have to add even a single `for...in` loop. Instead, we can simply chain the `concat` method in the order we want!\n\n```javascript\nconst array1 = [1, 2, 3];\nconst array2 = [4, 5, 6];\nconst array3 = [7, 8, 9];\n\nconst mergedArray = []\n  .concat(array1)\n  .concat(array2)\n  .concat(array3);\n\nconsole.log(mergedArray); // [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n```\n\n> **Tip:** Prefer starting with empty array when chaining `concat`. In this way, it is clear that we make a new array and do not manipulate the existing ones! ^\\_^\n\n# [Spread Operator][1] (Since `ES6`)\n\nWith `ES6` it is simple now! We can merge two or more arrays in one line:\n\n```javascript\nconst array1 = [1, 2, 3];\nconst array2 = [4, 5, 6];\nconst array3 = [7, 8, 9];\n\nconst mergedArray = [...array1, ...array2, ...array3];\n\nconsole.log(mergedArray); // [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n```\n\n[1]: //developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\n","slug":"How-to-merge-arrays-in-JavaScript","published":1,"updated":"2019-05-20T18:47:50.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6om001zryi0u6ctvxpa","content":"<h1 id=\"The-concat-method\"><a href=\"#The-concat-method\" class=\"headerlink\" title=\"The concat method\"></a>The <code>concat</code> method</h1><p>With <code>concat</code>, we do not have to add even a single <code>for...in</code> loop. Instead, we can simply chain the <code>concat</code> method in the order we want!</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> array2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> array3 = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mergedArray = []</span><br><span class=\"line\">  .concat(array1)</span><br><span class=\"line\">  .concat(array2)</span><br><span class=\"line\">  .concat(array3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mergedArray); <span class=\"comment\">// [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> Prefer starting with empty array when chaining <code>concat</code>. In this way, it is clear that we make a new array and do not manipulate the existing ones! ^_^</p>\n</blockquote>\n<h1 id=\"Spread-Operator-Since-ES6\"><a href=\"#Spread-Operator-Since-ES6\" class=\"headerlink\" title=\"Spread Operator (Since ES6)\"></a><a href=\"//developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread Operator</a> (Since <code>ES6</code>)</h1><p>With <code>ES6</code> it is simple now! We can merge two or more arrays in one line:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> array2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> array3 = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mergedArray = [...array1, ...array2, ...array3];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mergedArray); <span class=\"comment\">// [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"The-concat-method\"><a href=\"#The-concat-method\" class=\"headerlink\" title=\"The concat method\"></a>The <code>concat</code> method</h1><p>With <code>concat</code>, we do not have to add even a single <code>for...in</code> loop. Instead, we can simply chain the <code>concat</code> method in the order we want!</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> array2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> array3 = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mergedArray = []</span><br><span class=\"line\">  .concat(array1)</span><br><span class=\"line\">  .concat(array2)</span><br><span class=\"line\">  .concat(array3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mergedArray); <span class=\"comment\">// [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> Prefer starting with empty array when chaining <code>concat</code>. In this way, it is clear that we make a new array and do not manipulate the existing ones! ^_^</p>\n</blockquote>\n<h1 id=\"Spread-Operator-Since-ES6\"><a href=\"#Spread-Operator-Since-ES6\" class=\"headerlink\" title=\"Spread Operator (Since ES6)\"></a><a href=\"//developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread Operator</a> (Since <code>ES6</code>)</h1><p>With <code>ES6</code> it is simple now! We can merge two or more arrays in one line:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> array2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> array3 = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mergedArray = [...array1, ...array2, ...array3];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mergedArray); <span class=\"comment\">// [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</span></span><br></pre></td></tr></table></figure>\n"},{"title":"How to publish and subscribe to a topic in mosquitto","icon":"fas fa-terminal","date":"2019-04-13T13:19:32.000Z","_content":"\n\nIn recent [post](/2019/04/13/Run-eclipse-mosquitto-as-docker-container/), we learned **how to run mosquitto as a docker container**. Now, we will learn about how to carry out messages using its publish/subscribe model.\n\nIn order to publish/subscribe to a topic in mosquitto, we need `mosquitto-clients` to be installed in our machine. We can do it by the following command:\n\n```\n    $ sudo apt-get install mosquitto-clients\n```\n\nThis will make both `mosquitto_pub` and `mosquitto_sub` available to use.\n\n## Publish message under a topic\n\nIn MQTT protocol, messages should be published and subscribed under respective topic names. For instance, if we are going to publish a message related to weather, it should be published like the following: `/topic/weather/nl/utrecht`.\n\nLets do the same, using `mosquitto_pub`:\n\n```\n    $ mosquitto_pub -t '/topic/weather/nl/utrecht' -m '{ \"city\":\"Utrecht\", \"temp\": \"20\" }'\n    $ mosquitto_pub -t '/topic/weather/nl/rotterdam' -m '{ \"city\":\"Rotterdam\", \"temp\": \"30\" }'\n```\n\n- `-t` -- The topic under which we publish a message.\n- `-m` -- The message we want to publish.\n\n`mosquitto_pub` publishes the messages under the specified topic via default port `1883` of `localhost`.\n\n> **Tip:** We can publish anything as long as we keep it as a string. The above is just a string representation of a `Weather` JSON object. People subscribe to it, can parse it using `JSON.parse()` to use as a JSON.\n\n## Subscribe to a topic\n\nSince people publishing already, lets subscribe to a topic and hear the gossip O_o\n\n```\n    $ mosquitto_sub -t '/topic/weather/nl/utrecht'\n    { \"city\":\"Utrecht\", \"temp\": \"20\" }\n```\n\nIf there are messages being published, you can see it being logged in your terminal.\n\n> **Tip:** We can subscribe to all the topics by specifying the `-t` option as the following: `mosquitto_sub -t '#'`. However, it is advised to subscribe to as specifici topic as possible like `mosquitto_sub -t '/topic/weather/nl/#'` to subscribe to the entire country's weather.\n\n```\n    $ mosquitto_sub -t '/topic/weather/nl/#'\n    { \"city\":\"Utrecht\", \"temp\": \"20\" }\n    { \"city\":\"Rotterdam\", \"temp\": \"30\" }\n```\n","source":"_posts/How-to-publish-and-subscribe-to-a-topic-in-mosquitto-2019-04-13.md","raw":"---\ntitle: How to publish and subscribe to a topic in mosquitto\ntags:\n  - How To\n  - Blog\n  - Docker\n  - Mosquitto\n  - MQTT\n  - Pop!_OS\n  - Linux\nicon: fas fa-terminal\ndate: 2019-04-13 15:19:32\n---\n\n\nIn recent [post](/2019/04/13/Run-eclipse-mosquitto-as-docker-container/), we learned **how to run mosquitto as a docker container**. Now, we will learn about how to carry out messages using its publish/subscribe model.\n\nIn order to publish/subscribe to a topic in mosquitto, we need `mosquitto-clients` to be installed in our machine. We can do it by the following command:\n\n```\n    $ sudo apt-get install mosquitto-clients\n```\n\nThis will make both `mosquitto_pub` and `mosquitto_sub` available to use.\n\n## Publish message under a topic\n\nIn MQTT protocol, messages should be published and subscribed under respective topic names. For instance, if we are going to publish a message related to weather, it should be published like the following: `/topic/weather/nl/utrecht`.\n\nLets do the same, using `mosquitto_pub`:\n\n```\n    $ mosquitto_pub -t '/topic/weather/nl/utrecht' -m '{ \"city\":\"Utrecht\", \"temp\": \"20\" }'\n    $ mosquitto_pub -t '/topic/weather/nl/rotterdam' -m '{ \"city\":\"Rotterdam\", \"temp\": \"30\" }'\n```\n\n- `-t` -- The topic under which we publish a message.\n- `-m` -- The message we want to publish.\n\n`mosquitto_pub` publishes the messages under the specified topic via default port `1883` of `localhost`.\n\n> **Tip:** We can publish anything as long as we keep it as a string. The above is just a string representation of a `Weather` JSON object. People subscribe to it, can parse it using `JSON.parse()` to use as a JSON.\n\n## Subscribe to a topic\n\nSince people publishing already, lets subscribe to a topic and hear the gossip O_o\n\n```\n    $ mosquitto_sub -t '/topic/weather/nl/utrecht'\n    { \"city\":\"Utrecht\", \"temp\": \"20\" }\n```\n\nIf there are messages being published, you can see it being logged in your terminal.\n\n> **Tip:** We can subscribe to all the topics by specifying the `-t` option as the following: `mosquitto_sub -t '#'`. However, it is advised to subscribe to as specifici topic as possible like `mosquitto_sub -t '/topic/weather/nl/#'` to subscribe to the entire country's weather.\n\n```\n    $ mosquitto_sub -t '/topic/weather/nl/#'\n    { \"city\":\"Utrecht\", \"temp\": \"20\" }\n    { \"city\":\"Rotterdam\", \"temp\": \"30\" }\n```\n","slug":"How-to-publish-and-subscribe-to-a-topic-in-mosquitto","published":1,"updated":"2019-04-13T13:19:32.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6on0021ryi0tqns16ty","content":"<p>In recent <a href=\"/2019/04/13/Run-eclipse-mosquitto-as-docker-container/\">post</a>, we learned <strong>how to run mosquitto as a docker container</strong>. Now, we will learn about how to carry out messages using its publish/subscribe model.</p>\n<p>In order to publish/subscribe to a topic in mosquitto, we need <code>mosquitto-clients</code> to be installed in our machine. We can do it by the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install mosquitto-clients</span><br></pre></td></tr></table></figure>\n<p>This will make both <code>mosquitto_pub</code> and <code>mosquitto_sub</code> available to use.</p>\n<h2 id=\"Publish-message-under-a-topic\"><a href=\"#Publish-message-under-a-topic\" class=\"headerlink\" title=\"Publish message under a topic\"></a>Publish message under a topic</h2><p>In MQTT protocol, messages should be published and subscribed under respective topic names. For instance, if we are going to publish a message related to weather, it should be published like the following: <code>/topic/weather/nl/utrecht</code>.</p>\n<p>Lets do the same, using <code>mosquitto_pub</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mosquitto_pub -t &apos;/topic/weather/nl/utrecht&apos; -m &apos;&#123; &quot;city&quot;:&quot;Utrecht&quot;, &quot;temp&quot;: &quot;20&quot; &#125;&apos;</span><br><span class=\"line\">$ mosquitto_pub -t &apos;/topic/weather/nl/rotterdam&apos; -m &apos;&#123; &quot;city&quot;:&quot;Rotterdam&quot;, &quot;temp&quot;: &quot;30&quot; &#125;&apos;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>-t</code> – The topic under which we publish a message.</li>\n<li><code>-m</code> – The message we want to publish.</li>\n</ul>\n<p><code>mosquitto_pub</code> publishes the messages under the specified topic via default port <code>1883</code> of <code>localhost</code>.</p>\n<blockquote>\n<p><strong>Tip:</strong> We can publish anything as long as we keep it as a string. The above is just a string representation of a <code>Weather</code> JSON object. People subscribe to it, can parse it using <code>JSON.parse()</code> to use as a JSON.</p>\n</blockquote>\n<h2 id=\"Subscribe-to-a-topic\"><a href=\"#Subscribe-to-a-topic\" class=\"headerlink\" title=\"Subscribe to a topic\"></a>Subscribe to a topic</h2><p>Since people publishing already, lets subscribe to a topic and hear the gossip O_o</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mosquitto_sub -t &apos;/topic/weather/nl/utrecht&apos;</span><br><span class=\"line\">&#123; &quot;city&quot;:&quot;Utrecht&quot;, &quot;temp&quot;: &quot;20&quot; &#125;</span><br></pre></td></tr></table></figure>\n<p>If there are messages being published, you can see it being logged in your terminal.</p>\n<blockquote>\n<p><strong>Tip:</strong> We can subscribe to all the topics by specifying the <code>-t</code> option as the following: <code>mosquitto_sub -t &#39;#&#39;</code>. However, it is advised to subscribe to as specifici topic as possible like <code>mosquitto_sub -t &#39;/topic/weather/nl/#&#39;</code> to subscribe to the entire country’s weather.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mosquitto_sub -t &apos;/topic/weather/nl/#&apos;</span><br><span class=\"line\">&#123; &quot;city&quot;:&quot;Utrecht&quot;, &quot;temp&quot;: &quot;20&quot; &#125;</span><br><span class=\"line\">&#123; &quot;city&quot;:&quot;Rotterdam&quot;, &quot;temp&quot;: &quot;30&quot; &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>In recent <a href=\"/2019/04/13/Run-eclipse-mosquitto-as-docker-container/\">post</a>, we learned <strong>how to run mosquitto as a docker container</strong>. Now, we will learn about how to carry out messages using its publish/subscribe model.</p>\n<p>In order to publish/subscribe to a topic in mosquitto, we need <code>mosquitto-clients</code> to be installed in our machine. We can do it by the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install mosquitto-clients</span><br></pre></td></tr></table></figure>\n<p>This will make both <code>mosquitto_pub</code> and <code>mosquitto_sub</code> available to use.</p>\n<h2 id=\"Publish-message-under-a-topic\"><a href=\"#Publish-message-under-a-topic\" class=\"headerlink\" title=\"Publish message under a topic\"></a>Publish message under a topic</h2><p>In MQTT protocol, messages should be published and subscribed under respective topic names. For instance, if we are going to publish a message related to weather, it should be published like the following: <code>/topic/weather/nl/utrecht</code>.</p>\n<p>Lets do the same, using <code>mosquitto_pub</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mosquitto_pub -t &apos;/topic/weather/nl/utrecht&apos; -m &apos;&#123; &quot;city&quot;:&quot;Utrecht&quot;, &quot;temp&quot;: &quot;20&quot; &#125;&apos;</span><br><span class=\"line\">$ mosquitto_pub -t &apos;/topic/weather/nl/rotterdam&apos; -m &apos;&#123; &quot;city&quot;:&quot;Rotterdam&quot;, &quot;temp&quot;: &quot;30&quot; &#125;&apos;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>-t</code> – The topic under which we publish a message.</li>\n<li><code>-m</code> – The message we want to publish.</li>\n</ul>\n<p><code>mosquitto_pub</code> publishes the messages under the specified topic via default port <code>1883</code> of <code>localhost</code>.</p>\n<blockquote>\n<p><strong>Tip:</strong> We can publish anything as long as we keep it as a string. The above is just a string representation of a <code>Weather</code> JSON object. People subscribe to it, can parse it using <code>JSON.parse()</code> to use as a JSON.</p>\n</blockquote>\n<h2 id=\"Subscribe-to-a-topic\"><a href=\"#Subscribe-to-a-topic\" class=\"headerlink\" title=\"Subscribe to a topic\"></a>Subscribe to a topic</h2><p>Since people publishing already, lets subscribe to a topic and hear the gossip O_o</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mosquitto_sub -t &apos;/topic/weather/nl/utrecht&apos;</span><br><span class=\"line\">&#123; &quot;city&quot;:&quot;Utrecht&quot;, &quot;temp&quot;: &quot;20&quot; &#125;</span><br></pre></td></tr></table></figure>\n<p>If there are messages being published, you can see it being logged in your terminal.</p>\n<blockquote>\n<p><strong>Tip:</strong> We can subscribe to all the topics by specifying the <code>-t</code> option as the following: <code>mosquitto_sub -t &#39;#&#39;</code>. However, it is advised to subscribe to as specifici topic as possible like <code>mosquitto_sub -t &#39;/topic/weather/nl/#&#39;</code> to subscribe to the entire country’s weather.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mosquitto_sub -t &apos;/topic/weather/nl/#&apos;</span><br><span class=\"line\">&#123; &quot;city&quot;:&quot;Utrecht&quot;, &quot;temp&quot;: &quot;20&quot; &#125;</span><br><span class=\"line\">&#123; &quot;city&quot;:&quot;Rotterdam&quot;, &quot;temp&quot;: &quot;30&quot; &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"How to remove array duplicates in JavaScript","icon":"fab fa-js-square","date":"2019-05-21T20:07:12.000Z","_content":"\n\n# The [`Set`][1] collection\n\nSince `ES6`, `Set` collection has been introduced which is really good and makes our life simple. `Set` is a collection which will not keep duplicates. It can also take any iterable objects as constructor arguments. In our case, it is an array with duplicated values.\n\n```javascript\nconst duplicates = [1, 2, 3, 3, 2, 1];\n\nconst unique = [...new Set(duplicates)];\n\nconsole.log(unique); // [ 1, 2, 3 ]\n```\n\n# `Array.filter` function\n\nIt is better to know more options, in case of not-so-friendly environment. For instance, `Set` collection is supported by all the major browsers but few old-schools. Yes, I am looking at you IE! O_o\n\n```JavaScript\nconst duplicates = [1, 2, 3, 3, 2, 1];\n\nconst unique = duplicates.filter(\n  (item, index) => duplicates.indexOf(item) === index\n);\n\nconsole.log(unique); // [ 1, 2, 3 ]\n```\n\nPlease prefer the `Set` option just for the simple of it!\n\n> **Tip:** We can do the same `.indexOf` trick using `.map`, `.foreach` as well. But, `.filter` is more readable among those! ^\\_^\n\n[1]: //developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n","source":"_posts/How-to-remove-array-duplicates-in-JavaScript-2019-05-21.md","raw":"---\ntitle: How to remove array duplicates in JavaScript\ntags:\n  - How to\n  - Arrays\n  - JS\n  - ES6\nicon: fab fa-js-square\ndate: 2019-05-21 22:07:12\n---\n\n\n# The [`Set`][1] collection\n\nSince `ES6`, `Set` collection has been introduced which is really good and makes our life simple. `Set` is a collection which will not keep duplicates. It can also take any iterable objects as constructor arguments. In our case, it is an array with duplicated values.\n\n```javascript\nconst duplicates = [1, 2, 3, 3, 2, 1];\n\nconst unique = [...new Set(duplicates)];\n\nconsole.log(unique); // [ 1, 2, 3 ]\n```\n\n# `Array.filter` function\n\nIt is better to know more options, in case of not-so-friendly environment. For instance, `Set` collection is supported by all the major browsers but few old-schools. Yes, I am looking at you IE! O_o\n\n```JavaScript\nconst duplicates = [1, 2, 3, 3, 2, 1];\n\nconst unique = duplicates.filter(\n  (item, index) => duplicates.indexOf(item) === index\n);\n\nconsole.log(unique); // [ 1, 2, 3 ]\n```\n\nPlease prefer the `Set` option just for the simple of it!\n\n> **Tip:** We can do the same `.indexOf` trick using `.map`, `.foreach` as well. But, `.filter` is more readable among those! ^\\_^\n\n[1]: //developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n","slug":"How-to-remove-array-duplicates-in-JavaScript","published":1,"updated":"2019-05-21T20:07:12.634Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6op0022ryi0gxu2alnf","content":"<h1 id=\"The-Set-collection\"><a href=\"#The-Set-collection\" class=\"headerlink\" title=\"The Set collection\"></a>The <a href=\"//developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> collection</h1><p>Since <code>ES6</code>, <code>Set</code> collection has been introduced which is really good and makes our life simple. <code>Set</code> is a collection which will not keep duplicates. It can also take any iterable objects as constructor arguments. In our case, it is an array with duplicated values.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> duplicates = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> unique = [...new <span class=\"built_in\">Set</span>(duplicates)];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(unique); <span class=\"comment\">// [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Array-filter-function\"><a href=\"#Array-filter-function\" class=\"headerlink\" title=\"Array.filter function\"></a><code>Array.filter</code> function</h1><p>It is better to know more options, in case of not-so-friendly environment. For instance, <code>Set</code> collection is supported by all the major browsers but few old-schools. Yes, I am looking at you IE! O_o</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> duplicates = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> unique = duplicates.filter(</span><br><span class=\"line\">  (item, index) =&gt; duplicates.indexOf(item) === index</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(unique); <span class=\"comment\">// [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure>\n<p>Please prefer the <code>Set</code> option just for the simple of it!</p>\n<blockquote>\n<p><strong>Tip:</strong> We can do the same <code>.indexOf</code> trick using <code>.map</code>, <code>.foreach</code> as well. But, <code>.filter</code> is more readable among those! ^_^</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"The-Set-collection\"><a href=\"#The-Set-collection\" class=\"headerlink\" title=\"The Set collection\"></a>The <a href=\"//developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> collection</h1><p>Since <code>ES6</code>, <code>Set</code> collection has been introduced which is really good and makes our life simple. <code>Set</code> is a collection which will not keep duplicates. It can also take any iterable objects as constructor arguments. In our case, it is an array with duplicated values.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> duplicates = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> unique = [...new <span class=\"built_in\">Set</span>(duplicates)];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(unique); <span class=\"comment\">// [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Array-filter-function\"><a href=\"#Array-filter-function\" class=\"headerlink\" title=\"Array.filter function\"></a><code>Array.filter</code> function</h1><p>It is better to know more options, in case of not-so-friendly environment. For instance, <code>Set</code> collection is supported by all the major browsers but few old-schools. Yes, I am looking at you IE! O_o</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> duplicates = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> unique = duplicates.filter(</span><br><span class=\"line\">  (item, index) =&gt; duplicates.indexOf(item) === index</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(unique); <span class=\"comment\">// [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure>\n<p>Please prefer the <code>Set</code> option just for the simple of it!</p>\n<blockquote>\n<p><strong>Tip:</strong> We can do the same <code>.indexOf</code> trick using <code>.map</code>, <code>.foreach</code> as well. But, <code>.filter</code> is more readable among those! ^_^</p>\n</blockquote>\n"},{"title":"How to reverse a string in JavaScript","icon":"fab fa-js-square","date":"2019-05-22T19:35:02.000Z","_content":"\n\nReversing a string challenge has been one of the oldest code challeges! Let's see how can we do it in JS.\n\n# Using Array Methods:\n\nSteps to follow:\n\n- Split the string to `char` arrays.\n- Reverse the `char` array.\n- At last `join` the array to a string.\n\nThe same thing happens in the following code section:\n\n```js\nconst stringToReverse = 'ashkeys';\n\nconst reversedString = stringToReverse\n  .split('') // [ 'a', 's', 'h', 'k', 'e', 'y', 's' ]\n  .reverse() // [ 's', 'y', 'e', 'k', 'h', 's', 'a' ]\n  .join('');\n\nconsole.log(reversedString); // syekhsa\n```\n\n# With ES6 spread operator\n\nIt is possible to reduce one line from the above code using ES6 syntax! ^\\_^\n\n```js\nconst stringToReverse = 'ashkeys';\n\nconst [...charArrayToReverse] = stringToReverse;\n\nconsole.log(charArrayToReverse.reverse().join('')); // syekhsa\n```\n","source":"_posts/How-to-reverse-a-string-in-JavaScript-2019-05-22.md","raw":"---\ntitle: How to reverse a string in JavaScript\ntags:\n  - How To\n  - String\n  - JS\nicon: fab fa-js-square\ndate: 2019-05-22 21:35:02\n---\n\n\nReversing a string challenge has been one of the oldest code challeges! Let's see how can we do it in JS.\n\n# Using Array Methods:\n\nSteps to follow:\n\n- Split the string to `char` arrays.\n- Reverse the `char` array.\n- At last `join` the array to a string.\n\nThe same thing happens in the following code section:\n\n```js\nconst stringToReverse = 'ashkeys';\n\nconst reversedString = stringToReverse\n  .split('') // [ 'a', 's', 'h', 'k', 'e', 'y', 's' ]\n  .reverse() // [ 's', 'y', 'e', 'k', 'h', 's', 'a' ]\n  .join('');\n\nconsole.log(reversedString); // syekhsa\n```\n\n# With ES6 spread operator\n\nIt is possible to reduce one line from the above code using ES6 syntax! ^\\_^\n\n```js\nconst stringToReverse = 'ashkeys';\n\nconst [...charArrayToReverse] = stringToReverse;\n\nconsole.log(charArrayToReverse.reverse().join('')); // syekhsa\n```\n","slug":"How-to-reverse-a-string-in-JavaScript","published":1,"updated":"2019-05-22T19:35:02.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6or0024ryi01fujckhm","content":"<p>Reversing a string challenge has been one of the oldest code challeges! Let’s see how can we do it in JS.</p>\n<h1 id=\"Using-Array-Methods\"><a href=\"#Using-Array-Methods\" class=\"headerlink\" title=\"Using Array Methods:\"></a>Using Array Methods:</h1><p>Steps to follow:</p>\n<ul>\n<li>Split the string to <code>char</code> arrays.</li>\n<li>Reverse the <code>char</code> array.</li>\n<li>At last <code>join</code> the array to a string.</li>\n</ul>\n<p>The same thing happens in the following code section:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stringToReverse = <span class=\"string\">'ashkeys'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reversedString = stringToReverse</span><br><span class=\"line\">  .split(<span class=\"string\">''</span>) <span class=\"comment\">// [ 'a', 's', 'h', 'k', 'e', 'y', 's' ]</span></span><br><span class=\"line\">  .reverse() <span class=\"comment\">// [ 's', 'y', 'e', 'k', 'h', 's', 'a' ]</span></span><br><span class=\"line\">  .join(<span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reversedString); <span class=\"comment\">// syekhsa</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"With-ES6-spread-operator\"><a href=\"#With-ES6-spread-operator\" class=\"headerlink\" title=\"With ES6 spread operator\"></a>With ES6 spread operator</h1><p>It is possible to reduce one line from the above code using ES6 syntax! ^_^</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stringToReverse = <span class=\"string\">'ashkeys'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [...charArrayToReverse] = stringToReverse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(charArrayToReverse.reverse().join(<span class=\"string\">''</span>)); <span class=\"comment\">// syekhsa</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Reversing a string challenge has been one of the oldest code challeges! Let’s see how can we do it in JS.</p>\n<h1 id=\"Using-Array-Methods\"><a href=\"#Using-Array-Methods\" class=\"headerlink\" title=\"Using Array Methods:\"></a>Using Array Methods:</h1><p>Steps to follow:</p>\n<ul>\n<li>Split the string to <code>char</code> arrays.</li>\n<li>Reverse the <code>char</code> array.</li>\n<li>At last <code>join</code> the array to a string.</li>\n</ul>\n<p>The same thing happens in the following code section:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stringToReverse = <span class=\"string\">'ashkeys'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reversedString = stringToReverse</span><br><span class=\"line\">  .split(<span class=\"string\">''</span>) <span class=\"comment\">// [ 'a', 's', 'h', 'k', 'e', 'y', 's' ]</span></span><br><span class=\"line\">  .reverse() <span class=\"comment\">// [ 's', 'y', 'e', 'k', 'h', 's', 'a' ]</span></span><br><span class=\"line\">  .join(<span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reversedString); <span class=\"comment\">// syekhsa</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"With-ES6-spread-operator\"><a href=\"#With-ES6-spread-operator\" class=\"headerlink\" title=\"With ES6 spread operator\"></a>With ES6 spread operator</h1><p>It is possible to reduce one line from the above code using ES6 syntax! ^_^</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stringToReverse = <span class=\"string\">'ashkeys'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [...charArrayToReverse] = stringToReverse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(charArrayToReverse.reverse().join(<span class=\"string\">''</span>)); <span class=\"comment\">// syekhsa</span></span><br></pre></td></tr></table></figure>\n"},{"title":"How to extract tar.gz file in linux","icon":"fas fa-terminal","date":"2019-07-03T18:42:35.000Z","_content":"\nTo extract a `tar` ball, use `tar` utility in linux.\n\n```bash\n$ tar -xzf ./go1.12.6.linux-amd64.tar.gz\n```\n\nThis will unpack the `go` folder in the working directory.\n\nTo unpack it in a custom folder:\n\n```bash\n$ tar -C /home/ashokma/go_1.12.6 -xzf ./go1.12.6.linux-amd64.tar.gz\n```\n\n> **Tip:** Use `-v` option to see the list of files being extracted. It means be verbose about it!\n","source":"_posts/How-to-extract-tar-gz-file-in-linux-2019-07-03.md","raw":"---\ntitle: How to extract tar.gz file in linux\ntags:\n  - Blog\n  - How To\n  - Linux\n  - Pop!_OS\n  - Terminal Usage\nicon: fas fa-terminal\ndate: 2019-07-03 20:42:35\n---\n\nTo extract a `tar` ball, use `tar` utility in linux.\n\n```bash\n$ tar -xzf ./go1.12.6.linux-amd64.tar.gz\n```\n\nThis will unpack the `go` folder in the working directory.\n\nTo unpack it in a custom folder:\n\n```bash\n$ tar -C /home/ashokma/go_1.12.6 -xzf ./go1.12.6.linux-amd64.tar.gz\n```\n\n> **Tip:** Use `-v` option to see the list of files being extracted. It means be verbose about it!\n","slug":"How-to-extract-tar-gz-file-in-linux","published":1,"updated":"2019-07-03T15:26:55.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6os0025ryi0jpj8nfrr","content":"<p>To extract a <code>tar</code> ball, use <code>tar</code> utility in linux.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar -xzf ./go1.12.6.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n<p>This will unpack the <code>go</code> folder in the working directory.</p>\n<p>To unpack it in a custom folder:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar -C /home/ashokma/go_1.12.6 -xzf ./go1.12.6.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> Use <code>-v</code> option to see the list of files being extracted. It means be verbose about it!</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>To extract a <code>tar</code> ball, use <code>tar</code> utility in linux.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar -xzf ./go1.12.6.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n<p>This will unpack the <code>go</code> folder in the working directory.</p>\n<p>To unpack it in a custom folder:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar -C /home/ashokma/go_1.12.6 -xzf ./go1.12.6.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> Use <code>-v</code> option to see the list of files being extracted. It means be verbose about it!</p>\n</blockquote>\n"},{"title":"How to run a web server using Node.JS","icon":"fab fa-node","date":"2019-04-15T20:55:05.000Z","_content":"\nIt is easy to run your own server nowadays. [`Nodejs`](//nodejs.org/en/about/), makes it look like a piece of cake.\n\nOnce you have installed [Node](/2019/02/18/install-nodejs-and-npm-pop-os/), let's try building our first web server.\n\n## Create web directory:\n\nLet's start by creating our server directory.\n\n```\n    $ mkdir nodejs-server\n```\n\n## Server js file\n\nOnce we changed to the `nodejs-server` directory,\n\n```\n    $ cd nodejs-server\n```\n\ncreate a `server.js` with the following code:\n\n```javascript\nconst http = require('http');\n\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/html');\n  res.write(\n    `\n        <h1> Hello! Welcome to AshKeys! </h1>\n    `\n  );\n});\n\nserver.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}/`);\n});\n```\n\nNow our server is ready to be created.\n\n## Run as `node`\n\nThis is it! All we have to do now is to run as a `node` file.\n\n```\n    $ node ./server.js\n    Server running at http://localhost:3000/\n```\n\nNow our server is listening to port `3000` and welcomes you to [**AshKeys**](/)\n\n> **Tip:** When it comes to routing it is [`express`](//www.npmjs.com/package/express) that comes at best!\n","source":"_posts/How-to-run-a-web-server-using-Node-JS-2019-04-15.md","raw":"---\ntitle: How to run a web server using Node.JS\ntags:\n  - How to\n  - nodejs\n  - server\nicon: fab fa-node\ndate: 2019-04-15 22:55:05\n---\n\nIt is easy to run your own server nowadays. [`Nodejs`](//nodejs.org/en/about/), makes it look like a piece of cake.\n\nOnce you have installed [Node](/2019/02/18/install-nodejs-and-npm-pop-os/), let's try building our first web server.\n\n## Create web directory:\n\nLet's start by creating our server directory.\n\n```\n    $ mkdir nodejs-server\n```\n\n## Server js file\n\nOnce we changed to the `nodejs-server` directory,\n\n```\n    $ cd nodejs-server\n```\n\ncreate a `server.js` with the following code:\n\n```javascript\nconst http = require('http');\n\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/html');\n  res.write(\n    `\n        <h1> Hello! Welcome to AshKeys! </h1>\n    `\n  );\n});\n\nserver.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}/`);\n});\n```\n\nNow our server is ready to be created.\n\n## Run as `node`\n\nThis is it! All we have to do now is to run as a `node` file.\n\n```\n    $ node ./server.js\n    Server running at http://localhost:3000/\n```\n\nNow our server is listening to port `3000` and welcomes you to [**AshKeys**](/)\n\n> **Tip:** When it comes to routing it is [`express`](//www.npmjs.com/package/express) that comes at best!\n","slug":"How-to-run-a-web-server-using-Node-JS","published":1,"updated":"2019-05-18T13:44:13.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6ou0027ryi0keyrx72v","content":"<p>It is easy to run your own server nowadays. <a href=\"//nodejs.org/en/about/\"><code>Nodejs</code></a>, makes it look like a piece of cake.</p>\n<p>Once you have installed <a href=\"/2019/02/18/install-nodejs-and-npm-pop-os/\">Node</a>, let’s try building our first web server.</p>\n<h2 id=\"Create-web-directory\"><a href=\"#Create-web-directory\" class=\"headerlink\" title=\"Create web directory:\"></a>Create web directory:</h2><p>Let’s start by creating our server directory.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir nodejs-server</span><br></pre></td></tr></table></figure>\n<h2 id=\"Server-js-file\"><a href=\"#Server-js-file\" class=\"headerlink\" title=\"Server js file\"></a>Server js file</h2><p>Once we changed to the <code>nodejs-server</code> directory,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd nodejs-server</span><br></pre></td></tr></table></figure>\n<p>create a <code>server.js</code> with the following code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = <span class=\"number\">3000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.statusCode = <span class=\"number\">200</span>;</span><br><span class=\"line\">  res.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/html'</span>);</span><br><span class=\"line\">  res.write(</span><br><span class=\"line\">    <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;h1&gt; Hello! Welcome to AshKeys! &lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(port, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Server running at http://localhost:<span class=\"subst\">$&#123;port&#125;</span>/`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Now our server is ready to be created.</p>\n<h2 id=\"Run-as-node\"><a href=\"#Run-as-node\" class=\"headerlink\" title=\"Run as node\"></a>Run as <code>node</code></h2><p>This is it! All we have to do now is to run as a <code>node</code> file.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node ./server.js</span><br><span class=\"line\">Server running at http://localhost:3000/</span><br></pre></td></tr></table></figure>\n<p>Now our server is listening to port <code>3000</code> and welcomes you to <a href=\"/\"><strong>AshKeys</strong></a></p>\n<blockquote>\n<p><strong>Tip:</strong> When it comes to routing it is <a href=\"//www.npmjs.com/package/express\"><code>express</code></a> that comes at best!</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>It is easy to run your own server nowadays. <a href=\"//nodejs.org/en/about/\"><code>Nodejs</code></a>, makes it look like a piece of cake.</p>\n<p>Once you have installed <a href=\"/2019/02/18/install-nodejs-and-npm-pop-os/\">Node</a>, let’s try building our first web server.</p>\n<h2 id=\"Create-web-directory\"><a href=\"#Create-web-directory\" class=\"headerlink\" title=\"Create web directory:\"></a>Create web directory:</h2><p>Let’s start by creating our server directory.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir nodejs-server</span><br></pre></td></tr></table></figure>\n<h2 id=\"Server-js-file\"><a href=\"#Server-js-file\" class=\"headerlink\" title=\"Server js file\"></a>Server js file</h2><p>Once we changed to the <code>nodejs-server</code> directory,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd nodejs-server</span><br></pre></td></tr></table></figure>\n<p>create a <code>server.js</code> with the following code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = <span class=\"number\">3000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.statusCode = <span class=\"number\">200</span>;</span><br><span class=\"line\">  res.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/html'</span>);</span><br><span class=\"line\">  res.write(</span><br><span class=\"line\">    <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;h1&gt; Hello! Welcome to AshKeys! &lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(port, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Server running at http://localhost:<span class=\"subst\">$&#123;port&#125;</span>/`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Now our server is ready to be created.</p>\n<h2 id=\"Run-as-node\"><a href=\"#Run-as-node\" class=\"headerlink\" title=\"Run as node\"></a>Run as <code>node</code></h2><p>This is it! All we have to do now is to run as a <code>node</code> file.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node ./server.js</span><br><span class=\"line\">Server running at http://localhost:3000/</span><br></pre></td></tr></table></figure>\n<p>Now our server is listening to port <code>3000</code> and welcomes you to <a href=\"/\"><strong>AshKeys</strong></a></p>\n<blockquote>\n<p><strong>Tip:</strong> When it comes to routing it is <a href=\"//www.npmjs.com/package/express\"><code>express</code></a> that comes at best!</p>\n</blockquote>\n"},{"title":"How to run docker containers in the background of your terminal","icon":"fab fa-docker","date":"2019-04-14T14:05:54.000Z","_content":"\n\nWhen we create a container from an image, by default, it attaches the container to the terminal. Many cases, we do not want that to happen for we have other commands to execute and do not bother to open new terminals. >\\_O\n\nIn that case, running a docker container in detached mode comes handy.\n\n## The default attached mode:\n\nTo create and run a container, we use the following command:\n\n```\n    $ docker run eclipse-mosquitto\n    1555249625: mosquitto version 1.5.8 starting\n    1555249625: Config loaded from /mosquitto/config/mosquitto.conf.\n    1555249625: Opening ipv4 listen socket on port 1883.\n    1555249625: Opening ipv6 listen socket on port 1883.\n```\n\nThe above command creates a container with generated name and attaches it to you terminal. When we press `CTRL + C`, it actually stops the container. But, we do not want that!\n\n## Detached Mode:\n\nFor that we have an option to be supplied like this:\n\n```\n    $ docker run -d eclipse-mosquitto\n    09bb7465c787fc1ff2f4177a8d0dd1d5c9751b3192583df5c177968dcacb17a2\n```\n\nNow it does the same job and instead of attaching the container to the terminal it only logs the container id.\n\n> How do we know that our container was created successfully and running?\n> In short, **we do not!**\n\n## Check/tail the container logs:\n\nTo we the container's logs:\n\n```\n    $ docker logs 09bb7465c787fc1ff2f4177a8d0dd1d5c9751b3192583df5c177968dcacb17a2\n    1555249810: mosquitto version 1.5.8 starting\n    1555249810: Config loaded from /mosquitto/config/mosquitto.conf.\n    1555249810: Opening ipv4 listen socket on port 1883.\n    1555249810: Opening ipv6 listen socket on port 1883.\n```\n\n> **Tip:** Use `docker ps` to list out the running containers, in case you want to know the name of your running containers. It is better to use `-a` option to list out all the containers. On error cases, the container might not be running.\n\n## Bonus: Attaching the container back:\n\nJust in case if you want to attach a container back again, it is good to know the attach mode.\n\n```\n    $ docker attach 09bb7465c787fc1ff2f4177a8d0dd1d5c9751b3192583df5c177968dcacb17a2\n    _\n```\n\n> Remember that pressing `CTRL + C` terminates the container.\n","source":"_posts/How-to-run-docker-containers-in-the-background-of-your-terminal-2019-04-14.md","raw":"---\ntitle: How to run docker containers in the background of your terminal\ntags:\n  - Blog\n  - How to\n  - Docker\n  - terminal\n  - Linux\nicon: fab fa-docker\ndate: 2019-04-14 16:05:54\n---\n\n\nWhen we create a container from an image, by default, it attaches the container to the terminal. Many cases, we do not want that to happen for we have other commands to execute and do not bother to open new terminals. >\\_O\n\nIn that case, running a docker container in detached mode comes handy.\n\n## The default attached mode:\n\nTo create and run a container, we use the following command:\n\n```\n    $ docker run eclipse-mosquitto\n    1555249625: mosquitto version 1.5.8 starting\n    1555249625: Config loaded from /mosquitto/config/mosquitto.conf.\n    1555249625: Opening ipv4 listen socket on port 1883.\n    1555249625: Opening ipv6 listen socket on port 1883.\n```\n\nThe above command creates a container with generated name and attaches it to you terminal. When we press `CTRL + C`, it actually stops the container. But, we do not want that!\n\n## Detached Mode:\n\nFor that we have an option to be supplied like this:\n\n```\n    $ docker run -d eclipse-mosquitto\n    09bb7465c787fc1ff2f4177a8d0dd1d5c9751b3192583df5c177968dcacb17a2\n```\n\nNow it does the same job and instead of attaching the container to the terminal it only logs the container id.\n\n> How do we know that our container was created successfully and running?\n> In short, **we do not!**\n\n## Check/tail the container logs:\n\nTo we the container's logs:\n\n```\n    $ docker logs 09bb7465c787fc1ff2f4177a8d0dd1d5c9751b3192583df5c177968dcacb17a2\n    1555249810: mosquitto version 1.5.8 starting\n    1555249810: Config loaded from /mosquitto/config/mosquitto.conf.\n    1555249810: Opening ipv4 listen socket on port 1883.\n    1555249810: Opening ipv6 listen socket on port 1883.\n```\n\n> **Tip:** Use `docker ps` to list out the running containers, in case you want to know the name of your running containers. It is better to use `-a` option to list out all the containers. On error cases, the container might not be running.\n\n## Bonus: Attaching the container back:\n\nJust in case if you want to attach a container back again, it is good to know the attach mode.\n\n```\n    $ docker attach 09bb7465c787fc1ff2f4177a8d0dd1d5c9751b3192583df5c177968dcacb17a2\n    _\n```\n\n> Remember that pressing `CTRL + C` terminates the container.\n","slug":"How-to-run-docker-containers-in-the-background-of-your-terminal","published":1,"updated":"2019-05-18T13:35:28.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6ow0029ryi0b277f8vq","content":"<p>When we create a container from an image, by default, it attaches the container to the terminal. Many cases, we do not want that to happen for we have other commands to execute and do not bother to open new terminals. &gt;_O</p>\n<p>In that case, running a docker container in detached mode comes handy.</p>\n<h2 id=\"The-default-attached-mode\"><a href=\"#The-default-attached-mode\" class=\"headerlink\" title=\"The default attached mode:\"></a>The default attached mode:</h2><p>To create and run a container, we use the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run eclipse-mosquitto</span><br><span class=\"line\">1555249625: mosquitto version 1.5.8 starting</span><br><span class=\"line\">1555249625: Config loaded from /mosquitto/config/mosquitto.conf.</span><br><span class=\"line\">1555249625: Opening ipv4 listen socket on port 1883.</span><br><span class=\"line\">1555249625: Opening ipv6 listen socket on port 1883.</span><br></pre></td></tr></table></figure>\n<p>The above command creates a container with generated name and attaches it to you terminal. When we press <code>CTRL + C</code>, it actually stops the container. But, we do not want that!</p>\n<h2 id=\"Detached-Mode\"><a href=\"#Detached-Mode\" class=\"headerlink\" title=\"Detached Mode:\"></a>Detached Mode:</h2><p>For that we have an option to be supplied like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d eclipse-mosquitto</span><br><span class=\"line\">09bb7465c787fc1ff2f4177a8d0dd1d5c9751b3192583df5c177968dcacb17a2</span><br></pre></td></tr></table></figure>\n<p>Now it does the same job and instead of attaching the container to the terminal it only logs the container id.</p>\n<blockquote>\n<p>How do we know that our container was created successfully and running?<br>In short, <strong>we do not!</strong></p>\n</blockquote>\n<h2 id=\"Check-tail-the-container-logs\"><a href=\"#Check-tail-the-container-logs\" class=\"headerlink\" title=\"Check/tail the container logs:\"></a>Check/tail the container logs:</h2><p>To we the container’s logs:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker logs 09bb7465c787fc1ff2f4177a8d0dd1d5c9751b3192583df5c177968dcacb17a2</span><br><span class=\"line\">1555249810: mosquitto version 1.5.8 starting</span><br><span class=\"line\">1555249810: Config loaded from /mosquitto/config/mosquitto.conf.</span><br><span class=\"line\">1555249810: Opening ipv4 listen socket on port 1883.</span><br><span class=\"line\">1555249810: Opening ipv6 listen socket on port 1883.</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> Use <code>docker ps</code> to list out the running containers, in case you want to know the name of your running containers. It is better to use <code>-a</code> option to list out all the containers. On error cases, the container might not be running.</p>\n</blockquote>\n<h2 id=\"Bonus-Attaching-the-container-back\"><a href=\"#Bonus-Attaching-the-container-back\" class=\"headerlink\" title=\"Bonus: Attaching the container back:\"></a>Bonus: Attaching the container back:</h2><p>Just in case if you want to attach a container back again, it is good to know the attach mode.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker attach 09bb7465c787fc1ff2f4177a8d0dd1d5c9751b3192583df5c177968dcacb17a2</span><br><span class=\"line\">_</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Remember that pressing <code>CTRL + C</code> terminates the container.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>When we create a container from an image, by default, it attaches the container to the terminal. Many cases, we do not want that to happen for we have other commands to execute and do not bother to open new terminals. &gt;_O</p>\n<p>In that case, running a docker container in detached mode comes handy.</p>\n<h2 id=\"The-default-attached-mode\"><a href=\"#The-default-attached-mode\" class=\"headerlink\" title=\"The default attached mode:\"></a>The default attached mode:</h2><p>To create and run a container, we use the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run eclipse-mosquitto</span><br><span class=\"line\">1555249625: mosquitto version 1.5.8 starting</span><br><span class=\"line\">1555249625: Config loaded from /mosquitto/config/mosquitto.conf.</span><br><span class=\"line\">1555249625: Opening ipv4 listen socket on port 1883.</span><br><span class=\"line\">1555249625: Opening ipv6 listen socket on port 1883.</span><br></pre></td></tr></table></figure>\n<p>The above command creates a container with generated name and attaches it to you terminal. When we press <code>CTRL + C</code>, it actually stops the container. But, we do not want that!</p>\n<h2 id=\"Detached-Mode\"><a href=\"#Detached-Mode\" class=\"headerlink\" title=\"Detached Mode:\"></a>Detached Mode:</h2><p>For that we have an option to be supplied like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d eclipse-mosquitto</span><br><span class=\"line\">09bb7465c787fc1ff2f4177a8d0dd1d5c9751b3192583df5c177968dcacb17a2</span><br></pre></td></tr></table></figure>\n<p>Now it does the same job and instead of attaching the container to the terminal it only logs the container id.</p>\n<blockquote>\n<p>How do we know that our container was created successfully and running?<br>In short, <strong>we do not!</strong></p>\n</blockquote>\n<h2 id=\"Check-tail-the-container-logs\"><a href=\"#Check-tail-the-container-logs\" class=\"headerlink\" title=\"Check/tail the container logs:\"></a>Check/tail the container logs:</h2><p>To we the container’s logs:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker logs 09bb7465c787fc1ff2f4177a8d0dd1d5c9751b3192583df5c177968dcacb17a2</span><br><span class=\"line\">1555249810: mosquitto version 1.5.8 starting</span><br><span class=\"line\">1555249810: Config loaded from /mosquitto/config/mosquitto.conf.</span><br><span class=\"line\">1555249810: Opening ipv4 listen socket on port 1883.</span><br><span class=\"line\">1555249810: Opening ipv6 listen socket on port 1883.</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> Use <code>docker ps</code> to list out the running containers, in case you want to know the name of your running containers. It is better to use <code>-a</code> option to list out all the containers. On error cases, the container might not be running.</p>\n</blockquote>\n<h2 id=\"Bonus-Attaching-the-container-back\"><a href=\"#Bonus-Attaching-the-container-back\" class=\"headerlink\" title=\"Bonus: Attaching the container back:\"></a>Bonus: Attaching the container back:</h2><p>Just in case if you want to attach a container back again, it is good to know the attach mode.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker attach 09bb7465c787fc1ff2f4177a8d0dd1d5c9751b3192583df5c177968dcacb17a2</span><br><span class=\"line\">_</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Remember that pressing <code>CTRL + C</code> terminates the container.</p>\n</blockquote>\n"},{"title":"How to sort lines in a file using bash","icon":"fas fa-terminal","date":"2019-05-26T19:42:28.000Z","_content":"\n\nIt is nice to know how to sort the contents of a file using bash. Let us take an example where we have a `.csv` file with the records of employees as following:\n\n```excel\nemp_id;first_name;last_name;email;designation\n000002;Ash;Keys;AshKeys@ashokma.com;UX Designer\n000003;Sojiro;De Tenken;sojiro@ashokma.com;Tester\n000001;Ashok;M A;ashokma@ashokma.com;Web Developer\n```\n\nIf we would like to sort the contents of this file for no reason, we can do it using `sort` command.\n\n```console\n$ sort ashokma.com/employees.csv\n\n000001;Ashok;M A;ashokma@ashokma.com;Web Developer\n000002;Ash;Keys;AshKeys@ashokma.com;UX Designer\n000003;Sojiro;De Tenken;sojiro@ashokma.com;Tester\nemp_id;first_name;last_name;email;designation\n```\n\nIt is being sorted as expected but there is one little problem. The column names are at the bottom and we do not want that as it is not valid for database records processing. In order to keep the column names up top, we just have to supply the `-r` option which is to reverse the output.\n\n```console\n$ sort ashokma.com/employees.csv\n\nemp_id;first_name;last_name;email;designation\n000003;Sojiro;De Tenken;sojiro@ashokma.com;Tester\n000002;Ash;Keys;AshKeys@ashokma.com;UX Designer\n000001;Ashok;M A;ashokma@ashokma.com;Web Developer\n```\n\n> As it only outputs the sorted values to console, we have to stream it back to the same file like: <br> `sort ashokma.com/employees.csv > ashokma.com/employees.csv`\n\nI understand that it is in decending order but sorted ^\\_^ As an alternative, we can cut the columns line and paste it again once records are sorted!\n\n> **Tip:** Using the `-u` option you can keep only the unique records along with the sorting process.\n","source":"_posts/How-to-sort-lines-in-a-file-using-bash-2019-05-26.md","raw":"---\ntitle: How to sort lines in a file using bash\ntags:\n  - How To\n  - Linux\n  - Bash\n  - Shell\n  - Terminal\nicon: fas fa-terminal\ndate: 2019-05-26 21:42:28\n---\n\n\nIt is nice to know how to sort the contents of a file using bash. Let us take an example where we have a `.csv` file with the records of employees as following:\n\n```excel\nemp_id;first_name;last_name;email;designation\n000002;Ash;Keys;AshKeys@ashokma.com;UX Designer\n000003;Sojiro;De Tenken;sojiro@ashokma.com;Tester\n000001;Ashok;M A;ashokma@ashokma.com;Web Developer\n```\n\nIf we would like to sort the contents of this file for no reason, we can do it using `sort` command.\n\n```console\n$ sort ashokma.com/employees.csv\n\n000001;Ashok;M A;ashokma@ashokma.com;Web Developer\n000002;Ash;Keys;AshKeys@ashokma.com;UX Designer\n000003;Sojiro;De Tenken;sojiro@ashokma.com;Tester\nemp_id;first_name;last_name;email;designation\n```\n\nIt is being sorted as expected but there is one little problem. The column names are at the bottom and we do not want that as it is not valid for database records processing. In order to keep the column names up top, we just have to supply the `-r` option which is to reverse the output.\n\n```console\n$ sort ashokma.com/employees.csv\n\nemp_id;first_name;last_name;email;designation\n000003;Sojiro;De Tenken;sojiro@ashokma.com;Tester\n000002;Ash;Keys;AshKeys@ashokma.com;UX Designer\n000001;Ashok;M A;ashokma@ashokma.com;Web Developer\n```\n\n> As it only outputs the sorted values to console, we have to stream it back to the same file like: <br> `sort ashokma.com/employees.csv > ashokma.com/employees.csv`\n\nI understand that it is in decending order but sorted ^\\_^ As an alternative, we can cut the columns line and paste it again once records are sorted!\n\n> **Tip:** Using the `-u` option you can keep only the unique records along with the sorting process.\n","slug":"How-to-sort-lines-in-a-file-using-bash","published":1,"updated":"2019-05-26T19:42:28.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6p2002cryi0k5r48uwj","content":"<p>It is nice to know how to sort the contents of a file using bash. Let us take an example where we have a <code>.csv</code> file with the records of employees as following:</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emp_id;first_name;last_name;email;designation</span><br><span class=\"line\"><span class=\"number\">000002</span>;Ash;Keys;AshKeys@ashokma.com;UX Designer</span><br><span class=\"line\"><span class=\"number\">000003</span>;Sojiro;De Tenken;sojiro@ashokma.com;Tester</span><br><span class=\"line\"><span class=\"number\">000001</span>;Ashok;M A;ashokma@ashokma.com;Web Developer</span><br></pre></td></tr></table></figure>\n<p>If we would like to sort the contents of this file for no reason, we can do it using <code>sort</code> command.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sort ashokma.com/employees.csv</span></span><br><span class=\"line\"></span><br><span class=\"line\">000001;Ashok;M A;ashokma@ashokma.com;Web Developer</span><br><span class=\"line\">000002;Ash;Keys;AshKeys@ashokma.com;UX Designer</span><br><span class=\"line\">000003;Sojiro;De Tenken;sojiro@ashokma.com;Tester</span><br><span class=\"line\">emp_id;first_name;last_name;email;designation</span><br></pre></td></tr></table></figure>\n<p>It is being sorted as expected but there is one little problem. The column names are at the bottom and we do not want that as it is not valid for database records processing. In order to keep the column names up top, we just have to supply the <code>-r</code> option which is to reverse the output.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sort ashokma.com/employees.csv</span></span><br><span class=\"line\"></span><br><span class=\"line\">emp_id;first_name;last_name;email;designation</span><br><span class=\"line\">000003;Sojiro;De Tenken;sojiro@ashokma.com;Tester</span><br><span class=\"line\">000002;Ash;Keys;AshKeys@ashokma.com;UX Designer</span><br><span class=\"line\">000001;Ashok;M A;ashokma@ashokma.com;Web Developer</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>As it only outputs the sorted values to console, we have to stream it back to the same file like: <br> <code>sort ashokma.com/employees.csv &gt; ashokma.com/employees.csv</code></p>\n</blockquote>\n<p>I understand that it is in decending order but sorted ^_^ As an alternative, we can cut the columns line and paste it again once records are sorted!</p>\n<blockquote>\n<p><strong>Tip:</strong> Using the <code>-u</code> option you can keep only the unique records along with the sorting process.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>It is nice to know how to sort the contents of a file using bash. Let us take an example where we have a <code>.csv</code> file with the records of employees as following:</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emp_id;first_name;last_name;email;designation</span><br><span class=\"line\"><span class=\"number\">000002</span>;Ash;Keys;AshKeys@ashokma.com;UX Designer</span><br><span class=\"line\"><span class=\"number\">000003</span>;Sojiro;De Tenken;sojiro@ashokma.com;Tester</span><br><span class=\"line\"><span class=\"number\">000001</span>;Ashok;M A;ashokma@ashokma.com;Web Developer</span><br></pre></td></tr></table></figure>\n<p>If we would like to sort the contents of this file for no reason, we can do it using <code>sort</code> command.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sort ashokma.com/employees.csv</span></span><br><span class=\"line\"></span><br><span class=\"line\">000001;Ashok;M A;ashokma@ashokma.com;Web Developer</span><br><span class=\"line\">000002;Ash;Keys;AshKeys@ashokma.com;UX Designer</span><br><span class=\"line\">000003;Sojiro;De Tenken;sojiro@ashokma.com;Tester</span><br><span class=\"line\">emp_id;first_name;last_name;email;designation</span><br></pre></td></tr></table></figure>\n<p>It is being sorted as expected but there is one little problem. The column names are at the bottom and we do not want that as it is not valid for database records processing. In order to keep the column names up top, we just have to supply the <code>-r</code> option which is to reverse the output.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sort ashokma.com/employees.csv</span></span><br><span class=\"line\"></span><br><span class=\"line\">emp_id;first_name;last_name;email;designation</span><br><span class=\"line\">000003;Sojiro;De Tenken;sojiro@ashokma.com;Tester</span><br><span class=\"line\">000002;Ash;Keys;AshKeys@ashokma.com;UX Designer</span><br><span class=\"line\">000001;Ashok;M A;ashokma@ashokma.com;Web Developer</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>As it only outputs the sorted values to console, we have to stream it back to the same file like: <br> <code>sort ashokma.com/employees.csv &gt; ashokma.com/employees.csv</code></p>\n</blockquote>\n<p>I understand that it is in decending order but sorted ^_^ As an alternative, we can cut the columns line and paste it again once records are sorted!</p>\n<blockquote>\n<p><strong>Tip:</strong> Using the <code>-u</code> option you can keep only the unique records along with the sorting process.</p>\n</blockquote>\n"},{"title":"How to toggle a css class of an element","icon":"fab fa-css3-alt","date":"2020-02-03T14:41:22.000Z","_content":"\n\nSometimes, we want to mark the status of an element dynamically like from the JS.\n\nAn element's [`classList`][1] property contains the applied CSS classes. Through that we can toggle a class by using the following methods.\n\n## [`.add()`][2] or [`.remove()`][3]\n\n```js\nconst todoItem = document.querySelector('.todo-item');\n\nif (todoItem.classList.contains('marked')) {\n    todoItem.classList.remove('marked');\n} else {\n    todoItem.classList.add('marked');\n}\n```\n\n**Tip:** You can supply an array of class values to be added or removed.\n\n## [`.toggle()`][4]\n\n```js\nconst todoItem = document.querySelector('.todo-item');\n\ntodoItem.classList.toggle('marked')\n    ? console.log('Item marked!')\n    : console.log('Item unmarked!');\n```\n\nYes, it returns a `true` when adding and `false` when removing a class.\n\n**Tip:** It is possible to turn the `toggle` into a `add` only or `remove` only function by supplying the `force` flag as a second parameter. \\O/\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\n[2]: https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/add\n[3]: https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/remove\n[4]: https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/toggle\n","source":"_posts/How-to-toggle-a-css-class-of-an-element-2020-02-03.md","raw":"---\ntitle: How to toggle a css class of an element\ntags:\n  - How To\n  - CSS\n  - JavaScript\nicon: fab fa-css3-alt\ndate: 2020-02-03 15:41:22\n---\n\n\nSometimes, we want to mark the status of an element dynamically like from the JS.\n\nAn element's [`classList`][1] property contains the applied CSS classes. Through that we can toggle a class by using the following methods.\n\n## [`.add()`][2] or [`.remove()`][3]\n\n```js\nconst todoItem = document.querySelector('.todo-item');\n\nif (todoItem.classList.contains('marked')) {\n    todoItem.classList.remove('marked');\n} else {\n    todoItem.classList.add('marked');\n}\n```\n\n**Tip:** You can supply an array of class values to be added or removed.\n\n## [`.toggle()`][4]\n\n```js\nconst todoItem = document.querySelector('.todo-item');\n\ntodoItem.classList.toggle('marked')\n    ? console.log('Item marked!')\n    : console.log('Item unmarked!');\n```\n\nYes, it returns a `true` when adding and `false` when removing a class.\n\n**Tip:** It is possible to turn the `toggle` into a `add` only or `remove` only function by supplying the `force` flag as a second parameter. \\O/\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\n[2]: https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/add\n[3]: https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/remove\n[4]: https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/toggle\n","slug":"How-to-toggle-a-css-class-of-an-element","published":1,"updated":"2020-02-03T14:41:22.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6p4002eryi0b1sa3odj","content":"<p>Sometimes, we want to mark the status of an element dynamically like from the JS.</p>\n<p>An element’s <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\" target=\"_blank\" rel=\"noopener\"><code>classList</code></a> property contains the applied CSS classes. Through that we can toggle a class by using the following methods.</p>\n<h2 id=\"add-or-remove\"><a href=\"#add-or-remove\" class=\"headerlink\" title=\".add() or .remove()\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/add\" target=\"_blank\" rel=\"noopener\"><code>.add()</code></a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/remove\" target=\"_blank\" rel=\"noopener\"><code>.remove()</code></a></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> todoItem = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.todo-item'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (todoItem.classList.contains(<span class=\"string\">'marked'</span>)) &#123;</span><br><span class=\"line\">    todoItem.classList.remove(<span class=\"string\">'marked'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    todoItem.classList.add(<span class=\"string\">'marked'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Tip:</strong> You can supply an array of class values to be added or removed.</p>\n<h2 id=\"toggle\"><a href=\"#toggle\" class=\"headerlink\" title=\".toggle()\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/toggle\" target=\"_blank\" rel=\"noopener\"><code>.toggle()</code></a></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> todoItem = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.todo-item'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">todoItem.classList.toggle(<span class=\"string\">'marked'</span>)</span><br><span class=\"line\">    ? <span class=\"built_in\">console</span>.log(<span class=\"string\">'Item marked!'</span>)</span><br><span class=\"line\">    : <span class=\"built_in\">console</span>.log(<span class=\"string\">'Item unmarked!'</span>);</span><br></pre></td></tr></table></figure>\n<p>Yes, it returns a <code>true</code> when adding and <code>false</code> when removing a class.</p>\n<p><strong>Tip:</strong> It is possible to turn the <code>toggle</code> into a <code>add</code> only or <code>remove</code> only function by supplying the <code>force</code> flag as a second parameter. \\O/</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Sometimes, we want to mark the status of an element dynamically like from the JS.</p>\n<p>An element’s <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\" target=\"_blank\" rel=\"noopener\"><code>classList</code></a> property contains the applied CSS classes. Through that we can toggle a class by using the following methods.</p>\n<h2 id=\"add-or-remove\"><a href=\"#add-or-remove\" class=\"headerlink\" title=\".add() or .remove()\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/add\" target=\"_blank\" rel=\"noopener\"><code>.add()</code></a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/remove\" target=\"_blank\" rel=\"noopener\"><code>.remove()</code></a></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> todoItem = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.todo-item'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (todoItem.classList.contains(<span class=\"string\">'marked'</span>)) &#123;</span><br><span class=\"line\">    todoItem.classList.remove(<span class=\"string\">'marked'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    todoItem.classList.add(<span class=\"string\">'marked'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Tip:</strong> You can supply an array of class values to be added or removed.</p>\n<h2 id=\"toggle\"><a href=\"#toggle\" class=\"headerlink\" title=\".toggle()\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/toggle\" target=\"_blank\" rel=\"noopener\"><code>.toggle()</code></a></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> todoItem = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.todo-item'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">todoItem.classList.toggle(<span class=\"string\">'marked'</span>)</span><br><span class=\"line\">    ? <span class=\"built_in\">console</span>.log(<span class=\"string\">'Item marked!'</span>)</span><br><span class=\"line\">    : <span class=\"built_in\">console</span>.log(<span class=\"string\">'Item unmarked!'</span>);</span><br></pre></td></tr></table></figure>\n<p>Yes, it returns a <code>true</code> when adding and <code>false</code> when removing a class.</p>\n<p><strong>Tip:</strong> It is possible to turn the <code>toggle</code> into a <code>add</code> only or <code>remove</code> only function by supplying the <code>force</code> flag as a second parameter. \\O/</p>\n"},{"title":"How to tune up your PostgreSQL performance","icon":"fas fa-database","date":"2019-12-15T10:25:14.000Z","_content":"\n\nRecently, at work, we were facing performance issues with our database queries. As the databse grew to millions of records in a short time, querying even a small segment of data was taking so much time. There was an urgent need to improve the query execution time.\n\nFor instance, the query execution on a massive table took around 60s as follows.\n\n```postgres\nashkeys=> explain analyze select * from massive_table;\n                                                    QUERY PLAN\n------------------------------------------------------------------------------------------------------------------\n Seq Scan on massive_table  (cost=0.00..1363033.47 rows=42377647 width=144) (actual time=5.269..27925.251 rows=42619306 loops=1)\n Planning time: 0.321 ms\n Execution time: 62062.535 ms\n(3 rows)\n\n```\n\nWith the following update to the `postgresql.conf` file, the performance improved a lot since the `postgres` had a lot of memory to work with \\O/.\n\n```properties\n#------------------------------------------------------------------------------\n# RESOURCE USAGE (except WAL)\n#------------------------------------------------------------------------------\n\n# - Memory -\n\nshared_buffers = 13GB                   # min 128kB\n                                        # (change requires restart)\n#huge_pages = on                        # on, off, or try\n                                        # (change requires restart)\n#temp_buffers = 1GB                     # min 800kB\n#max_prepared_transactions = 0          # zero disables the feature\n                                        # (change requires restart)\n# Caution: it is not advisable to set max_prepared_transactions nonzero unless\n# you actively intend to use prepared transactions.\nwork_mem = 1GB                          # min 64kB\n\n```\n\nWith above configurations, `postgres` executed the same query a lot more better.\n\n```postgres\nashkeys=> explain analyze select * from massive_table;\n                                                    QUERY PLAN\n------------------------------------------------------------------------------------------------------------------\n Seq Scan on massive_table  (cost=0.00..1363033.47 rows=42377647 width=144) (actual time=5.269..27925.251 rows=42619306 loops=1)\n Planning time: 0.321 ms\n Execution time: 29062.535 ms\n(3 rows)\n\n```\n\n> **P.S:** It only increases the performance to some point and does not guarantee super speed execution. Mind your relations in the relational carefully ^\\_^\n","source":"_posts/How-to-tune-up-your-PostgreSQL-performance-2019-12-15.md","raw":"---\ntitle: How to tune up your PostgreSQL performance\ntags:\n  - How To\n  - Postgres\n  - Performance\n  - DB\nicon: fas fa-database\ndate: 2019-12-15 11:25:14\n---\n\n\nRecently, at work, we were facing performance issues with our database queries. As the databse grew to millions of records in a short time, querying even a small segment of data was taking so much time. There was an urgent need to improve the query execution time.\n\nFor instance, the query execution on a massive table took around 60s as follows.\n\n```postgres\nashkeys=> explain analyze select * from massive_table;\n                                                    QUERY PLAN\n------------------------------------------------------------------------------------------------------------------\n Seq Scan on massive_table  (cost=0.00..1363033.47 rows=42377647 width=144) (actual time=5.269..27925.251 rows=42619306 loops=1)\n Planning time: 0.321 ms\n Execution time: 62062.535 ms\n(3 rows)\n\n```\n\nWith the following update to the `postgresql.conf` file, the performance improved a lot since the `postgres` had a lot of memory to work with \\O/.\n\n```properties\n#------------------------------------------------------------------------------\n# RESOURCE USAGE (except WAL)\n#------------------------------------------------------------------------------\n\n# - Memory -\n\nshared_buffers = 13GB                   # min 128kB\n                                        # (change requires restart)\n#huge_pages = on                        # on, off, or try\n                                        # (change requires restart)\n#temp_buffers = 1GB                     # min 800kB\n#max_prepared_transactions = 0          # zero disables the feature\n                                        # (change requires restart)\n# Caution: it is not advisable to set max_prepared_transactions nonzero unless\n# you actively intend to use prepared transactions.\nwork_mem = 1GB                          # min 64kB\n\n```\n\nWith above configurations, `postgres` executed the same query a lot more better.\n\n```postgres\nashkeys=> explain analyze select * from massive_table;\n                                                    QUERY PLAN\n------------------------------------------------------------------------------------------------------------------\n Seq Scan on massive_table  (cost=0.00..1363033.47 rows=42377647 width=144) (actual time=5.269..27925.251 rows=42619306 loops=1)\n Planning time: 0.321 ms\n Execution time: 29062.535 ms\n(3 rows)\n\n```\n\n> **P.S:** It only increases the performance to some point and does not guarantee super speed execution. Mind your relations in the relational carefully ^\\_^\n","slug":"How-to-tune-up-your-PostgreSQL-performance","published":1,"updated":"2019-12-15T16:25:14.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6p7002hryi037v5qvp7","content":"<p>Recently, at work, we were facing performance issues with our database queries. As the databse grew to millions of records in a short time, querying even a small segment of data was taking so much time. There was an urgent need to improve the query execution time.</p>\n<p>For instance, the query execution on a massive table took around 60s as follows.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ashkeys=&gt; explain analyze select * from massive_table;</span><br><span class=\"line\">                                                    QUERY PLAN</span><br><span class=\"line\">------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> Seq Scan on massive_table  (cost=0.00..1363033.47 rows=42377647 width=144) (actual time=5.269..27925.251 rows=42619306 loops=1)</span><br><span class=\"line\"> Planning time: 0.321 ms</span><br><span class=\"line\"> Execution time: 62062.535 ms</span><br><span class=\"line\">(3 rows)</span><br></pre></td></tr></table></figure>\n<p>With the following update to the <code>postgresql.conf</code> file, the performance improved a lot since the <code>postgres</code> had a lot of memory to work with \\O/.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#------------------------------------------------------------------------------</span><br><span class=\"line\"># RESOURCE USAGE (except WAL)</span><br><span class=\"line\">#------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># - Memory -</span><br><span class=\"line\"></span><br><span class=\"line\">shared_buffers = 13GB                   # min 128kB</span><br><span class=\"line\">                                        # (change requires restart)</span><br><span class=\"line\">#huge_pages = on                        # on, off, or try</span><br><span class=\"line\">                                        # (change requires restart)</span><br><span class=\"line\">#temp_buffers = 1GB                     # min 800kB</span><br><span class=\"line\">#max_prepared_transactions = 0          # zero disables the feature</span><br><span class=\"line\">                                        # (change requires restart)</span><br><span class=\"line\"># Caution: it is not advisable to set max_prepared_transactions nonzero unless</span><br><span class=\"line\"># you actively intend to use prepared transactions.</span><br><span class=\"line\">work_mem = 1GB                          # min 64kB</span><br></pre></td></tr></table></figure>\n<p>With above configurations, <code>postgres</code> executed the same query a lot more better.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ashkeys=&gt; explain analyze select * from massive_table;</span><br><span class=\"line\">                                                    QUERY PLAN</span><br><span class=\"line\">------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> Seq Scan on massive_table  (cost=0.00..1363033.47 rows=42377647 width=144) (actual time=5.269..27925.251 rows=42619306 loops=1)</span><br><span class=\"line\"> Planning time: 0.321 ms</span><br><span class=\"line\"> Execution time: 29062.535 ms</span><br><span class=\"line\">(3 rows)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>P.S:</strong> It only increases the performance to some point and does not guarantee super speed execution. Mind your relations in the relational carefully ^_^</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Recently, at work, we were facing performance issues with our database queries. As the databse grew to millions of records in a short time, querying even a small segment of data was taking so much time. There was an urgent need to improve the query execution time.</p>\n<p>For instance, the query execution on a massive table took around 60s as follows.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ashkeys=&gt; explain analyze select * from massive_table;</span><br><span class=\"line\">                                                    QUERY PLAN</span><br><span class=\"line\">------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> Seq Scan on massive_table  (cost=0.00..1363033.47 rows=42377647 width=144) (actual time=5.269..27925.251 rows=42619306 loops=1)</span><br><span class=\"line\"> Planning time: 0.321 ms</span><br><span class=\"line\"> Execution time: 62062.535 ms</span><br><span class=\"line\">(3 rows)</span><br></pre></td></tr></table></figure>\n<p>With the following update to the <code>postgresql.conf</code> file, the performance improved a lot since the <code>postgres</code> had a lot of memory to work with \\O/.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#------------------------------------------------------------------------------</span><br><span class=\"line\"># RESOURCE USAGE (except WAL)</span><br><span class=\"line\">#------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># - Memory -</span><br><span class=\"line\"></span><br><span class=\"line\">shared_buffers = 13GB                   # min 128kB</span><br><span class=\"line\">                                        # (change requires restart)</span><br><span class=\"line\">#huge_pages = on                        # on, off, or try</span><br><span class=\"line\">                                        # (change requires restart)</span><br><span class=\"line\">#temp_buffers = 1GB                     # min 800kB</span><br><span class=\"line\">#max_prepared_transactions = 0          # zero disables the feature</span><br><span class=\"line\">                                        # (change requires restart)</span><br><span class=\"line\"># Caution: it is not advisable to set max_prepared_transactions nonzero unless</span><br><span class=\"line\"># you actively intend to use prepared transactions.</span><br><span class=\"line\">work_mem = 1GB                          # min 64kB</span><br></pre></td></tr></table></figure>\n<p>With above configurations, <code>postgres</code> executed the same query a lot more better.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ashkeys=&gt; explain analyze select * from massive_table;</span><br><span class=\"line\">                                                    QUERY PLAN</span><br><span class=\"line\">------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> Seq Scan on massive_table  (cost=0.00..1363033.47 rows=42377647 width=144) (actual time=5.269..27925.251 rows=42619306 loops=1)</span><br><span class=\"line\"> Planning time: 0.321 ms</span><br><span class=\"line\"> Execution time: 29062.535 ms</span><br><span class=\"line\">(3 rows)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>P.S:</strong> It only increases the performance to some point and does not guarantee super speed execution. Mind your relations in the relational carefully ^_^</p>\n</blockquote>\n"},{"title":"Learning react: todo app","icon":"fab fa-react","date":"2019-09-13T22:22:11.000Z","_content":"\n\nFor a long time, I wanted to explore the React world. Today it had happened. ^\\_^ I must say that I am amused by the simplicity of it and React you got my attention! Since I have some experience with JS and data binding frameworks such as AngularJS and Angular, I decided to jump right in with what I usually do, learn by doing it.\n\nSo, I have decided to build a Todo app. It was really quick and easy to set it up right away. I followed the [Getting Started][1] guildline from the official site.\n\n## Initializing the `todo-app`\n\nLike `@angular/cli` for Angular, there is [`create-react-app`][2] for React. I have initialized the app using the following way.\n\n```\n $ npx create-react-app todo-app\n```\n\nThis created the folder and installs the default dependencies needed for an app to start. For example,\n\n```json\n\"dependencies\": {\n    \"react\": \"^16.9.0\",\n    \"react-dom\": \"^16.9.0\",\n    \"react-scripts\": \"3.1.1\"\n}\n```\n\n`react` for the React framework itselt and `react-dom` for DOM manipulation, I suppose.\n\nIt does come with some boilerplate code and a starter page with some links like the **Getting Started** and **Tour of Heroes** links for Angular starter page.\n\n## Create the app\n\nThen I just started editing the stuff that was already in place and ended up with an working Todo app after an hour.\n\n```jsx\n// App.jsx\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      newTodo: '',\n      todos: [\n        'Schoonmaken',\n        'Boodschappen doen',\n        'Espanol Oefeningen',\n        'podcast Luisteren'\n      ]\n    };\n  }\n\n  handleChange = ({ target: { value } }) => {\n    this.setState({ newTodo: value });\n  };\n\n  addNewTodo(e) {\n    e.preventDefault();\n\n    this.state.newTodo &&\n      this.setState({\n        todos: [...this.state.todos, this.state.newTodo],\n        newTodo: ''\n      });\n  }\n\n  removeTodo(index) {\n    this.setState({\n      todos: [...this.state.todos.filter((_value, i) => i !== index)]\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <form\n            className=\"todo-new\"\n            noValidate\n            onSubmit={(e) => this.addNewTodo(e)}\n          >\n            <input\n              className=\"todo-new__input\"\n              type=\"text\"\n              name=\"todo-new\"\n              id=\"todo-new\"\n              value={this.state.newTodo}\n              onChange={(e) => this.handleChange(e)}\n            />\n            <button\n              className=\"todo-new__add\"\n              onClick={(e) => this.addNewTodo(e)}\n            >\n              Add\n            </button>\n          </form>\n\n          <TodoList\n            todos={this.state.todos}\n            removeTodo={(i) => this.removeTodo(i)}\n          />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\nTo get to know the communication between components, I created a child component called `TodoList` which worries about displaying the list of todos alone.\n\n```jsx\n// todo-list.jsx\nexport class TodoList extends React.Component {\n  render() {\n    return (\n      <div className=\"todo-list\">\n        {this.props.todos.map((todo, index) => (\n          <div className=\"todo-list__item\" key={index}>\n            <span>{todo}</span>\n            <span\n              className=\"todo-list__item--remove\"\n              onClick={() => this.props.removeTodo(index)}\n            >\n              x\n            </span>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n```\n\nI am surprised to see that it was done within a few lines of code. O_O I like it really! I am already feeling cheating on Angular >\\_O\n\n```js\n// index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\nThat is it! A working todo app in few hours, mostly because I was bit adament on fixing few things on my own by trail and error. I like it that way as it makes me to think logically and it becomes hard to forget once you found the solution after a struggle for some time on your own! O_o\n\n## Live DEMO: [todo-app-ashokma-com.netlify.com][3]\n\n[1]: https://reactjs.org/docs/getting-started.html\n[2]: https://create-react-app.dev/\n[3]: https://todo-app-ashokma-com.netlify.com\n","source":"_posts/Learning-react-todo-app-2019-09-14.md","raw":"---\ntitle: 'Learning react: todo app'\ntags:\n  - React\n  - JavaScript\n  - App\nicon: fab fa-react\ndate: 2019-09-14 00:22:11\n---\n\n\nFor a long time, I wanted to explore the React world. Today it had happened. ^\\_^ I must say that I am amused by the simplicity of it and React you got my attention! Since I have some experience with JS and data binding frameworks such as AngularJS and Angular, I decided to jump right in with what I usually do, learn by doing it.\n\nSo, I have decided to build a Todo app. It was really quick and easy to set it up right away. I followed the [Getting Started][1] guildline from the official site.\n\n## Initializing the `todo-app`\n\nLike `@angular/cli` for Angular, there is [`create-react-app`][2] for React. I have initialized the app using the following way.\n\n```\n $ npx create-react-app todo-app\n```\n\nThis created the folder and installs the default dependencies needed for an app to start. For example,\n\n```json\n\"dependencies\": {\n    \"react\": \"^16.9.0\",\n    \"react-dom\": \"^16.9.0\",\n    \"react-scripts\": \"3.1.1\"\n}\n```\n\n`react` for the React framework itselt and `react-dom` for DOM manipulation, I suppose.\n\nIt does come with some boilerplate code and a starter page with some links like the **Getting Started** and **Tour of Heroes** links for Angular starter page.\n\n## Create the app\n\nThen I just started editing the stuff that was already in place and ended up with an working Todo app after an hour.\n\n```jsx\n// App.jsx\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      newTodo: '',\n      todos: [\n        'Schoonmaken',\n        'Boodschappen doen',\n        'Espanol Oefeningen',\n        'podcast Luisteren'\n      ]\n    };\n  }\n\n  handleChange = ({ target: { value } }) => {\n    this.setState({ newTodo: value });\n  };\n\n  addNewTodo(e) {\n    e.preventDefault();\n\n    this.state.newTodo &&\n      this.setState({\n        todos: [...this.state.todos, this.state.newTodo],\n        newTodo: ''\n      });\n  }\n\n  removeTodo(index) {\n    this.setState({\n      todos: [...this.state.todos.filter((_value, i) => i !== index)]\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <form\n            className=\"todo-new\"\n            noValidate\n            onSubmit={(e) => this.addNewTodo(e)}\n          >\n            <input\n              className=\"todo-new__input\"\n              type=\"text\"\n              name=\"todo-new\"\n              id=\"todo-new\"\n              value={this.state.newTodo}\n              onChange={(e) => this.handleChange(e)}\n            />\n            <button\n              className=\"todo-new__add\"\n              onClick={(e) => this.addNewTodo(e)}\n            >\n              Add\n            </button>\n          </form>\n\n          <TodoList\n            todos={this.state.todos}\n            removeTodo={(i) => this.removeTodo(i)}\n          />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\nTo get to know the communication between components, I created a child component called `TodoList` which worries about displaying the list of todos alone.\n\n```jsx\n// todo-list.jsx\nexport class TodoList extends React.Component {\n  render() {\n    return (\n      <div className=\"todo-list\">\n        {this.props.todos.map((todo, index) => (\n          <div className=\"todo-list__item\" key={index}>\n            <span>{todo}</span>\n            <span\n              className=\"todo-list__item--remove\"\n              onClick={() => this.props.removeTodo(index)}\n            >\n              x\n            </span>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n```\n\nI am surprised to see that it was done within a few lines of code. O_O I like it really! I am already feeling cheating on Angular >\\_O\n\n```js\n// index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\nThat is it! A working todo app in few hours, mostly because I was bit adament on fixing few things on my own by trail and error. I like it that way as it makes me to think logically and it becomes hard to forget once you found the solution after a struggle for some time on your own! O_o\n\n## Live DEMO: [todo-app-ashokma-com.netlify.com][3]\n\n[1]: https://reactjs.org/docs/getting-started.html\n[2]: https://create-react-app.dev/\n[3]: https://todo-app-ashokma-com.netlify.com\n","slug":"Learning-react-todo-app","published":1,"updated":"2019-09-13T22:22:11.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6p9002jryi0c1rwxlrg","content":"<p>For a long time, I wanted to explore the React world. Today it had happened. ^_^ I must say that I am amused by the simplicity of it and React you got my attention! Since I have some experience with JS and data binding frameworks such as AngularJS and Angular, I decided to jump right in with what I usually do, learn by doing it.</p>\n<p>So, I have decided to build a Todo app. It was really quick and easy to set it up right away. I followed the <a href=\"https://reactjs.org/docs/getting-started.html\" target=\"_blank\" rel=\"noopener\">Getting Started</a> guildline from the official site.</p>\n<h2 id=\"Initializing-the-todo-app\"><a href=\"#Initializing-the-todo-app\" class=\"headerlink\" title=\"Initializing the todo-app\"></a>Initializing the <code>todo-app</code></h2><p>Like <code>@angular/cli</code> for Angular, there is <a href=\"https://create-react-app.dev/\" target=\"_blank\" rel=\"noopener\"><code>create-react-app</code></a> for React. I have initialized the app using the following way.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx create-react-app todo-app</span><br></pre></td></tr></table></figure>\n<p>This created the folder and installs the default dependencies needed for an app to start. For example,</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"dependencies\": &#123;</span><br><span class=\"line\">    \"react\": \"^16.9.0\",</span><br><span class=\"line\">    \"react-dom\": \"^16.9.0\",</span><br><span class=\"line\">    \"react-scripts\": \"3.1.1\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>react</code> for the React framework itselt and <code>react-dom</code> for DOM manipulation, I suppose.</p>\n<p>It does come with some boilerplate code and a starter page with some links like the <strong>Getting Started</strong> and <strong>Tour of Heroes</strong> links for Angular starter page.</p>\n<h2 id=\"Create-the-app\"><a href=\"#Create-the-app\" class=\"headerlink\" title=\"Create the app\"></a>Create the app</h2><p>Then I just started editing the stuff that was already in place and ended up with an working Todo app after an hour.</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// App.jsx</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">      newTodo: <span class=\"string\">''</span>,</span><br><span class=\"line\">      todos: [</span><br><span class=\"line\">        <span class=\"string\">'Schoonmaken'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Boodschappen doen'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Espanol Oefeningen'</span>,</span><br><span class=\"line\">        <span class=\"string\">'podcast Luisteren'</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange = <span class=\"function\">(<span class=\"params\">&#123; target: &#123; value &#125; &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">newTodo</span>: value &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  addNewTodo(e) &#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state.newTodo &amp;&amp;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">        todos: [...this.state.todos, <span class=\"keyword\">this</span>.state.newTodo],</span><br><span class=\"line\">        newTodo: <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  removeTodo(index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      todos: [...this.state.todos.filter(<span class=\"function\">(<span class=\"params\">_value, i</span>) =&gt;</span> i !== index)]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">        &lt;header className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">          &lt;form</span><br><span class=\"line\">            className=<span class=\"string\">\"todo-new\"</span></span><br><span class=\"line\">            noValidate</span><br><span class=\"line\">            onSubmit=&#123;(e) =&gt; <span class=\"keyword\">this</span>.addNewTodo(e)&#125;</span><br><span class=\"line\">          &gt;</span><br><span class=\"line\">            &lt;input</span><br><span class=\"line\">              className=<span class=\"string\">\"todo-new__input\"</span></span><br><span class=\"line\">              type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">              name=<span class=\"string\">\"todo-new\"</span></span><br><span class=\"line\">              id=<span class=\"string\">\"todo-new\"</span></span><br><span class=\"line\">              value=&#123;<span class=\"keyword\">this</span>.state.newTodo&#125;</span><br><span class=\"line\">              onChange=&#123;(e) =&gt; <span class=\"keyword\">this</span>.handleChange(e)&#125;</span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">            &lt;button</span><br><span class=\"line\">              className=<span class=\"string\">\"todo-new__add\"</span></span><br><span class=\"line\">              onClick=&#123;(e) =&gt; <span class=\"keyword\">this</span>.addNewTodo(e)&#125;</span><br><span class=\"line\">            &gt;</span><br><span class=\"line\">              Add</span><br><span class=\"line\">            &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;TodoList</span><br><span class=\"line\">            todos=&#123;<span class=\"keyword\">this</span>.state.todos&#125;</span><br><span class=\"line\">            removeTodo=&#123;(i) =&gt; <span class=\"keyword\">this</span>.removeTodo(i)&#125;</span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/header&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n<p>To get to know the communication between components, I created a child component called <code>TodoList</code> which worries about displaying the list of todos alone.</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// todo-list.jsx</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"todo-list\"</span>&gt;</span><br><span class=\"line\">        &#123;<span class=\"keyword\">this</span>.props.todos.map(<span class=\"function\">(<span class=\"params\">todo, index</span>) =&gt;</span> (</span><br><span class=\"line\">          &lt;div className=<span class=\"string\">\"todo-list__item\"</span> key=&#123;index&#125;&gt;</span><br><span class=\"line\">            &lt;span&gt;&#123;todo&#125;&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;span</span></span><br><span class=\"line\"><span class=\"regexp\">              className=\"todo-list__item--remove\"</span></span><br><span class=\"line\"><span class=\"regexp\">              onClick=&#123;() =&gt; this.props.removeTodo(index)&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">            &gt;</span></span><br><span class=\"line\"><span class=\"regexp\">              x</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>span&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        ))&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>I am surprised to see that it was done within a few lines of code. O_O I like it really! I am already feeling cheating on Angular &gt;_O</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span>, document.getElementById('root'));</span></span><br></pre></td></tr></table></figure>\n<p>That is it! A working todo app in few hours, mostly because I was bit adament on fixing few things on my own by trail and error. I like it that way as it makes me to think logically and it becomes hard to forget once you found the solution after a struggle for some time on your own! O_o</p>\n<h2 id=\"Live-DEMO-todo-app-ashokma-com-netlify-com\"><a href=\"#Live-DEMO-todo-app-ashokma-com-netlify-com\" class=\"headerlink\" title=\"Live DEMO: todo-app-ashokma-com.netlify.com\"></a>Live DEMO: <a href=\"https://todo-app-ashokma-com.netlify.com\" target=\"_blank\" rel=\"noopener\">todo-app-ashokma-com.netlify.com</a></h2>","site":{"data":{}},"excerpt":"","more":"<p>For a long time, I wanted to explore the React world. Today it had happened. ^_^ I must say that I am amused by the simplicity of it and React you got my attention! Since I have some experience with JS and data binding frameworks such as AngularJS and Angular, I decided to jump right in with what I usually do, learn by doing it.</p>\n<p>So, I have decided to build a Todo app. It was really quick and easy to set it up right away. I followed the <a href=\"https://reactjs.org/docs/getting-started.html\" target=\"_blank\" rel=\"noopener\">Getting Started</a> guildline from the official site.</p>\n<h2 id=\"Initializing-the-todo-app\"><a href=\"#Initializing-the-todo-app\" class=\"headerlink\" title=\"Initializing the todo-app\"></a>Initializing the <code>todo-app</code></h2><p>Like <code>@angular/cli</code> for Angular, there is <a href=\"https://create-react-app.dev/\" target=\"_blank\" rel=\"noopener\"><code>create-react-app</code></a> for React. I have initialized the app using the following way.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx create-react-app todo-app</span><br></pre></td></tr></table></figure>\n<p>This created the folder and installs the default dependencies needed for an app to start. For example,</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"dependencies\": &#123;</span><br><span class=\"line\">    \"react\": \"^16.9.0\",</span><br><span class=\"line\">    \"react-dom\": \"^16.9.0\",</span><br><span class=\"line\">    \"react-scripts\": \"3.1.1\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>react</code> for the React framework itselt and <code>react-dom</code> for DOM manipulation, I suppose.</p>\n<p>It does come with some boilerplate code and a starter page with some links like the <strong>Getting Started</strong> and <strong>Tour of Heroes</strong> links for Angular starter page.</p>\n<h2 id=\"Create-the-app\"><a href=\"#Create-the-app\" class=\"headerlink\" title=\"Create the app\"></a>Create the app</h2><p>Then I just started editing the stuff that was already in place and ended up with an working Todo app after an hour.</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// App.jsx</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">      newTodo: <span class=\"string\">''</span>,</span><br><span class=\"line\">      todos: [</span><br><span class=\"line\">        <span class=\"string\">'Schoonmaken'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Boodschappen doen'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Espanol Oefeningen'</span>,</span><br><span class=\"line\">        <span class=\"string\">'podcast Luisteren'</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange = <span class=\"function\">(<span class=\"params\">&#123; target: &#123; value &#125; &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">newTodo</span>: value &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  addNewTodo(e) &#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state.newTodo &amp;&amp;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">        todos: [...this.state.todos, <span class=\"keyword\">this</span>.state.newTodo],</span><br><span class=\"line\">        newTodo: <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  removeTodo(index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      todos: [...this.state.todos.filter(<span class=\"function\">(<span class=\"params\">_value, i</span>) =&gt;</span> i !== index)]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">        &lt;header className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">          &lt;form</span><br><span class=\"line\">            className=<span class=\"string\">\"todo-new\"</span></span><br><span class=\"line\">            noValidate</span><br><span class=\"line\">            onSubmit=&#123;(e) =&gt; <span class=\"keyword\">this</span>.addNewTodo(e)&#125;</span><br><span class=\"line\">          &gt;</span><br><span class=\"line\">            &lt;input</span><br><span class=\"line\">              className=<span class=\"string\">\"todo-new__input\"</span></span><br><span class=\"line\">              type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">              name=<span class=\"string\">\"todo-new\"</span></span><br><span class=\"line\">              id=<span class=\"string\">\"todo-new\"</span></span><br><span class=\"line\">              value=&#123;<span class=\"keyword\">this</span>.state.newTodo&#125;</span><br><span class=\"line\">              onChange=&#123;(e) =&gt; <span class=\"keyword\">this</span>.handleChange(e)&#125;</span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">            &lt;button</span><br><span class=\"line\">              className=<span class=\"string\">\"todo-new__add\"</span></span><br><span class=\"line\">              onClick=&#123;(e) =&gt; <span class=\"keyword\">this</span>.addNewTodo(e)&#125;</span><br><span class=\"line\">            &gt;</span><br><span class=\"line\">              Add</span><br><span class=\"line\">            &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;TodoList</span><br><span class=\"line\">            todos=&#123;<span class=\"keyword\">this</span>.state.todos&#125;</span><br><span class=\"line\">            removeTodo=&#123;(i) =&gt; <span class=\"keyword\">this</span>.removeTodo(i)&#125;</span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/header&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n<p>To get to know the communication between components, I created a child component called <code>TodoList</code> which worries about displaying the list of todos alone.</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// todo-list.jsx</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"todo-list\"</span>&gt;</span><br><span class=\"line\">        &#123;<span class=\"keyword\">this</span>.props.todos.map(<span class=\"function\">(<span class=\"params\">todo, index</span>) =&gt;</span> (</span><br><span class=\"line\">          &lt;div className=<span class=\"string\">\"todo-list__item\"</span> key=&#123;index&#125;&gt;</span><br><span class=\"line\">            &lt;span&gt;&#123;todo&#125;&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;span</span></span><br><span class=\"line\"><span class=\"regexp\">              className=\"todo-list__item--remove\"</span></span><br><span class=\"line\"><span class=\"regexp\">              onClick=&#123;() =&gt; this.props.removeTodo(index)&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">            &gt;</span></span><br><span class=\"line\"><span class=\"regexp\">              x</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>span&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        ))&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>I am surprised to see that it was done within a few lines of code. O_O I like it really! I am already feeling cheating on Angular &gt;_O</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span>, document.getElementById('root'));</span></span><br></pre></td></tr></table></figure>\n<p>That is it! A working todo app in few hours, mostly because I was bit adament on fixing few things on my own by trail and error. I like it that way as it makes me to think logically and it becomes hard to forget once you found the solution after a struggle for some time on your own! O_o</p>\n<h2 id=\"Live-DEMO-todo-app-ashokma-com-netlify-com\"><a href=\"#Live-DEMO-todo-app-ashokma-com-netlify-com\" class=\"headerlink\" title=\"Live DEMO: todo-app-ashokma-com.netlify.com\"></a>Live DEMO: <a href=\"https://todo-app-ashokma-com.netlify.com\" target=\"_blank\" rel=\"noopener\">todo-app-ashokma-com.netlify.com</a></h2>"},{"title":"Linux: How to see the installed OS version from terminal","icon":"fas fa-terminal","date":"2019-03-17T15:49:11.000Z","_content":"\n## Just open the os-release file\n\nIt is nice to know to see the OS version installed in one's linux machine. This might come in handy to check the version installed in a running docker container or other virtual machines.\n\nTo check the OS version and configs, just run the following command:\n\n```\n    $ cat /etc/os-release\n```\n\nThis should output something like:\n\n```\n    NAME=\"Pop!_OS\"\n    VERSION=\"18.10\"\n    ID=ubuntu\n    ID_LIKE=debian\n    PRETTY_NAME=\"Pop!_OS 18.10\"\n    VERSION_ID=\"18.10\"\n    HOME_URL=\"https://system76.com/pop\"\n    SUPPORT_URL=\"http://support.system76.com\"\n    BUG_REPORT_URL=\"https://github.com/pop-os/pop/issues\"\n    PRIVACY_POLICY_URL=\"https://system76.com/privacy\"\n    VERSION_CODENAME=cosmic\n    UBUNTU_CODENAME=cosmic\n```\n\nSince I have a [System76 Galago Pro](/2019/02/20/My-new-laptop-System76-Galago-Pro/), I see the above configuration.\n\n> The information you see always depends on your machine's manufacturer. However, the properties are same across linux distributions.\n\n## Others:\n\n### 1. `lsb_release` command\n\nThe lsb_release command gives LSB (Linux Standard Base) and distribution-specific information on the CLI. The usage is:\n\n```\n    $ lsb_release -a\n```\n\noutputs something like:\n\n```\n    No LSB modules are available.\n    Distributor ID:\tUbuntu\n    Description:\tPop!_OS 18.10\n    Release:\t18.10\n    Codename:\tcosmic\n```\n\nAs I chose the Ubuntu flavoured [System76 Pop!\\_OS](//system76.com/pop), I do not have any LSB modules to be shown.\n\n### 2. `hostnamectl` command\n\nUse hostnamectl command to **query and change** the system hostname and related settings. Just type the following command to check OS name and Linux kernel version:\n\n```\n    $ hostnamectl status\n```\n\nor just\n\n```\n    $ hostnamectl\n```\n\noutputs something like:\n\n```\n   Static hostname: pop-os\n         Icon name: computer-laptop\n           Chassis: laptop\n        Machine ID: 828e0ab12c145d632919eeed5c6ae1a7\n           Boot ID: f4b0a67a325a4aa8b1dfceee0a4aadcc\n  Operating System: Pop!_OS 18.10\n            Kernel: Linux 4.18.0-16-generic\n      Architecture: x86-64\n\n```\n\n### 3. `uname` command\n\nJust print Linux kernel version, run:\n\n```\n    $ uname -r\n\n    4.18.0-16-generic\n```\n\nto see all available options:\n\n```\n    $ uname -a\n\n    Linux\n    pop-os\n    4.18.0-16-generic\n    #17pop0-Ubuntu\n    SMP\n    Fri Mar 8 17:52:57 UTC 2019 (last updated timestamp)\n    x86_64 x86_64 x86_64 GNU/Linux\n```\n","source":"_posts/Linux-How-to-see-the-installed-OS-version-from-terminal-2019-03-17.md","raw":"---\ntitle: 'Linux: How to see the installed OS version from terminal'\ntags:\n  - Blog\n  - How To\n  - Linux\n  - Pop!_OS\n  - Terminal Usage\nicon: fas fa-terminal\ndate: 2019-03-17 16:49:11\n---\n\n## Just open the os-release file\n\nIt is nice to know to see the OS version installed in one's linux machine. This might come in handy to check the version installed in a running docker container or other virtual machines.\n\nTo check the OS version and configs, just run the following command:\n\n```\n    $ cat /etc/os-release\n```\n\nThis should output something like:\n\n```\n    NAME=\"Pop!_OS\"\n    VERSION=\"18.10\"\n    ID=ubuntu\n    ID_LIKE=debian\n    PRETTY_NAME=\"Pop!_OS 18.10\"\n    VERSION_ID=\"18.10\"\n    HOME_URL=\"https://system76.com/pop\"\n    SUPPORT_URL=\"http://support.system76.com\"\n    BUG_REPORT_URL=\"https://github.com/pop-os/pop/issues\"\n    PRIVACY_POLICY_URL=\"https://system76.com/privacy\"\n    VERSION_CODENAME=cosmic\n    UBUNTU_CODENAME=cosmic\n```\n\nSince I have a [System76 Galago Pro](/2019/02/20/My-new-laptop-System76-Galago-Pro/), I see the above configuration.\n\n> The information you see always depends on your machine's manufacturer. However, the properties are same across linux distributions.\n\n## Others:\n\n### 1. `lsb_release` command\n\nThe lsb_release command gives LSB (Linux Standard Base) and distribution-specific information on the CLI. The usage is:\n\n```\n    $ lsb_release -a\n```\n\noutputs something like:\n\n```\n    No LSB modules are available.\n    Distributor ID:\tUbuntu\n    Description:\tPop!_OS 18.10\n    Release:\t18.10\n    Codename:\tcosmic\n```\n\nAs I chose the Ubuntu flavoured [System76 Pop!\\_OS](//system76.com/pop), I do not have any LSB modules to be shown.\n\n### 2. `hostnamectl` command\n\nUse hostnamectl command to **query and change** the system hostname and related settings. Just type the following command to check OS name and Linux kernel version:\n\n```\n    $ hostnamectl status\n```\n\nor just\n\n```\n    $ hostnamectl\n```\n\noutputs something like:\n\n```\n   Static hostname: pop-os\n         Icon name: computer-laptop\n           Chassis: laptop\n        Machine ID: 828e0ab12c145d632919eeed5c6ae1a7\n           Boot ID: f4b0a67a325a4aa8b1dfceee0a4aadcc\n  Operating System: Pop!_OS 18.10\n            Kernel: Linux 4.18.0-16-generic\n      Architecture: x86-64\n\n```\n\n### 3. `uname` command\n\nJust print Linux kernel version, run:\n\n```\n    $ uname -r\n\n    4.18.0-16-generic\n```\n\nto see all available options:\n\n```\n    $ uname -a\n\n    Linux\n    pop-os\n    4.18.0-16-generic\n    #17pop0-Ubuntu\n    SMP\n    Fri Mar 8 17:52:57 UTC 2019 (last updated timestamp)\n    x86_64 x86_64 x86_64 GNU/Linux\n```\n","slug":"Linux-How-to-see-the-installed-OS-version-from-terminal","published":1,"updated":"2019-04-13T13:16:02.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6pa002mryi06adxij4j","content":"<h2 id=\"Just-open-the-os-release-file\"><a href=\"#Just-open-the-os-release-file\" class=\"headerlink\" title=\"Just open the os-release file\"></a>Just open the os-release file</h2><p>It is nice to know to see the OS version installed in one’s linux machine. This might come in handy to check the version installed in a running docker container or other virtual machines.</p>\n<p>To check the OS version and configs, just run the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /etc/os-release</span><br></pre></td></tr></table></figure>\n<p>This should output something like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAME=&quot;Pop!_OS&quot;</span><br><span class=\"line\">VERSION=&quot;18.10&quot;</span><br><span class=\"line\">ID=ubuntu</span><br><span class=\"line\">ID_LIKE=debian</span><br><span class=\"line\">PRETTY_NAME=&quot;Pop!_OS 18.10&quot;</span><br><span class=\"line\">VERSION_ID=&quot;18.10&quot;</span><br><span class=\"line\">HOME_URL=&quot;https://system76.com/pop&quot;</span><br><span class=\"line\">SUPPORT_URL=&quot;http://support.system76.com&quot;</span><br><span class=\"line\">BUG_REPORT_URL=&quot;https://github.com/pop-os/pop/issues&quot;</span><br><span class=\"line\">PRIVACY_POLICY_URL=&quot;https://system76.com/privacy&quot;</span><br><span class=\"line\">VERSION_CODENAME=cosmic</span><br><span class=\"line\">UBUNTU_CODENAME=cosmic</span><br></pre></td></tr></table></figure>\n<p>Since I have a <a href=\"/2019/02/20/My-new-laptop-System76-Galago-Pro/\">System76 Galago Pro</a>, I see the above configuration.</p>\n<blockquote>\n<p>The information you see always depends on your machine’s manufacturer. However, the properties are same across linux distributions.</p>\n</blockquote>\n<h2 id=\"Others\"><a href=\"#Others\" class=\"headerlink\" title=\"Others:\"></a>Others:</h2><h3 id=\"1-lsb-release-command\"><a href=\"#1-lsb-release-command\" class=\"headerlink\" title=\"1. lsb_release command\"></a>1. <code>lsb_release</code> command</h3><p>The lsb_release command gives LSB (Linux Standard Base) and distribution-specific information on the CLI. The usage is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsb_release -a</span><br></pre></td></tr></table></figure>\n<p>outputs something like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No LSB modules are available.</span><br><span class=\"line\">Distributor ID:\tUbuntu</span><br><span class=\"line\">Description:\tPop!_OS 18.10</span><br><span class=\"line\">Release:\t18.10</span><br><span class=\"line\">Codename:\tcosmic</span><br></pre></td></tr></table></figure>\n<p>As I chose the Ubuntu flavoured <a href=\"//system76.com/pop\">System76 Pop!_OS</a>, I do not have any LSB modules to be shown.</p>\n<h3 id=\"2-hostnamectl-command\"><a href=\"#2-hostnamectl-command\" class=\"headerlink\" title=\"2. hostnamectl command\"></a>2. <code>hostnamectl</code> command</h3><p>Use hostnamectl command to <strong>query and change</strong> the system hostname and related settings. Just type the following command to check OS name and Linux kernel version:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hostnamectl status</span><br></pre></td></tr></table></figure>\n<p>or just</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hostnamectl</span><br></pre></td></tr></table></figure>\n<p>outputs something like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Static hostname: pop-os</span><br><span class=\"line\">       Icon name: computer-laptop</span><br><span class=\"line\">         Chassis: laptop</span><br><span class=\"line\">      Machine ID: 828e0ab12c145d632919eeed5c6ae1a7</span><br><span class=\"line\">         Boot ID: f4b0a67a325a4aa8b1dfceee0a4aadcc</span><br><span class=\"line\">Operating System: Pop!_OS 18.10</span><br><span class=\"line\">          Kernel: Linux 4.18.0-16-generic</span><br><span class=\"line\">    Architecture: x86-64</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-uname-command\"><a href=\"#3-uname-command\" class=\"headerlink\" title=\"3. uname command\"></a>3. <code>uname</code> command</h3><p>Just print Linux kernel version, run:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uname -r</span><br><span class=\"line\"></span><br><span class=\"line\">4.18.0-16-generic</span><br></pre></td></tr></table></figure>\n<p>to see all available options:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uname -a</span><br><span class=\"line\"></span><br><span class=\"line\">Linux</span><br><span class=\"line\">pop-os</span><br><span class=\"line\">4.18.0-16-generic</span><br><span class=\"line\">#17pop0-Ubuntu</span><br><span class=\"line\">SMP</span><br><span class=\"line\">Fri Mar 8 17:52:57 UTC 2019 (last updated timestamp)</span><br><span class=\"line\">x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Just-open-the-os-release-file\"><a href=\"#Just-open-the-os-release-file\" class=\"headerlink\" title=\"Just open the os-release file\"></a>Just open the os-release file</h2><p>It is nice to know to see the OS version installed in one’s linux machine. This might come in handy to check the version installed in a running docker container or other virtual machines.</p>\n<p>To check the OS version and configs, just run the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /etc/os-release</span><br></pre></td></tr></table></figure>\n<p>This should output something like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAME=&quot;Pop!_OS&quot;</span><br><span class=\"line\">VERSION=&quot;18.10&quot;</span><br><span class=\"line\">ID=ubuntu</span><br><span class=\"line\">ID_LIKE=debian</span><br><span class=\"line\">PRETTY_NAME=&quot;Pop!_OS 18.10&quot;</span><br><span class=\"line\">VERSION_ID=&quot;18.10&quot;</span><br><span class=\"line\">HOME_URL=&quot;https://system76.com/pop&quot;</span><br><span class=\"line\">SUPPORT_URL=&quot;http://support.system76.com&quot;</span><br><span class=\"line\">BUG_REPORT_URL=&quot;https://github.com/pop-os/pop/issues&quot;</span><br><span class=\"line\">PRIVACY_POLICY_URL=&quot;https://system76.com/privacy&quot;</span><br><span class=\"line\">VERSION_CODENAME=cosmic</span><br><span class=\"line\">UBUNTU_CODENAME=cosmic</span><br></pre></td></tr></table></figure>\n<p>Since I have a <a href=\"/2019/02/20/My-new-laptop-System76-Galago-Pro/\">System76 Galago Pro</a>, I see the above configuration.</p>\n<blockquote>\n<p>The information you see always depends on your machine’s manufacturer. However, the properties are same across linux distributions.</p>\n</blockquote>\n<h2 id=\"Others\"><a href=\"#Others\" class=\"headerlink\" title=\"Others:\"></a>Others:</h2><h3 id=\"1-lsb-release-command\"><a href=\"#1-lsb-release-command\" class=\"headerlink\" title=\"1. lsb_release command\"></a>1. <code>lsb_release</code> command</h3><p>The lsb_release command gives LSB (Linux Standard Base) and distribution-specific information on the CLI. The usage is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsb_release -a</span><br></pre></td></tr></table></figure>\n<p>outputs something like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No LSB modules are available.</span><br><span class=\"line\">Distributor ID:\tUbuntu</span><br><span class=\"line\">Description:\tPop!_OS 18.10</span><br><span class=\"line\">Release:\t18.10</span><br><span class=\"line\">Codename:\tcosmic</span><br></pre></td></tr></table></figure>\n<p>As I chose the Ubuntu flavoured <a href=\"//system76.com/pop\">System76 Pop!_OS</a>, I do not have any LSB modules to be shown.</p>\n<h3 id=\"2-hostnamectl-command\"><a href=\"#2-hostnamectl-command\" class=\"headerlink\" title=\"2. hostnamectl command\"></a>2. <code>hostnamectl</code> command</h3><p>Use hostnamectl command to <strong>query and change</strong> the system hostname and related settings. Just type the following command to check OS name and Linux kernel version:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hostnamectl status</span><br></pre></td></tr></table></figure>\n<p>or just</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hostnamectl</span><br></pre></td></tr></table></figure>\n<p>outputs something like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Static hostname: pop-os</span><br><span class=\"line\">       Icon name: computer-laptop</span><br><span class=\"line\">         Chassis: laptop</span><br><span class=\"line\">      Machine ID: 828e0ab12c145d632919eeed5c6ae1a7</span><br><span class=\"line\">         Boot ID: f4b0a67a325a4aa8b1dfceee0a4aadcc</span><br><span class=\"line\">Operating System: Pop!_OS 18.10</span><br><span class=\"line\">          Kernel: Linux 4.18.0-16-generic</span><br><span class=\"line\">    Architecture: x86-64</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-uname-command\"><a href=\"#3-uname-command\" class=\"headerlink\" title=\"3. uname command\"></a>3. <code>uname</code> command</h3><p>Just print Linux kernel version, run:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uname -r</span><br><span class=\"line\"></span><br><span class=\"line\">4.18.0-16-generic</span><br></pre></td></tr></table></figure>\n<p>to see all available options:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uname -a</span><br><span class=\"line\"></span><br><span class=\"line\">Linux</span><br><span class=\"line\">pop-os</span><br><span class=\"line\">4.18.0-16-generic</span><br><span class=\"line\">#17pop0-Ubuntu</span><br><span class=\"line\">SMP</span><br><span class=\"line\">Fri Mar 8 17:52:57 UTC 2019 (last updated timestamp)</span><br><span class=\"line\">x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>\n"},{"title":"Linux: how to exclude specific folder during copy in terminal","icon":"fas fa-terminal","date":"2019-03-17T17:34:00.000Z","_content":"\nIt is fun and fast to work with terminals in linux. I remember staring at the unnecessary fancy GUI progress bars in Windows. Ugh! I still wonder who would want to see the information that is being displayed in the fancy GUI progress bars. With the latest ones they even added a graph progress bar (O_o o_O) WHY?!?\n\n## `rsync` command:\n\nRsync is a fast and versatile tool to copy files and folders locally, or to/from another host over any remote shell, or to/from a remote rsync daemon. Rsync has lot useful options. One of the useful option is `--exclude`. Using `exclude` option, we can exclude certain files/directories from copying as follows:\n\n```\n    $ rsync -av --progress ./ /home/ashokma/public_html/ --exclude=.*\n```\n\n## `cp` command:\n\n### Copy files\n\nBy default `cp` copies files from folder A to B.\n\n```\n    $ cp index.html /home/ashokma/public_html\n```\n\nIf we try to do the same for folders, we get the following log:\n\n```\n    $ cp . /home/ashokma/public_html\n\n    cp: omitting directory `.'\n```\n\n> Even If there are files under the current directory, those files are not copied to `public_html` folder.\n\n### Copy folders as well as files recursively\n\nIn order to copy the files and folders we need to supply recursive option as follows:\n\n```\n    $ cp -r . /home/ashokma/public_html/\n```\n\nSimple enough, is it not!\n\n### Ignore specific folders during copying\n\nWhen we supply the `-r`, `cp` command tries to copy everything recursively under that folder including the hidden folders. I get the following logs, when I try to do `cp -r` under a git repository.\n\n```\n    cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/92/9323f0a105212d26776adb68dea40bd2603ac6': Permission denied\n    cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/92/50cb893f62e0943e599e4384604f88ba540c0b': Permission denied\n    cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/e9/c123a5ea6c5a542d0c27b40542c850bad59ee4': Permission denied\n    cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/be/61ec8fb84e53ffbca728cccbf4a28d19c719d4': Permission denied\n    cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/pack/pack-a1adf7cf19c0465e14013d5ebf5a69c81fbc31da.idx': Permission denied\n    cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/pack/pack-a1adf7cf19c0465e14013d5ebf5a69c81fbc31da.pack': Permission denied\n    cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/bc/cac8d4bfe7b7586ec50610e939264bd8931f61': Permission denied\n```\n\nI do not want these `.git/objects` which are repository specific being copied. Now, we need to write a small query command excluding the directory we want:\n\n```\n    $ cp -r `ls --ignore=.*` /home/ashokma/public_html/\n```\n\n> `--ignore` takes [shell pattern](//www.gnu.org/software/findutils/manual/html_node/find_html/Shell-Pattern-Matching.html), so here it ignores the following folders for me: `.git`, `./`, `../`\n\n---\n\n> **Tip:** Prefer `rsync` over `cp` in case you want to copy a bunch and also want to copy to remote host as I do mostly for my blog. With the help of `rsync daemon`, it only copies the files those have changes. It works as it was named, it synchronizes the files to keep them update. ^\\_^\n","source":"_posts/Linux-how-to-exclude-specific-folder-during-copy-in-terminal-2019-03-17.md","raw":"---\ntitle: 'Linux: how to exclude specific folder during copy in terminal'\ntags:\n  - Blog\n  - How To\n  - Linux\n  - Pop!_OS\n  - Terminal Usage\nicon: fas fa-terminal\ndate: 2019-03-17 18:34:00\n---\n\nIt is fun and fast to work with terminals in linux. I remember staring at the unnecessary fancy GUI progress bars in Windows. Ugh! I still wonder who would want to see the information that is being displayed in the fancy GUI progress bars. With the latest ones they even added a graph progress bar (O_o o_O) WHY?!?\n\n## `rsync` command:\n\nRsync is a fast and versatile tool to copy files and folders locally, or to/from another host over any remote shell, or to/from a remote rsync daemon. Rsync has lot useful options. One of the useful option is `--exclude`. Using `exclude` option, we can exclude certain files/directories from copying as follows:\n\n```\n    $ rsync -av --progress ./ /home/ashokma/public_html/ --exclude=.*\n```\n\n## `cp` command:\n\n### Copy files\n\nBy default `cp` copies files from folder A to B.\n\n```\n    $ cp index.html /home/ashokma/public_html\n```\n\nIf we try to do the same for folders, we get the following log:\n\n```\n    $ cp . /home/ashokma/public_html\n\n    cp: omitting directory `.'\n```\n\n> Even If there are files under the current directory, those files are not copied to `public_html` folder.\n\n### Copy folders as well as files recursively\n\nIn order to copy the files and folders we need to supply recursive option as follows:\n\n```\n    $ cp -r . /home/ashokma/public_html/\n```\n\nSimple enough, is it not!\n\n### Ignore specific folders during copying\n\nWhen we supply the `-r`, `cp` command tries to copy everything recursively under that folder including the hidden folders. I get the following logs, when I try to do `cp -r` under a git repository.\n\n```\n    cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/92/9323f0a105212d26776adb68dea40bd2603ac6': Permission denied\n    cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/92/50cb893f62e0943e599e4384604f88ba540c0b': Permission denied\n    cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/e9/c123a5ea6c5a542d0c27b40542c850bad59ee4': Permission denied\n    cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/be/61ec8fb84e53ffbca728cccbf4a28d19c719d4': Permission denied\n    cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/pack/pack-a1adf7cf19c0465e14013d5ebf5a69c81fbc31da.idx': Permission denied\n    cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/pack/pack-a1adf7cf19c0465e14013d5ebf5a69c81fbc31da.pack': Permission denied\n    cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/bc/cac8d4bfe7b7586ec50610e939264bd8931f61': Permission denied\n```\n\nI do not want these `.git/objects` which are repository specific being copied. Now, we need to write a small query command excluding the directory we want:\n\n```\n    $ cp -r `ls --ignore=.*` /home/ashokma/public_html/\n```\n\n> `--ignore` takes [shell pattern](//www.gnu.org/software/findutils/manual/html_node/find_html/Shell-Pattern-Matching.html), so here it ignores the following folders for me: `.git`, `./`, `../`\n\n---\n\n> **Tip:** Prefer `rsync` over `cp` in case you want to copy a bunch and also want to copy to remote host as I do mostly for my blog. With the help of `rsync daemon`, it only copies the files those have changes. It works as it was named, it synchronizes the files to keep them update. ^\\_^\n","slug":"Linux-how-to-exclude-specific-folder-during-copy-in-terminal","published":1,"updated":"2019-04-13T13:16:17.955Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6pc002oryi0u8a6nev2","content":"<p>It is fun and fast to work with terminals in linux. I remember staring at the unnecessary fancy GUI progress bars in Windows. Ugh! I still wonder who would want to see the information that is being displayed in the fancy GUI progress bars. With the latest ones they even added a graph progress bar (O_o o_O) WHY?!?</p>\n<h2 id=\"rsync-command\"><a href=\"#rsync-command\" class=\"headerlink\" title=\"rsync command:\"></a><code>rsync</code> command:</h2><p>Rsync is a fast and versatile tool to copy files and folders locally, or to/from another host over any remote shell, or to/from a remote rsync daemon. Rsync has lot useful options. One of the useful option is <code>--exclude</code>. Using <code>exclude</code> option, we can exclude certain files/directories from copying as follows:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rsync -av --progress ./ /home/ashokma/public_html/ --exclude=.*</span><br></pre></td></tr></table></figure>\n<h2 id=\"cp-command\"><a href=\"#cp-command\" class=\"headerlink\" title=\"cp command:\"></a><code>cp</code> command:</h2><h3 id=\"Copy-files\"><a href=\"#Copy-files\" class=\"headerlink\" title=\"Copy files\"></a>Copy files</h3><p>By default <code>cp</code> copies files from folder A to B.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp index.html /home/ashokma/public_html</span><br></pre></td></tr></table></figure>\n<p>If we try to do the same for folders, we get the following log:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp . /home/ashokma/public_html</span><br><span class=\"line\"></span><br><span class=\"line\">cp: omitting directory `.&apos;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Even If there are files under the current directory, those files are not copied to <code>public_html</code> folder.</p>\n</blockquote>\n<h3 id=\"Copy-folders-as-well-as-files-recursively\"><a href=\"#Copy-folders-as-well-as-files-recursively\" class=\"headerlink\" title=\"Copy folders as well as files recursively\"></a>Copy folders as well as files recursively</h3><p>In order to copy the files and folders we need to supply recursive option as follows:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp -r . /home/ashokma/public_html/</span><br></pre></td></tr></table></figure>\n<p>Simple enough, is it not!</p>\n<h3 id=\"Ignore-specific-folders-during-copying\"><a href=\"#Ignore-specific-folders-during-copying\" class=\"headerlink\" title=\"Ignore specific folders during copying\"></a>Ignore specific folders during copying</h3><p>When we supply the <code>-r</code>, <code>cp</code> command tries to copy everything recursively under that folder including the hidden folders. I get the following logs, when I try to do <code>cp -r</code> under a git repository.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/92/9323f0a105212d26776adb68dea40bd2603ac6&apos;: Permission denied</span><br><span class=\"line\">cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/92/50cb893f62e0943e599e4384604f88ba540c0b&apos;: Permission denied</span><br><span class=\"line\">cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/e9/c123a5ea6c5a542d0c27b40542c850bad59ee4&apos;: Permission denied</span><br><span class=\"line\">cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/be/61ec8fb84e53ffbca728cccbf4a28d19c719d4&apos;: Permission denied</span><br><span class=\"line\">cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/pack/pack-a1adf7cf19c0465e14013d5ebf5a69c81fbc31da.idx&apos;: Permission denied</span><br><span class=\"line\">cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/pack/pack-a1adf7cf19c0465e14013d5ebf5a69c81fbc31da.pack&apos;: Permission denied</span><br><span class=\"line\">cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/bc/cac8d4bfe7b7586ec50610e939264bd8931f61&apos;: Permission denied</span><br></pre></td></tr></table></figure>\n<p>I do not want these <code>.git/objects</code> which are repository specific being copied. Now, we need to write a small query command excluding the directory we want:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp -r `ls --ignore=.*` /home/ashokma/public_html/</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>--ignore</code> takes <a href=\"//www.gnu.org/software/findutils/manual/html_node/find_html/Shell-Pattern-Matching.html\">shell pattern</a>, so here it ignores the following folders for me: <code>.git</code>, <code>./</code>, <code>../</code></p>\n</blockquote>\n<hr>\n<blockquote>\n<p><strong>Tip:</strong> Prefer <code>rsync</code> over <code>cp</code> in case you want to copy a bunch and also want to copy to remote host as I do mostly for my blog. With the help of <code>rsync daemon</code>, it only copies the files those have changes. It works as it was named, it synchronizes the files to keep them update. ^_^</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>It is fun and fast to work with terminals in linux. I remember staring at the unnecessary fancy GUI progress bars in Windows. Ugh! I still wonder who would want to see the information that is being displayed in the fancy GUI progress bars. With the latest ones they even added a graph progress bar (O_o o_O) WHY?!?</p>\n<h2 id=\"rsync-command\"><a href=\"#rsync-command\" class=\"headerlink\" title=\"rsync command:\"></a><code>rsync</code> command:</h2><p>Rsync is a fast and versatile tool to copy files and folders locally, or to/from another host over any remote shell, or to/from a remote rsync daemon. Rsync has lot useful options. One of the useful option is <code>--exclude</code>. Using <code>exclude</code> option, we can exclude certain files/directories from copying as follows:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rsync -av --progress ./ /home/ashokma/public_html/ --exclude=.*</span><br></pre></td></tr></table></figure>\n<h2 id=\"cp-command\"><a href=\"#cp-command\" class=\"headerlink\" title=\"cp command:\"></a><code>cp</code> command:</h2><h3 id=\"Copy-files\"><a href=\"#Copy-files\" class=\"headerlink\" title=\"Copy files\"></a>Copy files</h3><p>By default <code>cp</code> copies files from folder A to B.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp index.html /home/ashokma/public_html</span><br></pre></td></tr></table></figure>\n<p>If we try to do the same for folders, we get the following log:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp . /home/ashokma/public_html</span><br><span class=\"line\"></span><br><span class=\"line\">cp: omitting directory `.&apos;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Even If there are files under the current directory, those files are not copied to <code>public_html</code> folder.</p>\n</blockquote>\n<h3 id=\"Copy-folders-as-well-as-files-recursively\"><a href=\"#Copy-folders-as-well-as-files-recursively\" class=\"headerlink\" title=\"Copy folders as well as files recursively\"></a>Copy folders as well as files recursively</h3><p>In order to copy the files and folders we need to supply recursive option as follows:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp -r . /home/ashokma/public_html/</span><br></pre></td></tr></table></figure>\n<p>Simple enough, is it not!</p>\n<h3 id=\"Ignore-specific-folders-during-copying\"><a href=\"#Ignore-specific-folders-during-copying\" class=\"headerlink\" title=\"Ignore specific folders during copying\"></a>Ignore specific folders during copying</h3><p>When we supply the <code>-r</code>, <code>cp</code> command tries to copy everything recursively under that folder including the hidden folders. I get the following logs, when I try to do <code>cp -r</code> under a git repository.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/92/9323f0a105212d26776adb68dea40bd2603ac6&apos;: Permission denied</span><br><span class=\"line\">cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/92/50cb893f62e0943e599e4384604f88ba540c0b&apos;: Permission denied</span><br><span class=\"line\">cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/e9/c123a5ea6c5a542d0c27b40542c850bad59ee4&apos;: Permission denied</span><br><span class=\"line\">cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/be/61ec8fb84e53ffbca728cccbf4a28d19c719d4&apos;: Permission denied</span><br><span class=\"line\">cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/pack/pack-a1adf7cf19c0465e14013d5ebf5a69c81fbc31da.idx&apos;: Permission denied</span><br><span class=\"line\">cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/pack/pack-a1adf7cf19c0465e14013d5ebf5a69c81fbc31da.pack&apos;: Permission denied</span><br><span class=\"line\">cp: cannot create regular file `/home/ashokma/public_html/./.git/objects/bc/cac8d4bfe7b7586ec50610e939264bd8931f61&apos;: Permission denied</span><br></pre></td></tr></table></figure>\n<p>I do not want these <code>.git/objects</code> which are repository specific being copied. Now, we need to write a small query command excluding the directory we want:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp -r `ls --ignore=.*` /home/ashokma/public_html/</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>--ignore</code> takes <a href=\"//www.gnu.org/software/findutils/manual/html_node/find_html/Shell-Pattern-Matching.html\">shell pattern</a>, so here it ignores the following folders for me: <code>.git</code>, <code>./</code>, <code>../</code></p>\n</blockquote>\n<hr>\n<blockquote>\n<p><strong>Tip:</strong> Prefer <code>rsync</code> over <code>cp</code> in case you want to copy a bunch and also want to copy to remote host as I do mostly for my blog. With the help of <code>rsync daemon</code>, it only copies the files those have changes. It works as it was named, it synchronizes the files to keep them update. ^_^</p>\n</blockquote>\n"},{"title":"Run Postgres as Docker container","date":"2019-03-17T12:13:03.000Z","icon":"fab fa-docker","_content":"\n## PostgreSQL - An Introduction:\n\nPostgreSQL is a powerful, open source object-relational database system. It has more than **15 years of active development** and a proven architecture that has earned it a strong reputation for reliability, data integrity, and correctness.\n\nJust a quick overview for one should use the PostgreSQL:\n\n**PostgreSQL**\n\n- is developed by the PostgreSQL Global Development Group, a diverse group of multiple companies and individual contributors.\n- is free and open-source software and is released under the PostgreSQL license, a liberal Open Source license, similar to the BSD or MIT licenses.\n- is largely SQL compliant.\n- tackles concurrency efficiently with its MVCC implementation, which achieves very high levels of concurrency.\n- supports JSON and other NoSQL features like native XML support and key-value pairs with HSTORE. It also supports indexing JSON data for faster access.\n- supports a wide variety of programing languages including: C/C++, Java, JavaScript, .Net, R, Perl, Python, Ruby, Tcl and others; it’s even possible to run user-supplied code in separate processes (i.e. running as background workers).\n\nHope this helps of your wonder why it is better than other DBs out there like MySQL.\n\nNow, Lets see how we can run it as docker container.\n\n## Pull the docker image.\n\n```\n   $ docker pull postgres\n```\n\nThis will pull the latest stable release of PostgreSQL with the following OS release:\n\n```\n    PRETTY_NAME=\"Debian GNU/Linux 9 (stretch)\"\n    NAME=\"Debian GNU/Linux\"\n    VERSION_ID=\"9\"\n    VERSION=\"9 (stretch)\"\n    ID=debian\n    HOME_URL=\"https://www.debian.org/\"\n    SUPPORT_URL=\"https://www.debian.org/support\"\n    BUG_REPORT_URL=\"https://bugs.debian.org/\"\n```\n\nwhich makes the image size to around **312 MB**.\n\n> Prefer [`alpine`](//hub.docker.com/_/postgres#image-variants) versions to reduce the image size to lesser than **30 MB**.\n\n```\n    $ docker search alpine-postgres\n```\n\nwill show you multiple alpine versions out there.\n\nOnce the necessary image has been downloaded, you can verify it using,\n\n```\n    $ docker images\n```\n\n## Create a volume directory\n\nVolumes are easy and encouraged way to mount the data generated and used by the containers.\n\nLet's create a local directory to mount as [volume](//docs.docker.com/storage/volumes/)\n\n```\n    $ mkdir -p $HOME/docker/volumes/postgres\n```\n\n> **Tip:** `-p` option creates the subdirectories if necessary.\n\n## Run Postgres as container\n\nWe can do multiple things (create/run/mount) all at once in the following:\n\n```\n    $ docker run --name ashkeys-docker \\\n        -e POSTGRES_PASSWORD=ashkeys \\\n        -d -p 5432:5432 \\\n        -v $HOME/docker/volumes/postgres:/var/lib/postgresql/data postgres\n```\n\nWhat are we doing here:\n\n- `run`\n  -- creates and runs the newly created container with options in case specified.\n- `--name`\n  -- name of the container.\n- `-e`\n  -- Exposes environment variable `POSTGRES_PASSWORD` with `docker` as value. There are others too namely `POSTGRES_USER` and `POSTGRES_DB`. `POSTGRES_USER` sets the superuser name. If not provided, the superuser name defaults to postgres.\n- `-d`\n  -- Runs the container in detached mode. By default, docker attaches the container. It is common to run in detached mode like running it in the background.\n- `-p`\n  -- Bind port 5432 on `localhost` to port 5432 within the container.\n- `-v`\n  -- Mount `$HOME/docker/volumes/postgres` on the host machine to the container side volume path `/var/lib/postgresql/data` created inside the container. This ensures that postgres data persists even after the container is removed.\n- `postgres`\n  -- Last one is the image from which we want to create the docker container.\n\n## Connecting to our newly created postgres database\n\nSince our localhost port 5432 is bound to postgres container port, we can directly run our CRUD operations to `localhost:5432`. Lets connect to the database.\n\n```\n    $ psql -h localhost -U postgres -d postgres\n```\n\n> You might have to install the `psql` as global dependencies using [`npm`](/2019/02/18/install-nodejs-and-npm-pop-os/).\n","source":"_posts/Run-Postgres-as-Docker-container-2019-03-17.md","raw":"---\ntitle: Run Postgres as Docker container\ndate: 2019-03-17 13:13:03\ntags: [Tutorial, Setup, Docker, Postgres]\nicon: fab fa-docker\n---\n\n## PostgreSQL - An Introduction:\n\nPostgreSQL is a powerful, open source object-relational database system. It has more than **15 years of active development** and a proven architecture that has earned it a strong reputation for reliability, data integrity, and correctness.\n\nJust a quick overview for one should use the PostgreSQL:\n\n**PostgreSQL**\n\n- is developed by the PostgreSQL Global Development Group, a diverse group of multiple companies and individual contributors.\n- is free and open-source software and is released under the PostgreSQL license, a liberal Open Source license, similar to the BSD or MIT licenses.\n- is largely SQL compliant.\n- tackles concurrency efficiently with its MVCC implementation, which achieves very high levels of concurrency.\n- supports JSON and other NoSQL features like native XML support and key-value pairs with HSTORE. It also supports indexing JSON data for faster access.\n- supports a wide variety of programing languages including: C/C++, Java, JavaScript, .Net, R, Perl, Python, Ruby, Tcl and others; it’s even possible to run user-supplied code in separate processes (i.e. running as background workers).\n\nHope this helps of your wonder why it is better than other DBs out there like MySQL.\n\nNow, Lets see how we can run it as docker container.\n\n## Pull the docker image.\n\n```\n   $ docker pull postgres\n```\n\nThis will pull the latest stable release of PostgreSQL with the following OS release:\n\n```\n    PRETTY_NAME=\"Debian GNU/Linux 9 (stretch)\"\n    NAME=\"Debian GNU/Linux\"\n    VERSION_ID=\"9\"\n    VERSION=\"9 (stretch)\"\n    ID=debian\n    HOME_URL=\"https://www.debian.org/\"\n    SUPPORT_URL=\"https://www.debian.org/support\"\n    BUG_REPORT_URL=\"https://bugs.debian.org/\"\n```\n\nwhich makes the image size to around **312 MB**.\n\n> Prefer [`alpine`](//hub.docker.com/_/postgres#image-variants) versions to reduce the image size to lesser than **30 MB**.\n\n```\n    $ docker search alpine-postgres\n```\n\nwill show you multiple alpine versions out there.\n\nOnce the necessary image has been downloaded, you can verify it using,\n\n```\n    $ docker images\n```\n\n## Create a volume directory\n\nVolumes are easy and encouraged way to mount the data generated and used by the containers.\n\nLet's create a local directory to mount as [volume](//docs.docker.com/storage/volumes/)\n\n```\n    $ mkdir -p $HOME/docker/volumes/postgres\n```\n\n> **Tip:** `-p` option creates the subdirectories if necessary.\n\n## Run Postgres as container\n\nWe can do multiple things (create/run/mount) all at once in the following:\n\n```\n    $ docker run --name ashkeys-docker \\\n        -e POSTGRES_PASSWORD=ashkeys \\\n        -d -p 5432:5432 \\\n        -v $HOME/docker/volumes/postgres:/var/lib/postgresql/data postgres\n```\n\nWhat are we doing here:\n\n- `run`\n  -- creates and runs the newly created container with options in case specified.\n- `--name`\n  -- name of the container.\n- `-e`\n  -- Exposes environment variable `POSTGRES_PASSWORD` with `docker` as value. There are others too namely `POSTGRES_USER` and `POSTGRES_DB`. `POSTGRES_USER` sets the superuser name. If not provided, the superuser name defaults to postgres.\n- `-d`\n  -- Runs the container in detached mode. By default, docker attaches the container. It is common to run in detached mode like running it in the background.\n- `-p`\n  -- Bind port 5432 on `localhost` to port 5432 within the container.\n- `-v`\n  -- Mount `$HOME/docker/volumes/postgres` on the host machine to the container side volume path `/var/lib/postgresql/data` created inside the container. This ensures that postgres data persists even after the container is removed.\n- `postgres`\n  -- Last one is the image from which we want to create the docker container.\n\n## Connecting to our newly created postgres database\n\nSince our localhost port 5432 is bound to postgres container port, we can directly run our CRUD operations to `localhost:5432`. Lets connect to the database.\n\n```\n    $ psql -h localhost -U postgres -d postgres\n```\n\n> You might have to install the `psql` as global dependencies using [`npm`](/2019/02/18/install-nodejs-and-npm-pop-os/).\n","slug":"Run-Postgres-as-Docker-container","published":1,"updated":"2019-05-01T18:55:29.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6pe002qryi0kt2bki0u","content":"<h2 id=\"PostgreSQL-An-Introduction\"><a href=\"#PostgreSQL-An-Introduction\" class=\"headerlink\" title=\"PostgreSQL - An Introduction:\"></a>PostgreSQL - An Introduction:</h2><p>PostgreSQL is a powerful, open source object-relational database system. It has more than <strong>15 years of active development</strong> and a proven architecture that has earned it a strong reputation for reliability, data integrity, and correctness.</p>\n<p>Just a quick overview for one should use the PostgreSQL:</p>\n<p><strong>PostgreSQL</strong></p>\n<ul>\n<li>is developed by the PostgreSQL Global Development Group, a diverse group of multiple companies and individual contributors.</li>\n<li>is free and open-source software and is released under the PostgreSQL license, a liberal Open Source license, similar to the BSD or MIT licenses.</li>\n<li>is largely SQL compliant.</li>\n<li>tackles concurrency efficiently with its MVCC implementation, which achieves very high levels of concurrency.</li>\n<li>supports JSON and other NoSQL features like native XML support and key-value pairs with HSTORE. It also supports indexing JSON data for faster access.</li>\n<li>supports a wide variety of programing languages including: C/C++, Java, JavaScript, .Net, R, Perl, Python, Ruby, Tcl and others; it’s even possible to run user-supplied code in separate processes (i.e. running as background workers).</li>\n</ul>\n<p>Hope this helps of your wonder why it is better than other DBs out there like MySQL.</p>\n<p>Now, Lets see how we can run it as docker container.</p>\n<h2 id=\"Pull-the-docker-image\"><a href=\"#Pull-the-docker-image\" class=\"headerlink\" title=\"Pull the docker image.\"></a>Pull the docker image.</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull postgres</span><br></pre></td></tr></table></figure>\n<p>This will pull the latest stable release of PostgreSQL with the following OS release:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PRETTY_NAME=&quot;Debian GNU/Linux 9 (stretch)&quot;</span><br><span class=\"line\">NAME=&quot;Debian GNU/Linux&quot;</span><br><span class=\"line\">VERSION_ID=&quot;9&quot;</span><br><span class=\"line\">VERSION=&quot;9 (stretch)&quot;</span><br><span class=\"line\">ID=debian</span><br><span class=\"line\">HOME_URL=&quot;https://www.debian.org/&quot;</span><br><span class=\"line\">SUPPORT_URL=&quot;https://www.debian.org/support&quot;</span><br><span class=\"line\">BUG_REPORT_URL=&quot;https://bugs.debian.org/&quot;</span><br></pre></td></tr></table></figure>\n<p>which makes the image size to around <strong>312 MB</strong>.</p>\n<blockquote>\n<p>Prefer <a href=\"//hub.docker.com/_/postgres#image-variants\"><code>alpine</code></a> versions to reduce the image size to lesser than <strong>30 MB</strong>.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker search alpine-postgres</span><br></pre></td></tr></table></figure>\n<p>will show you multiple alpine versions out there.</p>\n<p>Once the necessary image has been downloaded, you can verify it using,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure>\n<h2 id=\"Create-a-volume-directory\"><a href=\"#Create-a-volume-directory\" class=\"headerlink\" title=\"Create a volume directory\"></a>Create a volume directory</h2><p>Volumes are easy and encouraged way to mount the data generated and used by the containers.</p>\n<p>Let’s create a local directory to mount as <a href=\"//docs.docker.com/storage/volumes/\">volume</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p $HOME/docker/volumes/postgres</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> <code>-p</code> option creates the subdirectories if necessary.</p>\n</blockquote>\n<h2 id=\"Run-Postgres-as-container\"><a href=\"#Run-Postgres-as-container\" class=\"headerlink\" title=\"Run Postgres as container\"></a>Run Postgres as container</h2><p>We can do multiple things (create/run/mount) all at once in the following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name ashkeys-docker \\</span><br><span class=\"line\">    -e POSTGRES_PASSWORD=ashkeys \\</span><br><span class=\"line\">    -d -p 5432:5432 \\</span><br><span class=\"line\">    -v $HOME/docker/volumes/postgres:/var/lib/postgresql/data postgres</span><br></pre></td></tr></table></figure>\n<p>What are we doing here:</p>\n<ul>\n<li><code>run</code><br>– creates and runs the newly created container with options in case specified.</li>\n<li><code>--name</code><br>– name of the container.</li>\n<li><code>-e</code><br>– Exposes environment variable <code>POSTGRES_PASSWORD</code> with <code>docker</code> as value. There are others too namely <code>POSTGRES_USER</code> and <code>POSTGRES_DB</code>. <code>POSTGRES_USER</code> sets the superuser name. If not provided, the superuser name defaults to postgres.</li>\n<li><code>-d</code><br>– Runs the container in detached mode. By default, docker attaches the container. It is common to run in detached mode like running it in the background.</li>\n<li><code>-p</code><br>– Bind port 5432 on <code>localhost</code> to port 5432 within the container.</li>\n<li><code>-v</code><br>– Mount <code>$HOME/docker/volumes/postgres</code> on the host machine to the container side volume path <code>/var/lib/postgresql/data</code> created inside the container. This ensures that postgres data persists even after the container is removed.</li>\n<li><code>postgres</code><br>– Last one is the image from which we want to create the docker container.</li>\n</ul>\n<h2 id=\"Connecting-to-our-newly-created-postgres-database\"><a href=\"#Connecting-to-our-newly-created-postgres-database\" class=\"headerlink\" title=\"Connecting to our newly created postgres database\"></a>Connecting to our newly created postgres database</h2><p>Since our localhost port 5432 is bound to postgres container port, we can directly run our CRUD operations to <code>localhost:5432</code>. Lets connect to the database.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ psql -h localhost -U postgres -d postgres</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>You might have to install the <code>psql</code> as global dependencies using <a href=\"/2019/02/18/install-nodejs-and-npm-pop-os/\"><code>npm</code></a>.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"PostgreSQL-An-Introduction\"><a href=\"#PostgreSQL-An-Introduction\" class=\"headerlink\" title=\"PostgreSQL - An Introduction:\"></a>PostgreSQL - An Introduction:</h2><p>PostgreSQL is a powerful, open source object-relational database system. It has more than <strong>15 years of active development</strong> and a proven architecture that has earned it a strong reputation for reliability, data integrity, and correctness.</p>\n<p>Just a quick overview for one should use the PostgreSQL:</p>\n<p><strong>PostgreSQL</strong></p>\n<ul>\n<li>is developed by the PostgreSQL Global Development Group, a diverse group of multiple companies and individual contributors.</li>\n<li>is free and open-source software and is released under the PostgreSQL license, a liberal Open Source license, similar to the BSD or MIT licenses.</li>\n<li>is largely SQL compliant.</li>\n<li>tackles concurrency efficiently with its MVCC implementation, which achieves very high levels of concurrency.</li>\n<li>supports JSON and other NoSQL features like native XML support and key-value pairs with HSTORE. It also supports indexing JSON data for faster access.</li>\n<li>supports a wide variety of programing languages including: C/C++, Java, JavaScript, .Net, R, Perl, Python, Ruby, Tcl and others; it’s even possible to run user-supplied code in separate processes (i.e. running as background workers).</li>\n</ul>\n<p>Hope this helps of your wonder why it is better than other DBs out there like MySQL.</p>\n<p>Now, Lets see how we can run it as docker container.</p>\n<h2 id=\"Pull-the-docker-image\"><a href=\"#Pull-the-docker-image\" class=\"headerlink\" title=\"Pull the docker image.\"></a>Pull the docker image.</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull postgres</span><br></pre></td></tr></table></figure>\n<p>This will pull the latest stable release of PostgreSQL with the following OS release:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PRETTY_NAME=&quot;Debian GNU/Linux 9 (stretch)&quot;</span><br><span class=\"line\">NAME=&quot;Debian GNU/Linux&quot;</span><br><span class=\"line\">VERSION_ID=&quot;9&quot;</span><br><span class=\"line\">VERSION=&quot;9 (stretch)&quot;</span><br><span class=\"line\">ID=debian</span><br><span class=\"line\">HOME_URL=&quot;https://www.debian.org/&quot;</span><br><span class=\"line\">SUPPORT_URL=&quot;https://www.debian.org/support&quot;</span><br><span class=\"line\">BUG_REPORT_URL=&quot;https://bugs.debian.org/&quot;</span><br></pre></td></tr></table></figure>\n<p>which makes the image size to around <strong>312 MB</strong>.</p>\n<blockquote>\n<p>Prefer <a href=\"//hub.docker.com/_/postgres#image-variants\"><code>alpine</code></a> versions to reduce the image size to lesser than <strong>30 MB</strong>.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker search alpine-postgres</span><br></pre></td></tr></table></figure>\n<p>will show you multiple alpine versions out there.</p>\n<p>Once the necessary image has been downloaded, you can verify it using,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure>\n<h2 id=\"Create-a-volume-directory\"><a href=\"#Create-a-volume-directory\" class=\"headerlink\" title=\"Create a volume directory\"></a>Create a volume directory</h2><p>Volumes are easy and encouraged way to mount the data generated and used by the containers.</p>\n<p>Let’s create a local directory to mount as <a href=\"//docs.docker.com/storage/volumes/\">volume</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p $HOME/docker/volumes/postgres</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> <code>-p</code> option creates the subdirectories if necessary.</p>\n</blockquote>\n<h2 id=\"Run-Postgres-as-container\"><a href=\"#Run-Postgres-as-container\" class=\"headerlink\" title=\"Run Postgres as container\"></a>Run Postgres as container</h2><p>We can do multiple things (create/run/mount) all at once in the following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name ashkeys-docker \\</span><br><span class=\"line\">    -e POSTGRES_PASSWORD=ashkeys \\</span><br><span class=\"line\">    -d -p 5432:5432 \\</span><br><span class=\"line\">    -v $HOME/docker/volumes/postgres:/var/lib/postgresql/data postgres</span><br></pre></td></tr></table></figure>\n<p>What are we doing here:</p>\n<ul>\n<li><code>run</code><br>– creates and runs the newly created container with options in case specified.</li>\n<li><code>--name</code><br>– name of the container.</li>\n<li><code>-e</code><br>– Exposes environment variable <code>POSTGRES_PASSWORD</code> with <code>docker</code> as value. There are others too namely <code>POSTGRES_USER</code> and <code>POSTGRES_DB</code>. <code>POSTGRES_USER</code> sets the superuser name. If not provided, the superuser name defaults to postgres.</li>\n<li><code>-d</code><br>– Runs the container in detached mode. By default, docker attaches the container. It is common to run in detached mode like running it in the background.</li>\n<li><code>-p</code><br>– Bind port 5432 on <code>localhost</code> to port 5432 within the container.</li>\n<li><code>-v</code><br>– Mount <code>$HOME/docker/volumes/postgres</code> on the host machine to the container side volume path <code>/var/lib/postgresql/data</code> created inside the container. This ensures that postgres data persists even after the container is removed.</li>\n<li><code>postgres</code><br>– Last one is the image from which we want to create the docker container.</li>\n</ul>\n<h2 id=\"Connecting-to-our-newly-created-postgres-database\"><a href=\"#Connecting-to-our-newly-created-postgres-database\" class=\"headerlink\" title=\"Connecting to our newly created postgres database\"></a>Connecting to our newly created postgres database</h2><p>Since our localhost port 5432 is bound to postgres container port, we can directly run our CRUD operations to <code>localhost:5432</code>. Lets connect to the database.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ psql -h localhost -U postgres -d postgres</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>You might have to install the <code>psql</code> as global dependencies using <a href=\"/2019/02/18/install-nodejs-and-npm-pop-os/\"><code>npm</code></a>.</p>\n</blockquote>\n"},{"title":"Run eclipse-mosquitto as docker container","icon":"fab fa-docker","date":"2019-04-13T13:02:16.000Z","_content":"\n\n## Eclipse Mosquitto - A quick intro:\n\nEclipse Mosquitto is an open source (EPL/EDL licensed) message broker that implements the MQTT protocol versions 3.1 and 3.1.1. Mosquitto is lightweight and is suitable for use on all devices from low power single board computers to full servers.\n\nThe MQTT protocol provides a lightweight method of carrying out messaging using a publish/subscribe model. This makes it suitable for Internet of Things messaging such as with low power sensors or mobile devices such as phones, embedded computers or microcontrollers.\n\n## Pull the docker image.\n\n```\n    $ docker pull eclipse-mosquitto\n```\n\nThis is will pull the latest docker image of `eclipse-mosquitto`.\n\nOnce the necessary image has been downloaded, you can verify it using,\n\n```\n    $ docker images\n```\n\n> **Tip:** Read the [official docker documentation](//docs.docker.com/samples/library/eclipse-mosquitto/) to understand more in detail.\n\n## Run mosquitto as container\n\nNow, we can run mosquitto as a docker container by running the following command:\n\n```\n    $ docker run --name=mosquitto -p 1883:1883 -p 9001:9001 -d eclipse-mosquitto\n```\n\nWhat are we doing here:\n\n- `run`\n  creates and runs the newly created container with options specified.\n- `--name`\n  name of the container.\n- `-p`\n  Maps the container ports to `localhost` ports. Each mapping should be specified with `-p`.\n- `-d`\n  Runs the container in detached mode. By default, docker attaches the container. It is common to run in detached mode like running it in the background.\n- `eclipse-mosquiito`\n  Last one is the image from which we want to create the docker container.\n\n## A quick deep down about the port mappings\n\n### Via MQTT Protocol:\n\nAs we mentioned earlier, mosquitto is used to communicate messages between two machines/apps. Obviously, they both should agree on a protocol to be used. As mosquitto is an implementation of MQTT protocol, it does communication by sending MQTT packets through its default port mapping `1883`. We can subscribe/publish a topic via this port.\n\n- MQTT\n  -- Establish TCP connection\n  -- Now we're talking MQTT\n  -- Send MQTT packets as defined by standard (publish/sub/unsub) or disconnect\n\n### Via WebSockets Protocol:\n\nIn addition to MQTT, mosquitto also comes up with websockets protocol so that our web browser based applications can do two-way communication with other devices/machines/apps. This can be mapped and exposed via `9001` port.\n\n- Websocket\n  -- Establish TCP connection\n  -- Send HTTP request with `Upgrade: websocket` header and other preparation\n  -- Except `101 Switching Protocols` response\n  -- Now we're talking Websocket, either side can send messages as defined by standard\n\n> **Tip:** Refer the [standard document](//tools.ietf.org/html/rfc6455) to learn more about the websocket protocol\n","source":"_posts/Run-eclipse-mosquitto-as-docker-container-2019-04-13.md","raw":"---\ntitle: Run eclipse-mosquitto as docker container\ntags:\n  - Tutorial\n  - Setup\n  - Docker\n  - Mosquitto\n  - MQTT\nicon: fab fa-docker\ndate: 2019-04-13 15:02:16\n---\n\n\n## Eclipse Mosquitto - A quick intro:\n\nEclipse Mosquitto is an open source (EPL/EDL licensed) message broker that implements the MQTT protocol versions 3.1 and 3.1.1. Mosquitto is lightweight and is suitable for use on all devices from low power single board computers to full servers.\n\nThe MQTT protocol provides a lightweight method of carrying out messaging using a publish/subscribe model. This makes it suitable for Internet of Things messaging such as with low power sensors or mobile devices such as phones, embedded computers or microcontrollers.\n\n## Pull the docker image.\n\n```\n    $ docker pull eclipse-mosquitto\n```\n\nThis is will pull the latest docker image of `eclipse-mosquitto`.\n\nOnce the necessary image has been downloaded, you can verify it using,\n\n```\n    $ docker images\n```\n\n> **Tip:** Read the [official docker documentation](//docs.docker.com/samples/library/eclipse-mosquitto/) to understand more in detail.\n\n## Run mosquitto as container\n\nNow, we can run mosquitto as a docker container by running the following command:\n\n```\n    $ docker run --name=mosquitto -p 1883:1883 -p 9001:9001 -d eclipse-mosquitto\n```\n\nWhat are we doing here:\n\n- `run`\n  creates and runs the newly created container with options specified.\n- `--name`\n  name of the container.\n- `-p`\n  Maps the container ports to `localhost` ports. Each mapping should be specified with `-p`.\n- `-d`\n  Runs the container in detached mode. By default, docker attaches the container. It is common to run in detached mode like running it in the background.\n- `eclipse-mosquiito`\n  Last one is the image from which we want to create the docker container.\n\n## A quick deep down about the port mappings\n\n### Via MQTT Protocol:\n\nAs we mentioned earlier, mosquitto is used to communicate messages between two machines/apps. Obviously, they both should agree on a protocol to be used. As mosquitto is an implementation of MQTT protocol, it does communication by sending MQTT packets through its default port mapping `1883`. We can subscribe/publish a topic via this port.\n\n- MQTT\n  -- Establish TCP connection\n  -- Now we're talking MQTT\n  -- Send MQTT packets as defined by standard (publish/sub/unsub) or disconnect\n\n### Via WebSockets Protocol:\n\nIn addition to MQTT, mosquitto also comes up with websockets protocol so that our web browser based applications can do two-way communication with other devices/machines/apps. This can be mapped and exposed via `9001` port.\n\n- Websocket\n  -- Establish TCP connection\n  -- Send HTTP request with `Upgrade: websocket` header and other preparation\n  -- Except `101 Switching Protocols` response\n  -- Now we're talking Websocket, either side can send messages as defined by standard\n\n> **Tip:** Refer the [standard document](//tools.ietf.org/html/rfc6455) to learn more about the websocket protocol\n","slug":"Run-eclipse-mosquitto-as-docker-container","published":1,"updated":"2019-04-13T13:03:18.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6pg002tryi0c7r84ozs","content":"<h2 id=\"Eclipse-Mosquitto-A-quick-intro\"><a href=\"#Eclipse-Mosquitto-A-quick-intro\" class=\"headerlink\" title=\"Eclipse Mosquitto - A quick intro:\"></a>Eclipse Mosquitto - A quick intro:</h2><p>Eclipse Mosquitto is an open source (EPL/EDL licensed) message broker that implements the MQTT protocol versions 3.1 and 3.1.1. Mosquitto is lightweight and is suitable for use on all devices from low power single board computers to full servers.</p>\n<p>The MQTT protocol provides a lightweight method of carrying out messaging using a publish/subscribe model. This makes it suitable for Internet of Things messaging such as with low power sensors or mobile devices such as phones, embedded computers or microcontrollers.</p>\n<h2 id=\"Pull-the-docker-image\"><a href=\"#Pull-the-docker-image\" class=\"headerlink\" title=\"Pull the docker image.\"></a>Pull the docker image.</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull eclipse-mosquitto</span><br></pre></td></tr></table></figure>\n<p>This is will pull the latest docker image of <code>eclipse-mosquitto</code>.</p>\n<p>Once the necessary image has been downloaded, you can verify it using,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> Read the <a href=\"//docs.docker.com/samples/library/eclipse-mosquitto/\">official docker documentation</a> to understand more in detail.</p>\n</blockquote>\n<h2 id=\"Run-mosquitto-as-container\"><a href=\"#Run-mosquitto-as-container\" class=\"headerlink\" title=\"Run mosquitto as container\"></a>Run mosquitto as container</h2><p>Now, we can run mosquitto as a docker container by running the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name=mosquitto -p 1883:1883 -p 9001:9001 -d eclipse-mosquitto</span><br></pre></td></tr></table></figure>\n<p>What are we doing here:</p>\n<ul>\n<li><code>run</code><br>creates and runs the newly created container with options specified.</li>\n<li><code>--name</code><br>name of the container.</li>\n<li><code>-p</code><br>Maps the container ports to <code>localhost</code> ports. Each mapping should be specified with <code>-p</code>.</li>\n<li><code>-d</code><br>Runs the container in detached mode. By default, docker attaches the container. It is common to run in detached mode like running it in the background.</li>\n<li><code>eclipse-mosquiito</code><br>Last one is the image from which we want to create the docker container.</li>\n</ul>\n<h2 id=\"A-quick-deep-down-about-the-port-mappings\"><a href=\"#A-quick-deep-down-about-the-port-mappings\" class=\"headerlink\" title=\"A quick deep down about the port mappings\"></a>A quick deep down about the port mappings</h2><h3 id=\"Via-MQTT-Protocol\"><a href=\"#Via-MQTT-Protocol\" class=\"headerlink\" title=\"Via MQTT Protocol:\"></a>Via MQTT Protocol:</h3><p>As we mentioned earlier, mosquitto is used to communicate messages between two machines/apps. Obviously, they both should agree on a protocol to be used. As mosquitto is an implementation of MQTT protocol, it does communication by sending MQTT packets through its default port mapping <code>1883</code>. We can subscribe/publish a topic via this port.</p>\n<ul>\n<li>MQTT<br>– Establish TCP connection<br>– Now we’re talking MQTT<br>– Send MQTT packets as defined by standard (publish/sub/unsub) or disconnect</li>\n</ul>\n<h3 id=\"Via-WebSockets-Protocol\"><a href=\"#Via-WebSockets-Protocol\" class=\"headerlink\" title=\"Via WebSockets Protocol:\"></a>Via WebSockets Protocol:</h3><p>In addition to MQTT, mosquitto also comes up with websockets protocol so that our web browser based applications can do two-way communication with other devices/machines/apps. This can be mapped and exposed via <code>9001</code> port.</p>\n<ul>\n<li>Websocket<br>– Establish TCP connection<br>– Send HTTP request with <code>Upgrade: websocket</code> header and other preparation<br>– Except <code>101 Switching Protocols</code> response<br>– Now we’re talking Websocket, either side can send messages as defined by standard</li>\n</ul>\n<blockquote>\n<p><strong>Tip:</strong> Refer the <a href=\"//tools.ietf.org/html/rfc6455\">standard document</a> to learn more about the websocket protocol</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Eclipse-Mosquitto-A-quick-intro\"><a href=\"#Eclipse-Mosquitto-A-quick-intro\" class=\"headerlink\" title=\"Eclipse Mosquitto - A quick intro:\"></a>Eclipse Mosquitto - A quick intro:</h2><p>Eclipse Mosquitto is an open source (EPL/EDL licensed) message broker that implements the MQTT protocol versions 3.1 and 3.1.1. Mosquitto is lightweight and is suitable for use on all devices from low power single board computers to full servers.</p>\n<p>The MQTT protocol provides a lightweight method of carrying out messaging using a publish/subscribe model. This makes it suitable for Internet of Things messaging such as with low power sensors or mobile devices such as phones, embedded computers or microcontrollers.</p>\n<h2 id=\"Pull-the-docker-image\"><a href=\"#Pull-the-docker-image\" class=\"headerlink\" title=\"Pull the docker image.\"></a>Pull the docker image.</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull eclipse-mosquitto</span><br></pre></td></tr></table></figure>\n<p>This is will pull the latest docker image of <code>eclipse-mosquitto</code>.</p>\n<p>Once the necessary image has been downloaded, you can verify it using,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tip:</strong> Read the <a href=\"//docs.docker.com/samples/library/eclipse-mosquitto/\">official docker documentation</a> to understand more in detail.</p>\n</blockquote>\n<h2 id=\"Run-mosquitto-as-container\"><a href=\"#Run-mosquitto-as-container\" class=\"headerlink\" title=\"Run mosquitto as container\"></a>Run mosquitto as container</h2><p>Now, we can run mosquitto as a docker container by running the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name=mosquitto -p 1883:1883 -p 9001:9001 -d eclipse-mosquitto</span><br></pre></td></tr></table></figure>\n<p>What are we doing here:</p>\n<ul>\n<li><code>run</code><br>creates and runs the newly created container with options specified.</li>\n<li><code>--name</code><br>name of the container.</li>\n<li><code>-p</code><br>Maps the container ports to <code>localhost</code> ports. Each mapping should be specified with <code>-p</code>.</li>\n<li><code>-d</code><br>Runs the container in detached mode. By default, docker attaches the container. It is common to run in detached mode like running it in the background.</li>\n<li><code>eclipse-mosquiito</code><br>Last one is the image from which we want to create the docker container.</li>\n</ul>\n<h2 id=\"A-quick-deep-down-about-the-port-mappings\"><a href=\"#A-quick-deep-down-about-the-port-mappings\" class=\"headerlink\" title=\"A quick deep down about the port mappings\"></a>A quick deep down about the port mappings</h2><h3 id=\"Via-MQTT-Protocol\"><a href=\"#Via-MQTT-Protocol\" class=\"headerlink\" title=\"Via MQTT Protocol:\"></a>Via MQTT Protocol:</h3><p>As we mentioned earlier, mosquitto is used to communicate messages between two machines/apps. Obviously, they both should agree on a protocol to be used. As mosquitto is an implementation of MQTT protocol, it does communication by sending MQTT packets through its default port mapping <code>1883</code>. We can subscribe/publish a topic via this port.</p>\n<ul>\n<li>MQTT<br>– Establish TCP connection<br>– Now we’re talking MQTT<br>– Send MQTT packets as defined by standard (publish/sub/unsub) or disconnect</li>\n</ul>\n<h3 id=\"Via-WebSockets-Protocol\"><a href=\"#Via-WebSockets-Protocol\" class=\"headerlink\" title=\"Via WebSockets Protocol:\"></a>Via WebSockets Protocol:</h3><p>In addition to MQTT, mosquitto also comes up with websockets protocol so that our web browser based applications can do two-way communication with other devices/machines/apps. This can be mapped and exposed via <code>9001</code> port.</p>\n<ul>\n<li>Websocket<br>– Establish TCP connection<br>– Send HTTP request with <code>Upgrade: websocket</code> header and other preparation<br>– Except <code>101 Switching Protocols</code> response<br>– Now we’re talking Websocket, either side can send messages as defined by standard</li>\n</ul>\n<blockquote>\n<p><strong>Tip:</strong> Refer the <a href=\"//tools.ietf.org/html/rfc6455\">standard document</a> to learn more about the websocket protocol</p>\n</blockquote>\n"},{"title":"Usecases for first-child and last-child in CSS","icon":"fab fa-css3-alt","date":"2019-06-10T09:43:21.000Z","_content":"\n\nEven though the word pseudo means _not real_ or _fake_, peudo classes of CSS are not of those. They come more meaningful with their specific use cases. Let us take a look at two of those pseudo classes in this blog.\n\n```html\n<div>\n  <span>1</span>\n  <span>2</span>\n  <span>3</span>\n  <span>4</span>\n  <span>5</span>\n</div>\n```\n\nAs we have our rating numbers, now we want to notify the user which is the low and the high end. We can do the same using our fancy `first-child` and `last-child` pseudo classes.\n\n```css\ndiv {\n  font-size: 30;\n}\n\nspan {\n  padding: 5px;\n  border: 2px solid black;\n}\n\nspan:first-child {\n  background-color: orange;\n}\n\nspan:last-child {\n  background-color: greenyellow;\n}\n```\n\n![Highlighting first and last numbers](first-child_last-child.png 'Highlighting first and last numbers')\n\nBelow we use the same peudo classes to highlight a table's header and footer. ^\\_^\n\n```html\n<section>\n  <div>Tech Stack</div>\n  <div>JS</div>\n  <div>CSS</div>\n  <div>HTML</div>\n  <div>Angular</div>\n  <div>GraphQL</div>\n  <div>Total - 5</div>\n</section>\n```\n\n```css\nsection {\n  font-size: 30;\n  width: 200px;\n}\n\ndiv {\n  padding: 5px;\n  border: 2px solid black;\n}\n\ndiv:first-child {\n  background-color: gray;\n}\n\ndiv:last-child {\n  background-color: gray;\n}\n```\n\n![Highlighting first and last rows](first-row_last-row.png 'Highlighting first and last rows')\n","source":"_posts/Usecases-for-first-child-and-last-child-in-css-2019-06-10.md","raw":"---\ntitle: Usecases for first-child and last-child in CSS\ntags:\n  - Usecase\n  - Pseudo classes\n  - CSS\nicon: fab fa-css3-alt\ndate: 2019-06-10 11:43:21\n---\n\n\nEven though the word pseudo means _not real_ or _fake_, peudo classes of CSS are not of those. They come more meaningful with their specific use cases. Let us take a look at two of those pseudo classes in this blog.\n\n```html\n<div>\n  <span>1</span>\n  <span>2</span>\n  <span>3</span>\n  <span>4</span>\n  <span>5</span>\n</div>\n```\n\nAs we have our rating numbers, now we want to notify the user which is the low and the high end. We can do the same using our fancy `first-child` and `last-child` pseudo classes.\n\n```css\ndiv {\n  font-size: 30;\n}\n\nspan {\n  padding: 5px;\n  border: 2px solid black;\n}\n\nspan:first-child {\n  background-color: orange;\n}\n\nspan:last-child {\n  background-color: greenyellow;\n}\n```\n\n![Highlighting first and last numbers](first-child_last-child.png 'Highlighting first and last numbers')\n\nBelow we use the same peudo classes to highlight a table's header and footer. ^\\_^\n\n```html\n<section>\n  <div>Tech Stack</div>\n  <div>JS</div>\n  <div>CSS</div>\n  <div>HTML</div>\n  <div>Angular</div>\n  <div>GraphQL</div>\n  <div>Total - 5</div>\n</section>\n```\n\n```css\nsection {\n  font-size: 30;\n  width: 200px;\n}\n\ndiv {\n  padding: 5px;\n  border: 2px solid black;\n}\n\ndiv:first-child {\n  background-color: gray;\n}\n\ndiv:last-child {\n  background-color: gray;\n}\n```\n\n![Highlighting first and last rows](first-row_last-row.png 'Highlighting first and last rows')\n","slug":"Usecases-for-first-child-and-last-child-in-css","published":1,"updated":"2019-06-10T06:13:21.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6pi002vryi0emv7noi9","content":"<p>Even though the word pseudo means <em>not real</em> or <em>fake</em>, peudo classes of CSS are not of those. They come more meaningful with their specific use cases. Let us take a look at two of those pseudo classes in this blog.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>As we have our rating numbers, now we want to notify the user which is the low and the high end. We can do the same using our fancy <code>first-child</code> and <code>last-child</code> pseudo classes.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">30</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">:first-child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: orange;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: greenyellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"first-child_last-child.png\" alt=\"Highlighting first and last numbers\" title=\"Highlighting first and last numbers\"></p>\n<p>Below we use the same peudo classes to highlight a table’s header and footer. ^_^</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Tech Stack<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>JS<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>CSS<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>HTML<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Angular<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>GraphQL<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Total - 5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">section</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">30</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:first-child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: gray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: gray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"first-row_last-row.png\" alt=\"Highlighting first and last rows\" title=\"Highlighting first and last rows\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Even though the word pseudo means <em>not real</em> or <em>fake</em>, peudo classes of CSS are not of those. They come more meaningful with their specific use cases. Let us take a look at two of those pseudo classes in this blog.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>As we have our rating numbers, now we want to notify the user which is the low and the high end. We can do the same using our fancy <code>first-child</code> and <code>last-child</code> pseudo classes.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">30</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">:first-child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: orange;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: greenyellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"first-child_last-child.png\" alt=\"Highlighting first and last numbers\" title=\"Highlighting first and last numbers\"></p>\n<p>Below we use the same peudo classes to highlight a table’s header and footer. ^_^</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Tech Stack<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>JS<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>CSS<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>HTML<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Angular<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>GraphQL<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Total - 5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">section</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">30</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:first-child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: gray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: gray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"first-row_last-row.png\" alt=\"Highlighting first and last rows\" title=\"Highlighting first and last rows\"></p>\n"},{"title":"My new laptop - System76 - Galago Pro","date":"2019-02-20T16:34:56.000Z","icon":"fas fa-laptop-code","_content":"\nFew days back I got my most awaited laptop Galago Pro from System76. To be honest, I was stalking them for long time. Whenever I think of buying my own personal machine, I go to their site and do window shopping. They have this very nice checkout option where you can select most of the configurations and extend it bit more. I often found myself over there doing the same and at the end after seeing the total price at the bottom, with a sigh, I close my browser.\n\nThis was going on for a while until I saved enough amount to go for my own developer machine. It was exciting to do the quote and order it from System76. The configuration is:\n\n```\n    Pop!_OS 18.10 (64-bit) with full-disk encryption \t\n    14″ Matte FHD 1080p Matte FHD Display \t\n    3.9 GHz i5-8265U (1.6 up to 3.90 GHz - 6MB Cache – 4 Cores – 8 Threads) \t\n    16 GB Dual Channel DDR4 at 2400MHz (2× 8 GB)\n    250 GB M.2 SSD\n    1 TB 2.5″ Solid State Hybrid Drive\n    WiFi up to 867 Mbps + Bluetooth \t\n    2 Year Limited Parts and Labor Warranty\n    3 Day Rush Assembly Service\n\n    Total : $1,480.66\n```\nIn addition, I had to pay around &euro; 290, due to Dutch customs T_T. I was expecting that anyway.\n\nYes, I opted for a 3 day rush assembly. I could not wait to get hold of it ^_^. It was here within a week and half and I could be able to track the package in UPS site from System76 package tracking section. I was informed that the package will arrive on a specific day. It was helpful for me to do work from home and inform my team accordingly.\n\n![Reusable package](system_76_reusable_package.jpg)\n\nI like the thinking of reusable package and it is the first time I am looking at one. It was compact and uptight. Next thing was the welcome card with some stickers. It is so cool! I was not expecting it in the package though.\n\n![Welcome card with some cool stickers](system_76_gift_card.jpg)\n\nI am keep the stickers away from fresh new laptop for now. I am still enjoying the original look and feel of my pretty Galago.\n\n![The First Look](system_76_first_look.jpg)\n\nWhen I unfolded the laptop, it was silver-white beauty. A look alike of macbook but a bit more smaller touchpad. The best thing about the keyboard is, it has a sepearate `Home` and `End` buttons which are in common compact laptops nowadays often integrated as part of `Fn` blue keys under `Left` and `Right` arrow keys respectively. Those two keys programmers use a lot during a code selection for refactoring or moving the cursor quickly.\n\n![The Pop!_OS installation](system_76_installation.jpg)\n\nWhen powered up, it started installing the [*POP!_OS*](//system76.com/pop) with a pretty output. Seems pretty to me! This is the first time I am installing a software without a GUI showing me unnecessary details like - *What is the writing speed? How long will it take?* ^_^\n\n![The Settings Configuration setup](system_76_settings_configuration.jpg)\n\nUpon successful installation, comes a fancy pop up which takes you through the basic configuration settings you do with most of the devices like you did for your smartphone.\n\n![Unleash Your Potential](system_76_unleash_your_potential.jpg)\n\nIt was all set and ready to go now. As it demands, it is time to \n\n> Unleash My Potential!\n---------\n***P.S:*** I will make a new post about my usage experiences of my Galago Pro soon!","source":"_posts/My-new-laptop-System76-Galago-Pro-2019-02-22.md","raw":"---\ntitle: My new laptop - System76 - Galago Pro\ndate: 2019-02-20 17:34:56\ntags: [Blog, Pop!_OS]\nicon: fas fa-laptop-code\n---\n\nFew days back I got my most awaited laptop Galago Pro from System76. To be honest, I was stalking them for long time. Whenever I think of buying my own personal machine, I go to their site and do window shopping. They have this very nice checkout option where you can select most of the configurations and extend it bit more. I often found myself over there doing the same and at the end after seeing the total price at the bottom, with a sigh, I close my browser.\n\nThis was going on for a while until I saved enough amount to go for my own developer machine. It was exciting to do the quote and order it from System76. The configuration is:\n\n```\n    Pop!_OS 18.10 (64-bit) with full-disk encryption \t\n    14″ Matte FHD 1080p Matte FHD Display \t\n    3.9 GHz i5-8265U (1.6 up to 3.90 GHz - 6MB Cache – 4 Cores – 8 Threads) \t\n    16 GB Dual Channel DDR4 at 2400MHz (2× 8 GB)\n    250 GB M.2 SSD\n    1 TB 2.5″ Solid State Hybrid Drive\n    WiFi up to 867 Mbps + Bluetooth \t\n    2 Year Limited Parts and Labor Warranty\n    3 Day Rush Assembly Service\n\n    Total : $1,480.66\n```\nIn addition, I had to pay around &euro; 290, due to Dutch customs T_T. I was expecting that anyway.\n\nYes, I opted for a 3 day rush assembly. I could not wait to get hold of it ^_^. It was here within a week and half and I could be able to track the package in UPS site from System76 package tracking section. I was informed that the package will arrive on a specific day. It was helpful for me to do work from home and inform my team accordingly.\n\n![Reusable package](system_76_reusable_package.jpg)\n\nI like the thinking of reusable package and it is the first time I am looking at one. It was compact and uptight. Next thing was the welcome card with some stickers. It is so cool! I was not expecting it in the package though.\n\n![Welcome card with some cool stickers](system_76_gift_card.jpg)\n\nI am keep the stickers away from fresh new laptop for now. I am still enjoying the original look and feel of my pretty Galago.\n\n![The First Look](system_76_first_look.jpg)\n\nWhen I unfolded the laptop, it was silver-white beauty. A look alike of macbook but a bit more smaller touchpad. The best thing about the keyboard is, it has a sepearate `Home` and `End` buttons which are in common compact laptops nowadays often integrated as part of `Fn` blue keys under `Left` and `Right` arrow keys respectively. Those two keys programmers use a lot during a code selection for refactoring or moving the cursor quickly.\n\n![The Pop!_OS installation](system_76_installation.jpg)\n\nWhen powered up, it started installing the [*POP!_OS*](//system76.com/pop) with a pretty output. Seems pretty to me! This is the first time I am installing a software without a GUI showing me unnecessary details like - *What is the writing speed? How long will it take?* ^_^\n\n![The Settings Configuration setup](system_76_settings_configuration.jpg)\n\nUpon successful installation, comes a fancy pop up which takes you through the basic configuration settings you do with most of the devices like you did for your smartphone.\n\n![Unleash Your Potential](system_76_unleash_your_potential.jpg)\n\nIt was all set and ready to go now. As it demands, it is time to \n\n> Unleash My Potential!\n---------\n***P.S:*** I will make a new post about my usage experiences of my Galago Pro soon!","slug":"My-new-laptop-System76-Galago-Pro","published":1,"updated":"2019-03-17T15:09:03.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6pk002yryi0b3rwy0c2","content":"<p>Few days back I got my most awaited laptop Galago Pro from System76. To be honest, I was stalking them for long time. Whenever I think of buying my own personal machine, I go to their site and do window shopping. They have this very nice checkout option where you can select most of the configurations and extend it bit more. I often found myself over there doing the same and at the end after seeing the total price at the bottom, with a sigh, I close my browser.</p>\n<p>This was going on for a while until I saved enough amount to go for my own developer machine. It was exciting to do the quote and order it from System76. The configuration is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pop!_OS 18.10 (64-bit) with full-disk encryption \t</span><br><span class=\"line\">14″ Matte FHD 1080p Matte FHD Display \t</span><br><span class=\"line\">3.9 GHz i5-8265U (1.6 up to 3.90 GHz - 6MB Cache – 4 Cores – 8 Threads) \t</span><br><span class=\"line\">16 GB Dual Channel DDR4 at 2400MHz (2× 8 GB)</span><br><span class=\"line\">250 GB M.2 SSD</span><br><span class=\"line\">1 TB 2.5″ Solid State Hybrid Drive</span><br><span class=\"line\">WiFi up to 867 Mbps + Bluetooth \t</span><br><span class=\"line\">2 Year Limited Parts and Labor Warranty</span><br><span class=\"line\">3 Day Rush Assembly Service</span><br><span class=\"line\"></span><br><span class=\"line\">Total : $1,480.66</span><br></pre></td></tr></table></figure>\n<p>In addition, I had to pay around &euro; 290, due to Dutch customs T_T. I was expecting that anyway.</p>\n<p>Yes, I opted for a 3 day rush assembly. I could not wait to get hold of it ^_^. It was here within a week and half and I could be able to track the package in UPS site from System76 package tracking section. I was informed that the package will arrive on a specific day. It was helpful for me to do work from home and inform my team accordingly.</p>\n<p><img src=\"system_76_reusable_package.jpg\" alt=\"Reusable package\"></p>\n<p>I like the thinking of reusable package and it is the first time I am looking at one. It was compact and uptight. Next thing was the welcome card with some stickers. It is so cool! I was not expecting it in the package though.</p>\n<p><img src=\"system_76_gift_card.jpg\" alt=\"Welcome card with some cool stickers\"></p>\n<p>I am keep the stickers away from fresh new laptop for now. I am still enjoying the original look and feel of my pretty Galago.</p>\n<p><img src=\"system_76_first_look.jpg\" alt=\"The First Look\"></p>\n<p>When I unfolded the laptop, it was silver-white beauty. A look alike of macbook but a bit more smaller touchpad. The best thing about the keyboard is, it has a sepearate <code>Home</code> and <code>End</code> buttons which are in common compact laptops nowadays often integrated as part of <code>Fn</code> blue keys under <code>Left</code> and <code>Right</code> arrow keys respectively. Those two keys programmers use a lot during a code selection for refactoring or moving the cursor quickly.</p>\n<p><img src=\"system_76_installation.jpg\" alt=\"The Pop!_OS installation\"></p>\n<p>When powered up, it started installing the <a href=\"//system76.com/pop\"><em>POP!_OS</em></a> with a pretty output. Seems pretty to me! This is the first time I am installing a software without a GUI showing me unnecessary details like - <em>What is the writing speed? How long will it take?</em> ^_^</p>\n<p><img src=\"system_76_settings_configuration.jpg\" alt=\"The Settings Configuration setup\"></p>\n<p>Upon successful installation, comes a fancy pop up which takes you through the basic configuration settings you do with most of the devices like you did for your smartphone.</p>\n<p><img src=\"system_76_unleash_your_potential.jpg\" alt=\"Unleash Your Potential\"></p>\n<p>It was all set and ready to go now. As it demands, it is time to </p>\n<blockquote>\n<p>Unleash My Potential!</p>\n</blockquote>\n<hr>\n<p><strong><em>P.S:</em></strong> I will make a new post about my usage experiences of my Galago Pro soon!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Few days back I got my most awaited laptop Galago Pro from System76. To be honest, I was stalking them for long time. Whenever I think of buying my own personal machine, I go to their site and do window shopping. They have this very nice checkout option where you can select most of the configurations and extend it bit more. I often found myself over there doing the same and at the end after seeing the total price at the bottom, with a sigh, I close my browser.</p>\n<p>This was going on for a while until I saved enough amount to go for my own developer machine. It was exciting to do the quote and order it from System76. The configuration is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pop!_OS 18.10 (64-bit) with full-disk encryption \t</span><br><span class=\"line\">14″ Matte FHD 1080p Matte FHD Display \t</span><br><span class=\"line\">3.9 GHz i5-8265U (1.6 up to 3.90 GHz - 6MB Cache – 4 Cores – 8 Threads) \t</span><br><span class=\"line\">16 GB Dual Channel DDR4 at 2400MHz (2× 8 GB)</span><br><span class=\"line\">250 GB M.2 SSD</span><br><span class=\"line\">1 TB 2.5″ Solid State Hybrid Drive</span><br><span class=\"line\">WiFi up to 867 Mbps + Bluetooth \t</span><br><span class=\"line\">2 Year Limited Parts and Labor Warranty</span><br><span class=\"line\">3 Day Rush Assembly Service</span><br><span class=\"line\"></span><br><span class=\"line\">Total : $1,480.66</span><br></pre></td></tr></table></figure>\n<p>In addition, I had to pay around &euro; 290, due to Dutch customs T_T. I was expecting that anyway.</p>\n<p>Yes, I opted for a 3 day rush assembly. I could not wait to get hold of it ^_^. It was here within a week and half and I could be able to track the package in UPS site from System76 package tracking section. I was informed that the package will arrive on a specific day. It was helpful for me to do work from home and inform my team accordingly.</p>\n<p><img src=\"system_76_reusable_package.jpg\" alt=\"Reusable package\"></p>\n<p>I like the thinking of reusable package and it is the first time I am looking at one. It was compact and uptight. Next thing was the welcome card with some stickers. It is so cool! I was not expecting it in the package though.</p>\n<p><img src=\"system_76_gift_card.jpg\" alt=\"Welcome card with some cool stickers\"></p>\n<p>I am keep the stickers away from fresh new laptop for now. I am still enjoying the original look and feel of my pretty Galago.</p>\n<p><img src=\"system_76_first_look.jpg\" alt=\"The First Look\"></p>\n<p>When I unfolded the laptop, it was silver-white beauty. A look alike of macbook but a bit more smaller touchpad. The best thing about the keyboard is, it has a sepearate <code>Home</code> and <code>End</code> buttons which are in common compact laptops nowadays often integrated as part of <code>Fn</code> blue keys under <code>Left</code> and <code>Right</code> arrow keys respectively. Those two keys programmers use a lot during a code selection for refactoring or moving the cursor quickly.</p>\n<p><img src=\"system_76_installation.jpg\" alt=\"The Pop!_OS installation\"></p>\n<p>When powered up, it started installing the <a href=\"//system76.com/pop\"><em>POP!_OS</em></a> with a pretty output. Seems pretty to me! This is the first time I am installing a software without a GUI showing me unnecessary details like - <em>What is the writing speed? How long will it take?</em> ^_^</p>\n<p><img src=\"system_76_settings_configuration.jpg\" alt=\"The Settings Configuration setup\"></p>\n<p>Upon successful installation, comes a fancy pop up which takes you through the basic configuration settings you do with most of the devices like you did for your smartphone.</p>\n<p><img src=\"system_76_unleash_your_potential.jpg\" alt=\"Unleash Your Potential\"></p>\n<p>It was all set and ready to go now. As it demands, it is time to </p>\n<blockquote>\n<p>Unleash My Potential!</p>\n</blockquote>\n<hr>\n<p><strong><em>P.S:</em></strong> I will make a new post about my usage experiences of my Galago Pro soon!</p>\n"},{"title":"Hexo deploy: Fatal: in unpopulated submodule `.deploy_git`","date":"2019-02-18T18:22:23.000Z","icon":"fab fa-blogger-b","_content":"\nToday, I checked out the hexo blog in my new laptop. It threw a fatal error when I tried to `hexo deploy` it. After trial and error for sometime, I found the quick and easy solution like *Try turning it off and on again!*\n\nFirst install the relevant dependencies: (I do deployment to `git`)\n\n```\n    $ npm install hexo-deployer-git --save\n```\n\nHere comes the universal solution:\n\n```\n    $ rm -rf .deploy_git\n    $ hexo g\n    $ hexo d\n```\n\n> Make sure you do not version the `.deploy_git` folder as it is specific to local environment and setup.\n","source":"_posts/hexo-fatal-in-unpopulated-submodule-deploy-git-2019-02-18.md","raw":"---\ntitle: 'Hexo deploy: Fatal: in unpopulated submodule `.deploy_git`'\ndate: 2019-02-18 19:22:23\ntags: [Blog, Setup, Hexo]\nicon: fab fa-blogger-b\n---\n\nToday, I checked out the hexo blog in my new laptop. It threw a fatal error when I tried to `hexo deploy` it. After trial and error for sometime, I found the quick and easy solution like *Try turning it off and on again!*\n\nFirst install the relevant dependencies: (I do deployment to `git`)\n\n```\n    $ npm install hexo-deployer-git --save\n```\n\nHere comes the universal solution:\n\n```\n    $ rm -rf .deploy_git\n    $ hexo g\n    $ hexo d\n```\n\n> Make sure you do not version the `.deploy_git` folder as it is specific to local environment and setup.\n","slug":"hexo-fatal-in-unpopulated-submodule-deploy-git","published":1,"updated":"2019-03-17T15:09:28.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6pm0030ryi0anoyfvce","content":"<p>Today, I checked out the hexo blog in my new laptop. It threw a fatal error when I tried to <code>hexo deploy</code> it. After trial and error for sometime, I found the quick and easy solution like <em>Try turning it off and on again!</em></p>\n<p>First install the relevant dependencies: (I do deployment to <code>git</code>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>Here comes the universal solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf .deploy_git</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Make sure you do not version the <code>.deploy_git</code> folder as it is specific to local environment and setup.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Today, I checked out the hexo blog in my new laptop. It threw a fatal error when I tried to <code>hexo deploy</code> it. After trial and error for sometime, I found the quick and easy solution like <em>Try turning it off and on again!</em></p>\n<p>First install the relevant dependencies: (I do deployment to <code>git</code>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>Here comes the universal solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf .deploy_git</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Make sure you do not version the <code>.deploy_git</code> folder as it is specific to local environment and setup.</p>\n</blockquote>\n"},{"title":"Install nodejs and npm in Pop!_OS","date":"2019-02-18T16:35:13.000Z","icon":"fab fa-node fa-npm","_content":"\nStart by updating the packages list by typing:\n\n```\n    $ sudo apt update\n```\n\nInstall `nodejs` using the `apt` package manager:\n\n```\n    $ sudo apt install nodejs npm\n```\n\nThe Node.js executable from the Ubuntu repositories is named `nodejs` instead of node because of a conflict with another package.\n\nTo launch the [REPL Terminal](//www.tutorialspoint.com/nodejs/nodejs_repl_terminal.htm): (Pressing `Ctrl + C` twice exits!)\n\n```\n    $ nodejs\n```\n\nTo verify the installation execute the following command:\n\n```\n    $ node -v && npm -v \n```","source":"_posts/install-nodejs-and-npm-pop-os-2019-02-18.md","raw":"---\ntitle: Install nodejs and npm in Pop!_OS\ndate: 2019-02-18 17:35:13\ntags: [Tutorial, Setup, Pop!_OS, nodejs, npm]\nicon: fab fa-node fa-npm\n---\n\nStart by updating the packages list by typing:\n\n```\n    $ sudo apt update\n```\n\nInstall `nodejs` using the `apt` package manager:\n\n```\n    $ sudo apt install nodejs npm\n```\n\nThe Node.js executable from the Ubuntu repositories is named `nodejs` instead of node because of a conflict with another package.\n\nTo launch the [REPL Terminal](//www.tutorialspoint.com/nodejs/nodejs_repl_terminal.htm): (Pressing `Ctrl + C` twice exits!)\n\n```\n    $ nodejs\n```\n\nTo verify the installation execute the following command:\n\n```\n    $ node -v && npm -v \n```","slug":"install-nodejs-and-npm-pop-os","published":1,"updated":"2019-03-17T15:07:58.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6po0033ryi0ju3nieka","content":"<p>Start by updating the packages list by typing:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt update</span><br></pre></td></tr></table></figure>\n<p>Install <code>nodejs</code> using the <code>apt</code> package manager:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt install nodejs npm</span><br></pre></td></tr></table></figure>\n<p>The Node.js executable from the Ubuntu repositories is named <code>nodejs</code> instead of node because of a conflict with another package.</p>\n<p>To launch the <a href=\"//www.tutorialspoint.com/nodejs/nodejs_repl_terminal.htm\">REPL Terminal</a>: (Pressing <code>Ctrl + C</code> twice exits!)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nodejs</span><br></pre></td></tr></table></figure>\n<p>To verify the installation execute the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v &amp;&amp; npm -v</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Start by updating the packages list by typing:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt update</span><br></pre></td></tr></table></figure>\n<p>Install <code>nodejs</code> using the <code>apt</code> package manager:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt install nodejs npm</span><br></pre></td></tr></table></figure>\n<p>The Node.js executable from the Ubuntu repositories is named <code>nodejs</code> instead of node because of a conflict with another package.</p>\n<p>To launch the <a href=\"//www.tutorialspoint.com/nodejs/nodejs_repl_terminal.htm\">REPL Terminal</a>: (Pressing <code>Ctrl + C</code> twice exits!)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nodejs</span><br></pre></td></tr></table></figure>\n<p>To verify the installation execute the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v &amp;&amp; npm -v</span><br></pre></td></tr></table></figure>"},{"title":"Weekend ride to Weert","date":"2019-02-17T20:52:57.000Z","icon":"fas fa-journal-whills","_content":"\nToday afternoon, I had time to take my Shukuchi out for a ride. It was a warm weather. It does look like we got a short-break from winter. I took motorways until Eindhovan to skip the seen places. As planned from there, I took windy roads to reach Limburg, Belgium. Since it is winter time, it was getting dark soon. I had another hour and a half ride when it was 4 o'clock. I had to give up and turn back home from a near border village called Weert. I really like the village Weert and the individual houses with car port and garages. I remembered the plan that I had initially to buy an individual house with garden and car port or shed for my Shukuchi. So that it will be a workshop afterwards for I have the Shukuchi maintanance. However, I had to settle for an apartment last year. I might buy a new one by selling this apartment later once I have a partner to increase the mortgage budget. Hold that thought!\n\n> We do worry about the things we did not have or do. As an aquitance of mine once said, *I do not like the could have or should have. Because it never happens*.\n\nI rode back home real fast clocking 100Kmph as average on the motorways. It was nice ride overall even though I did not reach my destination as planned.\n\n> So I recalled the saying, *it is the journey that matters!*\n","source":"_posts/log-2019-02-17.md","raw":"---\ntitle: Weekend ride to Weert\ntags: [Journal, Shukuchi]\ndate: 2019-02-17 21:52:57\nicon: fas fa-journal-whills\n---\n\nToday afternoon, I had time to take my Shukuchi out for a ride. It was a warm weather. It does look like we got a short-break from winter. I took motorways until Eindhovan to skip the seen places. As planned from there, I took windy roads to reach Limburg, Belgium. Since it is winter time, it was getting dark soon. I had another hour and a half ride when it was 4 o'clock. I had to give up and turn back home from a near border village called Weert. I really like the village Weert and the individual houses with car port and garages. I remembered the plan that I had initially to buy an individual house with garden and car port or shed for my Shukuchi. So that it will be a workshop afterwards for I have the Shukuchi maintanance. However, I had to settle for an apartment last year. I might buy a new one by selling this apartment later once I have a partner to increase the mortgage budget. Hold that thought!\n\n> We do worry about the things we did not have or do. As an aquitance of mine once said, *I do not like the could have or should have. Because it never happens*.\n\nI rode back home real fast clocking 100Kmph as average on the motorways. It was nice ride overall even though I did not reach my destination as planned.\n\n> So I recalled the saying, *it is the journey that matters!*\n","slug":"log","published":1,"updated":"2019-03-17T15:09:03.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck66ki6pq0035ryi0351kpm8m","content":"<p>Today afternoon, I had time to take my Shukuchi out for a ride. It was a warm weather. It does look like we got a short-break from winter. I took motorways until Eindhovan to skip the seen places. As planned from there, I took windy roads to reach Limburg, Belgium. Since it is winter time, it was getting dark soon. I had another hour and a half ride when it was 4 o’clock. I had to give up and turn back home from a near border village called Weert. I really like the village Weert and the individual houses with car port and garages. I remembered the plan that I had initially to buy an individual house with garden and car port or shed for my Shukuchi. So that it will be a workshop afterwards for I have the Shukuchi maintanance. However, I had to settle for an apartment last year. I might buy a new one by selling this apartment later once I have a partner to increase the mortgage budget. Hold that thought!</p>\n<blockquote>\n<p>We do worry about the things we did not have or do. As an aquitance of mine once said, <em>I do not like the could have or should have. Because it never happens</em>.</p>\n</blockquote>\n<p>I rode back home real fast clocking 100Kmph as average on the motorways. It was nice ride overall even though I did not reach my destination as planned.</p>\n<blockquote>\n<p>So I recalled the saying, <em>it is the journey that matters!</em></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Today afternoon, I had time to take my Shukuchi out for a ride. It was a warm weather. It does look like we got a short-break from winter. I took motorways until Eindhovan to skip the seen places. As planned from there, I took windy roads to reach Limburg, Belgium. Since it is winter time, it was getting dark soon. I had another hour and a half ride when it was 4 o’clock. I had to give up and turn back home from a near border village called Weert. I really like the village Weert and the individual houses with car port and garages. I remembered the plan that I had initially to buy an individual house with garden and car port or shed for my Shukuchi. So that it will be a workshop afterwards for I have the Shukuchi maintanance. However, I had to settle for an apartment last year. I might buy a new one by selling this apartment later once I have a partner to increase the mortgage budget. Hold that thought!</p>\n<blockquote>\n<p>We do worry about the things we did not have or do. As an aquitance of mine once said, <em>I do not like the could have or should have. Because it never happens</em>.</p>\n</blockquote>\n<p>I rode back home real fast clocking 100Kmph as average on the motorways. It was nice ride overall even though I did not reach my destination as planned.</p>\n<blockquote>\n<p>So I recalled the saying, <em>it is the journey that matters!</em></p>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/How-to-convert-SVGs-to-desired-color-2019-10-08/css_filter_generator.png","slug":"css_filter_generator.png","post":"ck66ki6o5001gryi0z9zbija2","modified":1,"renderable":0},{"_id":"source/_drafts/A-week-in-Madeira-Portugal/machico_viewpoint.jpg","slug":"machico_viewpoint.jpg","post":"ck66ki6l10000ryi0iw89ygpb","modified":1,"renderable":0},{"_id":"source/_drafts/How-to-enable-ES-modules-in-nodejs/common_js_import.svg","slug":"common_js_import.svg","post":"ck66ki6ld0003ryi0c64iqzlf","modified":1,"renderable":0},{"_id":"source/_drafts/How-to-enable-ES-modules-in-nodejs/es6_import.svg","slug":"es6_import.svg","post":"ck66ki6ld0003ryi0c64iqzlf","modified":1,"renderable":0},{"_id":"source/_posts/DailyUI-Challenge-Series-001-signup-form-2019-08-25/dailyui-challenge-001-signup-form.png","post":"ck66ki6ng0011ryi08cm0n9mg","slug":"dailyui-challenge-001-signup-form.png","modified":1,"renderable":1},{"_id":"source/_posts/How-to-create-a-custom-checkbox-with-just-CSS-2019-08-26/custom-checkbox-css-only.png","post":"ck66ki6oa001lryi0jmxq57jo","slug":"custom-checkbox-css-only.png","modified":1,"renderable":1},{"_id":"source/_posts/Few-ways-to-add-and-remove-items-in-an-array-2019-08-01/push_pop_methods.svg","slug":"push_pop_methods.svg","post":"ck66ki6nk0012ryi02xdfr0ec","modified":1,"renderable":0},{"_id":"source/_posts/Few-ways-to-add-and-remove-items-in-an-array-2019-08-01/shift_unshift_methods.svg","slug":"shift_unshift_methods.svg","post":"ck66ki6nk0012ryi02xdfr0ec","modified":1,"renderable":0},{"_id":"source/_posts/CSS-transform-property-2019-08-23/css-transform-css.svg","slug":"css-transform-css.svg","post":"ck66ki6nt0017ryi0es5nnwde","modified":1,"renderable":0},{"_id":"source/_posts/CSS-transform-property-2019-08-23/css-transform-html.svg","slug":"css-transform-html.svg","post":"ck66ki6nt0017ryi0es5nnwde","modified":1,"renderable":0},{"_id":"source/_posts/How-to-add-quick-night-mode-to-your-blog-2019-09-03/ashkeys-instant-nightmode-on.png","post":"ck66ki6nv0019ryi0rw0psr68","slug":"ashkeys-instant-nightmode-on.png","modified":1,"renderable":1},{"_id":"source/_posts/How-to-add-quick-night-mode-to-your-blog-2019-09-03/ashkeys-instant-nightmode.png","post":"ck66ki6nv0019ryi0rw0psr68","slug":"ashkeys-instant-nightmode.png","modified":1,"renderable":1},{"_id":"source/_posts/Usecases-for-first-child-and-last-child-in-css-2019-06-10/first-child_last-child.png","post":"ck66ki6pi002vryi0emv7noi9","slug":"first-child_last-child.png","modified":1,"renderable":1},{"_id":"source/_posts/Usecases-for-first-child-and-last-child-in-css-2019-06-10/first-row_last-row.png","post":"ck66ki6pi002vryi0emv7noi9","slug":"first-row_last-row.png","modified":1,"renderable":1},{"_id":"source/_posts/My-new-laptop-System76-Galago-Pro-2019-02-22/system_76_first_look.jpg","slug":"system_76_first_look.jpg","post":"ck66ki6pk002yryi0b3rwy0c2","modified":1,"renderable":0},{"_id":"source/_posts/My-new-laptop-System76-Galago-Pro-2019-02-22/system_76_gift_card.jpg","slug":"system_76_gift_card.jpg","post":"ck66ki6pk002yryi0b3rwy0c2","modified":1,"renderable":0},{"_id":"source/_posts/My-new-laptop-System76-Galago-Pro-2019-02-22/system_76_installation.jpg","slug":"system_76_installation.jpg","post":"ck66ki6pk002yryi0b3rwy0c2","modified":1,"renderable":0},{"_id":"source/_posts/My-new-laptop-System76-Galago-Pro-2019-02-22/system_76_reusable_package.jpg","slug":"system_76_reusable_package.jpg","post":"ck66ki6pk002yryi0b3rwy0c2","modified":1,"renderable":0},{"_id":"source/_posts/My-new-laptop-System76-Galago-Pro-2019-02-22/system_76_settings_configuration.jpg","slug":"system_76_settings_configuration.jpg","post":"ck66ki6pk002yryi0b3rwy0c2","modified":1,"renderable":0},{"_id":"source/_posts/My-new-laptop-System76-Galago-Pro-2019-02-22/system_76_unleash_your_potential.jpg","slug":"system_76_unleash_your_potential.jpg","post":"ck66ki6pk002yryi0b3rwy0c2","modified":1,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ck66ki6l10000ryi0iw89ygpb","tag_id":"ck66ki6lc0002ryi0v92gsmoe","_id":"ck66ki6ln000aryi0dmmms1gf"},{"post_id":"ck66ki6l10000ryi0iw89ygpb","tag_id":"ck66ki6ll0006ryi0yzm48jln","_id":"ck66ki6ln000bryi021ntuqz3"},{"post_id":"ck66ki6l10000ryi0iw89ygpb","tag_id":"ck66ki6lm0007ryi00l944rxf","_id":"ck66ki6lo000dryi0tgzsxbbt"},{"post_id":"ck66ki6l10000ryi0iw89ygpb","tag_id":"ck66ki6lm0008ryi0qwywhmo3","_id":"ck66ki6lo000eryi0hpd454ef"},{"post_id":"ck66ki6l80001ryi0xp0lnptt","tag_id":"ck66ki6ln0009ryi07cvsg6rz","_id":"ck66ki6lp000iryi0s380vo9o"},{"post_id":"ck66ki6l80001ryi0xp0lnptt","tag_id":"ck66ki6lo000cryi070co9ywx","_id":"ck66ki6lq000jryi0314e30jf"},{"post_id":"ck66ki6l80001ryi0xp0lnptt","tag_id":"ck66ki6lo000fryi0l2yufike","_id":"ck66ki6lq000lryi0f0ddro2s"},{"post_id":"ck66ki6l80001ryi0xp0lnptt","tag_id":"ck66ki6lp000gryi0xqus0f5j","_id":"ck66ki6lq000mryi0gb56fg4o"},{"post_id":"ck66ki6ld0003ryi0c64iqzlf","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6lr000pryi0xm8h6eun"},{"post_id":"ck66ki6ld0003ryi0c64iqzlf","tag_id":"ck66ki6lq000kryi0nt7pxrf4","_id":"ck66ki6lr000qryi0ds5bmywh"},{"post_id":"ck66ki6ld0003ryi0c64iqzlf","tag_id":"ck66ki6lq000nryi0mv39w47r","_id":"ck66ki6ls000sryi00h47t8v2"},{"post_id":"ck66ki6lh0004ryi0omob3u2h","tag_id":"ck66ki6lr000oryi0n5oxqd3n","_id":"ck66ki6ls000tryi03ydxhadn"},{"post_id":"ck66ki6lh0004ryi0omob3u2h","tag_id":"ck66ki6ls000rryi0up24broe","_id":"ck66ki6ls000uryi0py5epd90"},{"post_id":"ck66ki6n2000vryi0lw356har","tag_id":"ck66ki6lq000nryi0mv39w47r","_id":"ck66ki6nv0018ryi0ec9b90jw"},{"post_id":"ck66ki6n2000vryi0lw356har","tag_id":"ck66ki6nc000zryi08ppmo3c1","_id":"ck66ki6nx001aryi0640gvgfo"},{"post_id":"ck66ki6n2000vryi0lw356har","tag_id":"ck66ki6no0013ryi04lsa6gcq","_id":"ck66ki6nz001dryi0homhwiey"},{"post_id":"ck66ki6n5000xryi0uysiae4b","tag_id":"ck66ki6ln0009ryi07cvsg6rz","_id":"ck66ki6oa001kryi0zftzvcb0"},{"post_id":"ck66ki6n5000xryi0uysiae4b","tag_id":"ck66ki6nt0016ryi0xym6zxcx","_id":"ck66ki6ob001mryi0xjrgtxif"},{"post_id":"ck66ki6n5000xryi0uysiae4b","tag_id":"ck66ki6nx001bryi0kjic9mrh","_id":"ck66ki6oe001pryi045odp4q2"},{"post_id":"ck66ki6n5000xryi0uysiae4b","tag_id":"ck66ki6o4001fryi0wupc4efs","_id":"ck66ki6og001rryi0a8p14rvs"},{"post_id":"ck66ki6nd0010ryi0quevvx50","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6ok001vryi0uu97zi9y"},{"post_id":"ck66ki6nd0010ryi0quevvx50","tag_id":"ck66ki6o9001jryi0d5dkrof6","_id":"ck66ki6ol001xryi0mr799qya"},{"post_id":"ck66ki6nd0010ryi0quevvx50","tag_id":"ck66ki6od001oryi0aj8c4yli","_id":"ck66ki6on0020ryi01va1ogy6"},{"post_id":"ck66ki6os0025ryi0jpj8nfrr","tag_id":"ck66ki6ln0009ryi07cvsg6rz","_id":"ck66ki6ow0028ryi0g8mdv1d8"},{"post_id":"ck66ki6os0025ryi0jpj8nfrr","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6oy002bryi0bhrwi9gx"},{"post_id":"ck66ki6os0025ryi0jpj8nfrr","tag_id":"ck66ki6nt0016ryi0xym6zxcx","_id":"ck66ki6p4002dryi0hfovveki"},{"post_id":"ck66ki6os0025ryi0jpj8nfrr","tag_id":"ck66ki6nx001bryi0kjic9mrh","_id":"ck66ki6p6002gryi0hp0p8mdd"},{"post_id":"ck66ki6os0025ryi0jpj8nfrr","tag_id":"ck66ki6o4001fryi0wupc4efs","_id":"ck66ki6p8002iryi07nukq8vv"},{"post_id":"ck66ki6ng0011ryi08cm0n9mg","tag_id":"ck66ki6oi001tryi0didrklwv","_id":"ck66ki6pa002kryi0jdy8k8j9"},{"post_id":"ck66ki6ng0011ryi08cm0n9mg","tag_id":"ck66ki6ol001yryi0t68c7oqe","_id":"ck66ki6pc002nryi0z9h1r8xu"},{"post_id":"ck66ki6ng0011ryi08cm0n9mg","tag_id":"ck66ki6oq0023ryi0lh42ynw4","_id":"ck66ki6pe002pryi065u3pvzj"},{"post_id":"ck66ki6ng0011ryi08cm0n9mg","tag_id":"ck66ki6ou0026ryi0cwjczymr","_id":"ck66ki6pg002sryi0db254hr3"},{"post_id":"ck66ki6ng0011ryi08cm0n9mg","tag_id":"ck66ki6o9001jryi0d5dkrof6","_id":"ck66ki6pi002uryi00sb8a5c6"},{"post_id":"ck66ki6p4002eryi0b1sa3odj","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6pk002xryi0shmol44s"},{"post_id":"ck66ki6p4002eryi0b1sa3odj","tag_id":"ck66ki6o9001jryi0d5dkrof6","_id":"ck66ki6pm002zryi0cwhcahe8"},{"post_id":"ck66ki6p4002eryi0b1sa3odj","tag_id":"ck66ki6ou0026ryi0cwjczymr","_id":"ck66ki6po0032ryi0k215y7wa"},{"post_id":"ck66ki6pa002mryi06adxij4j","tag_id":"ck66ki6ln0009ryi07cvsg6rz","_id":"ck66ki6pp0034ryi0262y8yvz"},{"post_id":"ck66ki6pa002mryi06adxij4j","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6ps0037ryi06y3r8zhv"},{"post_id":"ck66ki6pa002mryi06adxij4j","tag_id":"ck66ki6nt0016ryi0xym6zxcx","_id":"ck66ki6ps0038ryi004rwyyqz"},{"post_id":"ck66ki6pa002mryi06adxij4j","tag_id":"ck66ki6nx001bryi0kjic9mrh","_id":"ck66ki6pt003aryi00ly1lovi"},{"post_id":"ck66ki6pa002mryi06adxij4j","tag_id":"ck66ki6o4001fryi0wupc4efs","_id":"ck66ki6pt003bryi0uzko8q0p"},{"post_id":"ck66ki6pc002oryi0u8a6nev2","tag_id":"ck66ki6ln0009ryi07cvsg6rz","_id":"ck66ki6pu003dryi0cyf7ytrm"},{"post_id":"ck66ki6pc002oryi0u8a6nev2","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6pu003eryi0krdwamxc"},{"post_id":"ck66ki6pc002oryi0u8a6nev2","tag_id":"ck66ki6nt0016ryi0xym6zxcx","_id":"ck66ki6pu003fryi0u00cbfjl"},{"post_id":"ck66ki6pc002oryi0u8a6nev2","tag_id":"ck66ki6nx001bryi0kjic9mrh","_id":"ck66ki6pu003hryi09qk7wsht"},{"post_id":"ck66ki6pc002oryi0u8a6nev2","tag_id":"ck66ki6o4001fryi0wupc4efs","_id":"ck66ki6pv003iryi0j3iugsbn"},{"post_id":"ck66ki6nk0012ryi02xdfr0ec","tag_id":"ck66ki6ln0009ryi07cvsg6rz","_id":"ck66ki6pv003kryi05hql1kv6"},{"post_id":"ck66ki6nk0012ryi02xdfr0ec","tag_id":"ck66ki6p6002fryi0g8uwh4rr","_id":"ck66ki6pw003lryi0986oo2n6"},{"post_id":"ck66ki6nk0012ryi02xdfr0ec","tag_id":"ck66ki6pa002lryi09xvd2yao","_id":"ck66ki6pw003nryi0mz8fppki"},{"post_id":"ck66ki6pk002yryi0b3rwy0c2","tag_id":"ck66ki6ln0009ryi07cvsg6rz","_id":"ck66ki6pw003oryi06zs2xkhf"},{"post_id":"ck66ki6pk002yryi0b3rwy0c2","tag_id":"ck66ki6nx001bryi0kjic9mrh","_id":"ck66ki6px003qryi0y550is3s"},{"post_id":"ck66ki6np0014ryi0nx95euy1","tag_id":"ck66ki6pf002rryi0lge75owi","_id":"ck66ki6px003rryi0t4wmgdlz"},{"post_id":"ck66ki6np0014ryi0nx95euy1","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6py003tryi0rdcyx1n8"},{"post_id":"ck66ki6np0014ryi0nx95euy1","tag_id":"ck66ki6nx001bryi0kjic9mrh","_id":"ck66ki6py003uryi01r5a9wmv"},{"post_id":"ck66ki6np0014ryi0nx95euy1","tag_id":"ck66ki6nt0016ryi0xym6zxcx","_id":"ck66ki6pz003wryi0wfutej40"},{"post_id":"ck66ki6np0014ryi0nx95euy1","tag_id":"ck66ki6o4001fryi0wupc4efs","_id":"ck66ki6pz003xryi03w1vv60m"},{"post_id":"ck66ki6nr0015ryi096pl0vsa","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6q2003zryi02l6faswf"},{"post_id":"ck66ki6nr0015ryi096pl0vsa","tag_id":"ck66ki6ps0039ryi039akasku","_id":"ck66ki6q30040ryi0vnpvnq2y"},{"post_id":"ck66ki6nr0015ryi096pl0vsa","tag_id":"ck66ki6pt003cryi00ynwf5kw","_id":"ck66ki6q30042ryi0j22vl916"},{"post_id":"ck66ki6nt0017ryi0es5nnwde","tag_id":"ck66ki6pu003gryi099ftjmd7","_id":"ck66ki6q40043ryi0uwyjero1"},{"post_id":"ck66ki6nt0017ryi0es5nnwde","tag_id":"ck66ki6o9001jryi0d5dkrof6","_id":"ck66ki6q40045ryi00agxgngy"},{"post_id":"ck66ki6nt0017ryi0es5nnwde","tag_id":"ck66ki6ps0039ryi039akasku","_id":"ck66ki6q50046ryi0uxi807ig"},{"post_id":"ck66ki6nv0019ryi0rw0psr68","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6q50047ryi08s8g1mnf"},{"post_id":"ck66ki6nv0019ryi0rw0psr68","tag_id":"ck66ki6ln0009ryi07cvsg6rz","_id":"ck66ki6q60049ryi0j0i5frzz"},{"post_id":"ck66ki6nv0019ryi0rw0psr68","tag_id":"ck66ki6px003pryi0gvlvgprh","_id":"ck66ki6q7004aryi05sdvxrdc"},{"post_id":"ck66ki6nv0019ryi0rw0psr68","tag_id":"ck66ki6ps0039ryi039akasku","_id":"ck66ki6q7004cryi0oier9ugb"},{"post_id":"ck66ki6nv0019ryi0rw0psr68","tag_id":"ck66ki6ou0026ryi0cwjczymr","_id":"ck66ki6q7004dryi0xdzbac02"},{"post_id":"ck66ki6ny001cryi0vefaxd3d","tag_id":"ck66ki6ln0009ryi07cvsg6rz","_id":"ck66ki6q8004fryi0ui9q5fga"},{"post_id":"ck66ki6ny001cryi0vefaxd3d","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6q8004gryi09592euo5"},{"post_id":"ck66ki6ny001cryi0vefaxd3d","tag_id":"ck66ki6pz003yryi08u2qgday","_id":"ck66ki6q9004iryi0tq7p504w"},{"post_id":"ck66ki6ny001cryi0vefaxd3d","tag_id":"ck66ki6nx001bryi0kjic9mrh","_id":"ck66ki6q9004jryi0v4m1ha9r"},{"post_id":"ck66ki6ny001cryi0vefaxd3d","tag_id":"ck66ki6nt0016ryi0xym6zxcx","_id":"ck66ki6qa004lryi0wmmrvyt8"},{"post_id":"ck66ki6o0001eryi0w3g5id8t","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6qa004mryi0236c9uyx"},{"post_id":"ck66ki6o0001eryi0w3g5id8t","tag_id":"ck66ki6nx001bryi0kjic9mrh","_id":"ck66ki6qb004oryi09vhrpudm"},{"post_id":"ck66ki6o0001eryi0w3g5id8t","tag_id":"ck66ki6nt0016ryi0xym6zxcx","_id":"ck66ki6qb004pryi0xf1lt1e0"},{"post_id":"ck66ki6o0001eryi0w3g5id8t","tag_id":"ck66ki6o4001fryi0wupc4efs","_id":"ck66ki6qc004rryi0lqc7pfln"},{"post_id":"ck66ki6o5001gryi0z9zbija2","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6qc004sryi0iiej30s3"},{"post_id":"ck66ki6o5001gryi0z9zbija2","tag_id":"ck66ki6q40044ryi0vvu8pu71","_id":"ck66ki6qd004uryi038n6qrd8"},{"post_id":"ck66ki6o5001gryi0z9zbija2","tag_id":"ck66ki6o9001jryi0d5dkrof6","_id":"ck66ki6qf004vryi0ejri4ee9"},{"post_id":"ck66ki6o5001gryi0z9zbija2","tag_id":"ck66ki6q7004bryi00q4palbf","_id":"ck66ki6qf004xryi08ctaawmu"},{"post_id":"ck66ki6o6001hryi0rgkzaufh","tag_id":"ck66ki6ln0009ryi07cvsg6rz","_id":"ck66ki6qf004yryi0ryaw0u57"},{"post_id":"ck66ki6o6001hryi0rgkzaufh","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6qg004zryi0pi5cjzli"},{"post_id":"ck66ki6o6001hryi0rgkzaufh","tag_id":"ck66ki6q7004eryi04owc6ygy","_id":"ck66ki6qh0051ryi0fevcpn4j"},{"post_id":"ck66ki6o6001hryi0rgkzaufh","tag_id":"ck66ki6pz003yryi08u2qgday","_id":"ck66ki6qh0052ryi0fg1v567m"},{"post_id":"ck66ki6o8001iryi0j7lch97w","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6qj0054ryi0scxyno77"},{"post_id":"ck66ki6o8001iryi0j7lch97w","tag_id":"ck66ki6q9004kryi02ly14ajq","_id":"ck66ki6qk0055ryi09zq5wl9c"},{"post_id":"ck66ki6o8001iryi0j7lch97w","tag_id":"ck66ki6pa002lryi09xvd2yao","_id":"ck66ki6ql0057ryi053nqsdec"},{"post_id":"ck66ki6o8001iryi0j7lch97w","tag_id":"ck66ki6lq000kryi0nt7pxrf4","_id":"ck66ki6ql0058ryi0xzzqjr8l"},{"post_id":"ck66ki6oa001lryi0jmxq57jo","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6qm005aryi0vuk4pim2"},{"post_id":"ck66ki6oa001lryi0jmxq57jo","tag_id":"ck66ki6px003pryi0gvlvgprh","_id":"ck66ki6qm005bryi0fior00y8"},{"post_id":"ck66ki6oa001lryi0jmxq57jo","tag_id":"ck66ki6od001oryi0aj8c4yli","_id":"ck66ki6qn005dryi0afk0gav8"},{"post_id":"ck66ki6oa001lryi0jmxq57jo","tag_id":"ck66ki6qf004wryi09zkne4fv","_id":"ck66ki6qn005eryi0ic5sqofv"},{"post_id":"ck66ki6oc001nryi09dpcr96g","tag_id":"ck66ki6pf002rryi0lge75owi","_id":"ck66ki6qn005gryi091g2ukp1"},{"post_id":"ck66ki6oc001nryi09dpcr96g","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6qo005hryi03nk13vre"},{"post_id":"ck66ki6oc001nryi09dpcr96g","tag_id":"ck66ki6nx001bryi0kjic9mrh","_id":"ck66ki6qp005jryi0559le03i"},{"post_id":"ck66ki6oc001nryi09dpcr96g","tag_id":"ck66ki6nt0016ryi0xym6zxcx","_id":"ck66ki6qp005kryi05opgh7yl"},{"post_id":"ck66ki6oc001nryi09dpcr96g","tag_id":"ck66ki6o4001fryi0wupc4efs","_id":"ck66ki6qp005mryi0kzn2z87p"},{"post_id":"ck66ki6oe001qryi0xk5mn78b","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6qq005nryi0z81amwkq"},{"post_id":"ck66ki6oe001qryi0xk5mn78b","tag_id":"ck66ki6qi0053ryi09slusg9q","_id":"ck66ki6qq005oryi0ody7d8fv"},{"post_id":"ck66ki6oe001qryi0xk5mn78b","tag_id":"ck66ki6pa002lryi09xvd2yao","_id":"ck66ki6qr005qryi0s2lhvlgv"},{"post_id":"ck66ki6og001sryi02yfb9ils","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6qr005rryi04cec2j7n"},{"post_id":"ck66ki6og001sryi02yfb9ils","tag_id":"ck66ki6ql0059ryi0bqgzee5c","_id":"ck66ki6qs005tryi0jid4m2w6"},{"post_id":"ck66ki6og001sryi02yfb9ils","tag_id":"ck66ki6qm005cryi0539zu2so","_id":"ck66ki6qs005uryi0h888d9ec"},{"post_id":"ck66ki6og001sryi02yfb9ils","tag_id":"ck66ki6nt0016ryi0xym6zxcx","_id":"ck66ki6qt005wryi09yco485r"},{"post_id":"ck66ki6og001sryi02yfb9ils","tag_id":"ck66ki6nx001bryi0kjic9mrh","_id":"ck66ki6qt005xryi0m152f9ve"},{"post_id":"ck66ki6oi001uryi0yv28wfwx","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6qt005zryi08r8i314l"},{"post_id":"ck66ki6oi001uryi0yv28wfwx","tag_id":"ck66ki6nt0016ryi0xym6zxcx","_id":"ck66ki6qu0060ryi095a3frs5"},{"post_id":"ck66ki6oi001uryi0yv28wfwx","tag_id":"ck66ki6ql0059ryi0bqgzee5c","_id":"ck66ki6qv0062ryi0ss14oh4r"},{"post_id":"ck66ki6oi001uryi0yv28wfwx","tag_id":"ck66ki6qm005cryi0539zu2so","_id":"ck66ki6qv0063ryi0i3pzm5a0"},{"post_id":"ck66ki6oi001uryi0yv28wfwx","tag_id":"ck66ki6qp005lryi0r3nf3exi","_id":"ck66ki6qv0065ryi0scm2ttqr"},{"post_id":"ck66ki6ok001wryi0r2dr0na8","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6qw0066ryi0gpt0xkd2"},{"post_id":"ck66ki6ok001wryi0r2dr0na8","tag_id":"ck66ki6qp005lryi0r3nf3exi","_id":"ck66ki6qy0068ryi0pmnb1z7q"},{"post_id":"ck66ki6ok001wryi0r2dr0na8","tag_id":"ck66ki6nx001bryi0kjic9mrh","_id":"ck66ki6qz0069ryi04kvk0jhj"},{"post_id":"ck66ki6ok001wryi0r2dr0na8","tag_id":"ck66ki6nt0016ryi0xym6zxcx","_id":"ck66ki6qz006bryi0y8uvmwl3"},{"post_id":"ck66ki6om001zryi0u6ctvxpa","tag_id":"ck66ki6qr005sryi0s7yaov18","_id":"ck66ki6r0006cryi0t6xlqeie"},{"post_id":"ck66ki6om001zryi0u6ctvxpa","tag_id":"ck66ki6qs005vryi0bh4wyzuw","_id":"ck66ki6r0006eryi0rkwwzbe8"},{"post_id":"ck66ki6om001zryi0u6ctvxpa","tag_id":"ck66ki6pa002lryi09xvd2yao","_id":"ck66ki6r1006fryi0fiq7qa1x"},{"post_id":"ck66ki6om001zryi0u6ctvxpa","tag_id":"ck66ki6lq000kryi0nt7pxrf4","_id":"ck66ki6r1006hryi0janfk31q"},{"post_id":"ck66ki6on0021ryi0tqns16ty","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6r2006iryi0j2zv19m5"},{"post_id":"ck66ki6on0021ryi0tqns16ty","tag_id":"ck66ki6ln0009ryi07cvsg6rz","_id":"ck66ki6r3006kryi0gdqg7bbw"},{"post_id":"ck66ki6on0021ryi0tqns16ty","tag_id":"ck66ki6pz003yryi08u2qgday","_id":"ck66ki6r3006lryi0bw9njsaa"},{"post_id":"ck66ki6on0021ryi0tqns16ty","tag_id":"ck66ki6ls000rryi0up24broe","_id":"ck66ki6r4006nryi06it5k75x"},{"post_id":"ck66ki6on0021ryi0tqns16ty","tag_id":"ck66ki6qv0064ryi0e10e5k05","_id":"ck66ki6r5006oryi0fqf3dknq"},{"post_id":"ck66ki6on0021ryi0tqns16ty","tag_id":"ck66ki6nx001bryi0kjic9mrh","_id":"ck66ki6r5006qryi0yilk4f2e"},{"post_id":"ck66ki6on0021ryi0tqns16ty","tag_id":"ck66ki6nt0016ryi0xym6zxcx","_id":"ck66ki6r6006rryi0oo2uniq0"},{"post_id":"ck66ki6op0022ryi0gxu2alnf","tag_id":"ck66ki6qr005sryi0s7yaov18","_id":"ck66ki6r6006sryi0zav5pxu3"},{"post_id":"ck66ki6op0022ryi0gxu2alnf","tag_id":"ck66ki6qs005vryi0bh4wyzuw","_id":"ck66ki6r7006uryi0wiwq8zs3"},{"post_id":"ck66ki6op0022ryi0gxu2alnf","tag_id":"ck66ki6pa002lryi09xvd2yao","_id":"ck66ki6r7006vryi0kbjmbfty"},{"post_id":"ck66ki6op0022ryi0gxu2alnf","tag_id":"ck66ki6lq000kryi0nt7pxrf4","_id":"ck66ki6r8006xryi0y335yjbz"},{"post_id":"ck66ki6or0024ryi01fujckhm","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6r8006yryi05lv6teib"},{"post_id":"ck66ki6or0024ryi01fujckhm","tag_id":"ck66ki6q9004kryi02ly14ajq","_id":"ck66ki6r80070ryi0jcl305ru"},{"post_id":"ck66ki6or0024ryi01fujckhm","tag_id":"ck66ki6pa002lryi09xvd2yao","_id":"ck66ki6r90071ryi0h49wj94d"},{"post_id":"ck66ki6ou0027ryi0keyrx72v","tag_id":"ck66ki6qr005sryi0s7yaov18","_id":"ck66ki6ra0073ryi0cd7xv3qk"},{"post_id":"ck66ki6ou0027ryi0keyrx72v","tag_id":"ck66ki6lq000nryi0mv39w47r","_id":"ck66ki6ra0074ryi09iis6pu3"},{"post_id":"ck66ki6ou0027ryi0keyrx72v","tag_id":"ck66ki6r5006pryi0kzgb2mc0","_id":"ck66ki6rb0076ryi0icl1s7ye"},{"post_id":"ck66ki6ow0029ryi0b277f8vq","tag_id":"ck66ki6ln0009ryi07cvsg6rz","_id":"ck66ki6rb0077ryi0ibscocpg"},{"post_id":"ck66ki6ow0029ryi0b277f8vq","tag_id":"ck66ki6qr005sryi0s7yaov18","_id":"ck66ki6rc0079ryi09rmy61vc"},{"post_id":"ck66ki6ow0029ryi0b277f8vq","tag_id":"ck66ki6pz003yryi08u2qgday","_id":"ck66ki6rc007aryi0b9z4965y"},{"post_id":"ck66ki6ow0029ryi0b277f8vq","tag_id":"ck66ki6r8006zryi0o0n7z6ob","_id":"ck66ki6rd007cryi058371cfa"},{"post_id":"ck66ki6ow0029ryi0b277f8vq","tag_id":"ck66ki6nt0016ryi0xym6zxcx","_id":"ck66ki6rd007dryi0e1c8gemn"},{"post_id":"ck66ki6p2002cryi0k5r48uwj","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6re007fryi0lphsfetb"},{"post_id":"ck66ki6p2002cryi0k5r48uwj","tag_id":"ck66ki6nt0016ryi0xym6zxcx","_id":"ck66ki6re007gryi0mlg7qmyt"},{"post_id":"ck66ki6p2002cryi0k5r48uwj","tag_id":"ck66ki6ql0059ryi0bqgzee5c","_id":"ck66ki6re007iryi0q89ggknt"},{"post_id":"ck66ki6p2002cryi0k5r48uwj","tag_id":"ck66ki6qm005cryi0539zu2so","_id":"ck66ki6rf007jryi06gvdhjq1"},{"post_id":"ck66ki6p2002cryi0k5r48uwj","tag_id":"ck66ki6qp005lryi0r3nf3exi","_id":"ck66ki6rf007lryi0pr21ldv6"},{"post_id":"ck66ki6p7002hryi037v5qvp7","tag_id":"ck66ki6lp000hryi0euie6v1p","_id":"ck66ki6rg007mryi09vui0mns"},{"post_id":"ck66ki6p7002hryi037v5qvp7","tag_id":"ck66ki6q7004eryi04owc6ygy","_id":"ck66ki6rg007nryi0wh91q6gp"},{"post_id":"ck66ki6p7002hryi037v5qvp7","tag_id":"ck66ki6rd007eryi063sxzy7v","_id":"ck66ki6rg007pryi0765iigsm"},{"post_id":"ck66ki6p7002hryi037v5qvp7","tag_id":"ck66ki6re007hryi08r3v6pg6","_id":"ck66ki6rg007qryi0a9tjy3py"},{"post_id":"ck66ki6p9002jryi0c1rwxlrg","tag_id":"ck66ki6rf007kryi0ct7zzowc","_id":"ck66ki6rh007sryi0a9dtlz25"},{"post_id":"ck66ki6p9002jryi0c1rwxlrg","tag_id":"ck66ki6ou0026ryi0cwjczymr","_id":"ck66ki6rh007tryi02s8qy1e8"},{"post_id":"ck66ki6p9002jryi0c1rwxlrg","tag_id":"ck66ki6rg007oryi09r87u0jf","_id":"ck66ki6ri007vryi0fesmumf8"},{"post_id":"ck66ki6pe002qryi0kt2bki0u","tag_id":"ck66ki6pf002rryi0lge75owi","_id":"ck66ki6rm007zryi09y1gqcm0"},{"post_id":"ck66ki6pe002qryi0kt2bki0u","tag_id":"ck66ki6ri007uryi0z6w37orn","_id":"ck66ki6rm0080ryi0sm4e8g4l"},{"post_id":"ck66ki6pe002qryi0kt2bki0u","tag_id":"ck66ki6pz003yryi08u2qgday","_id":"ck66ki6rn0082ryi00eru17fd"},{"post_id":"ck66ki6pe002qryi0kt2bki0u","tag_id":"ck66ki6q7004eryi04owc6ygy","_id":"ck66ki6ro0083ryi0wxpv8kew"},{"post_id":"ck66ki6pg002tryi0c7r84ozs","tag_id":"ck66ki6pf002rryi0lge75owi","_id":"ck66ki6rq0086ryi07ig1weip"},{"post_id":"ck66ki6pg002tryi0c7r84ozs","tag_id":"ck66ki6ri007uryi0z6w37orn","_id":"ck66ki6rq0087ryi0sa2l918z"},{"post_id":"ck66ki6pg002tryi0c7r84ozs","tag_id":"ck66ki6pz003yryi08u2qgday","_id":"ck66ki6rr0089ryi054tuvtsi"},{"post_id":"ck66ki6pg002tryi0c7r84ozs","tag_id":"ck66ki6ls000rryi0up24broe","_id":"ck66ki6rs008aryi04gopzx42"},{"post_id":"ck66ki6pg002tryi0c7r84ozs","tag_id":"ck66ki6qv0064ryi0e10e5k05","_id":"ck66ki6rs008cryi0mpbb1jjx"},{"post_id":"ck66ki6pi002vryi0emv7noi9","tag_id":"ck66ki6rp0085ryi0kgqci71d","_id":"ck66ki6rs008dryi04kyqi5yc"},{"post_id":"ck66ki6pi002vryi0emv7noi9","tag_id":"ck66ki6od001oryi0aj8c4yli","_id":"ck66ki6rt008fryi08xuaakmq"},{"post_id":"ck66ki6pi002vryi0emv7noi9","tag_id":"ck66ki6o9001jryi0d5dkrof6","_id":"ck66ki6ru008gryi0a08uo6gu"},{"post_id":"ck66ki6pm0030ryi0anoyfvce","tag_id":"ck66ki6ln0009ryi07cvsg6rz","_id":"ck66ki6ru008iryi04403m5rg"},{"post_id":"ck66ki6pm0030ryi0anoyfvce","tag_id":"ck66ki6ri007uryi0z6w37orn","_id":"ck66ki6ru008jryi0hy6rci14"},{"post_id":"ck66ki6pm0030ryi0anoyfvce","tag_id":"ck66ki6rs008bryi05mzpqvih","_id":"ck66ki6rv008lryi0e3ck6do2"},{"post_id":"ck66ki6po0033ryi0ju3nieka","tag_id":"ck66ki6pf002rryi0lge75owi","_id":"ck66ki6rv008mryi0s55nsi70"},{"post_id":"ck66ki6po0033ryi0ju3nieka","tag_id":"ck66ki6ri007uryi0z6w37orn","_id":"ck66ki6rw008nryi02qyzqmq5"},{"post_id":"ck66ki6po0033ryi0ju3nieka","tag_id":"ck66ki6nx001bryi0kjic9mrh","_id":"ck66ki6rw008oryi01b855vnq"},{"post_id":"ck66ki6po0033ryi0ju3nieka","tag_id":"ck66ki6lq000nryi0mv39w47r","_id":"ck66ki6rw008pryi0pqpw6vdw"},{"post_id":"ck66ki6po0033ryi0ju3nieka","tag_id":"ck66ki6ru008hryi09qaunaqm","_id":"ck66ki6rx008qryi0jtvy95b8"},{"post_id":"ck66ki6pq0035ryi0351kpm8m","tag_id":"ck66ki6lc0002ryi0v92gsmoe","_id":"ck66ki6rx008rryi0lz5a6g8m"},{"post_id":"ck66ki6pq0035ryi0351kpm8m","tag_id":"ck66ki6ru008kryi0ofkygzr0","_id":"ck66ki6rx008sryi06kvegwgt"}],"Tag":[{"name":"Journal","_id":"ck66ki6lc0002ryi0v92gsmoe"},{"name":"Vacation","_id":"ck66ki6ll0006ryi0yzm48jln"},{"name":"Portugal","_id":"ck66ki6lm0007ryi00l944rxf"},{"name":"Europe","_id":"ck66ki6lm0008ryi0qwywhmo3"},{"name":"Blog","_id":"ck66ki6ln0009ryi07cvsg6rz"},{"name":"Pet Projects","_id":"ck66ki6lo000cryi070co9ywx"},{"name":"NodeJS","_id":"ck66ki6lo000fryi0l2yufike"},{"name":"Electron","_id":"ck66ki6lp000gryi0xqus0f5j"},{"name":"How To","_id":"ck66ki6lp000hryi0euie6v1p"},{"name":"ES6","_id":"ck66ki6lq000kryi0nt7pxrf4"},{"name":"nodejs","_id":"ck66ki6lq000nryi0mv39w47r"},{"name":"Java","_id":"ck66ki6lr000oryi0n5oxqd3n"},{"name":"Mosquitto","_id":"ck66ki6ls000rryi0up24broe"},{"name":"API","_id":"ck66ki6nc000zryi08ppmo3c1"},{"name":"express","_id":"ck66ki6no0013ryi04lsa6gcq"},{"name":"Linux","_id":"ck66ki6nt0016ryi0xym6zxcx"},{"name":"Pop!_OS","_id":"ck66ki6nx001bryi0kjic9mrh"},{"name":"Terminal Usage","_id":"ck66ki6o4001fryi0wupc4efs"},{"name":"CSS","_id":"ck66ki6o9001jryi0d5dkrof6"},{"name":"Pseudo classes","_id":"ck66ki6od001oryi0aj8c4yli"},{"name":"DailyUI Challenge Series","_id":"ck66ki6oi001tryi0didrklwv"},{"name":"Angular","_id":"ck66ki6ol001yryi0t68c7oqe"},{"name":"Reactive Forms","_id":"ck66ki6oq0023ryi0lh42ynw4"},{"name":"JavaScript","_id":"ck66ki6ou0026ryi0cwjczymr"},{"name":"Array","_id":"ck66ki6p6002fryi0g8uwh4rr"},{"name":"JS","_id":"ck66ki6pa002lryi09xvd2yao"},{"name":"Tutorial","_id":"ck66ki6pf002rryi0lge75owi"},{"name":"HTML","_id":"ck66ki6ps0039ryi039akasku"},{"name":"Web Browser","_id":"ck66ki6pt003cryi00ynwf5kw"},{"name":"New to me","_id":"ck66ki6pu003gryi099ftjmd7"},{"name":"CSS3","_id":"ck66ki6px003pryi0gvlvgprh"},{"name":"Docker","_id":"ck66ki6pz003yryi08u2qgday"},{"name":"SVG","_id":"ck66ki6q40044ryi0vvu8pu71"},{"name":"Tools","_id":"ck66ki6q7004bryi00q4palbf"},{"name":"Postgres","_id":"ck66ki6q7004eryi04owc6ygy"},{"name":"String","_id":"ck66ki6q9004kryi02ly14ajq"},{"name":"Custom","_id":"ck66ki6qf004wryi09zkne4fv"},{"name":"Debug","_id":"ck66ki6qi0053ryi09slusg9q"},{"name":"Bash","_id":"ck66ki6ql0059ryi0bqgzee5c"},{"name":"Shell","_id":"ck66ki6qm005cryi0539zu2so"},{"name":"Terminal","_id":"ck66ki6qp005lryi0r3nf3exi"},{"name":"How to","_id":"ck66ki6qr005sryi0s7yaov18"},{"name":"Arrays","_id":"ck66ki6qs005vryi0bh4wyzuw"},{"name":"MQTT","_id":"ck66ki6qv0064ryi0e10e5k05"},{"name":"server","_id":"ck66ki6r5006pryi0kzgb2mc0"},{"name":"terminal","_id":"ck66ki6r8006zryi0o0n7z6ob"},{"name":"Performance","_id":"ck66ki6rd007eryi063sxzy7v"},{"name":"DB","_id":"ck66ki6re007hryi08r3v6pg6"},{"name":"React","_id":"ck66ki6rf007kryi0ct7zzowc"},{"name":"App","_id":"ck66ki6rg007oryi09r87u0jf"},{"name":"Setup","_id":"ck66ki6ri007uryi0z6w37orn"},{"name":"Usecase","_id":"ck66ki6rp0085ryi0kgqci71d"},{"name":"Hexo","_id":"ck66ki6rs008bryi05mzpqvih"},{"name":"npm","_id":"ck66ki6ru008hryi09qaunaqm"},{"name":"Shukuchi","_id":"ck66ki6ru008kryi0ofkygzr0"}]}}